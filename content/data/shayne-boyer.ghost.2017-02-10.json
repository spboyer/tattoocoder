{"meta":{"exported_on":1486766322791,"version":"004"},"data":{"posts":[{"id":2,"uuid":"6befa103-c365-4fc1-976d-bf780c56c8f0","title":"Azure Mobile Services .NET Backend Tips","slug":"azure_mobile_services_net_backend_tips","markdown":"I've been working with Azure Mobile Services since it was released and until recently only the JavaScript backend was available, built using node.js. Although it is very mature with many options, the community was pressuring for a .NET option and now it is available.\n\nModeled much like a standard Web API / MVC project at first glance, there may be a few things that you like to take advantage of in these types of projects that throw you for a loop when using the new .NET option. These include Dependency Injection, Entity Framework (Migrations and Relationships), and the help page.\n\n### Getting Started\nYou have two options for getting a project started.\n\n1\\. Go to the Azure Portal and create a new Azure Mobile Service and download the project\n([http://azure.microsoft.com/en-us/documentation/articles/mobile-services-dotnet-backend-windows-store-dotnet-get-started/](http://azure.microsoft.com/en-us/documentation/articles/mobile-services-dotnet-backend-windows-store-dotnet-get-started/))\n\n2\\. Start New Project from Visual Studio 2013 SP2 and choose \"Web\" -&gt; \"Windows Azure Mobile Service\"\n\nFor this example, I went with option #1 and called it \"_mytodotips_\". Download the solution and be sure to build it to get all of the necessary nuget packages and ensure that your environment is set.\n\n### Entity Framework, Code First, Migrations, and Relationship Challenges\nThere are a few items here that may leave you scratching your head here, frustrating you, and depending on your temper perhaps throwing things. So, let me see if I can keep your mouse in one piece.\n\n#### Migrations\nDo this first! Open Package Manager Console, Tools -> NuGet Package Manager -> Package Manager Console, and type the following command> enable-migrations\nthe result will create a new folder in your solution called \"Migrations\" containing a file named \"Configuration.cs\", thus enabling code first migrations when your schema changes. In order to complete the change, open the WebApiConfig.cs file in the \"App_Start\" folder.\n\nComment out the _Database.SetInitializer(...);_ line, and you may also comment out or delete the class that is called within the method. &nbsp;This method drops and recreates the database each time the application is run.\n\nInsert the following code above the _SetInitializer(...);_&nbsp;line to call the Configurator class just created by \"enable-migrations\" and&nbsp;explicitly apply the latest migration unless it has already been applied.\n\n```language-csharp\nvar migrator = new DbMigrator(new Configuration());\nmigrator.Update();\n```\n\nThe following namespaces will also need to be added to your imports:\n\n```language-csharp\nusing System.Data.Entity.Migrations;\nusing mytodotipsService.Migrations;\n```\n\nOpen Package Manager Console and run _add-migration init_, in doing so sets the initial migration and establishes the migration table.\n\nNow whenever you add to your models, you can run the same _Add-Migration \"migration name\"_&nbsp;in the Package Manager Console and then hit F5 to update the local machine database or publish to Azure and run the service to update the Azure SQL Server database.\n\n#### Relationships\nRelationships are pretty easy, however there are a few maintenance items in the **OnModelCreating **method I have found that help me get past some errors when running \"update-database\" or \"add-migration\".\n\nEach class in Azure Mobile Services that has a table behind inherits from _EntityData_&nbsp;which implements _ITableData. _When make FK relationships you may receive errors when indexes are being created/altered. I have found by setting the Id field to be the PK on the table that sometimes these can be alleviated.\n\n```language-csharp\nmodelBuilder.Properties<string>()\n\t.Where(p => p.Name == \"Id\")\n\t.Configure(p => p.IsKey());\n```\n\nAnother option I also put on all new model classes is the following, this tells the database that the Id field is auto generated and is not required to be set when creating a new class.\n\n```language-csharp\nmodelBuilder.Entity<entityname>()\n\t.Property(m => m.Id)\n\t.HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);\n```\n\nNow this a simply a personal preference that I'm sure many will disagree with, but I happen to like my tables to be singular.\n\n```language-csharp\nmodelBuilder.Conventions.Remove<PluralizingTableNameConvention>();\n```\n\n### Dependency Injection\nMy favorite DI engine for sometime has been AutoFac, and by accident I discovered its baked into Azure Mobile's .NET back end as well.\n\nNow that I have the Entity Framework Code First context all set the way I like, I can now make sure I don't have to new up in every controller.\n\nIn our WebApiConfig.cs class, there is a `ServiceConfig.Initialize(...)` call to kick off the configuration process of the application. It accepts a ConfigBuilder class accepting options for your service, but also has an overload to accept a Func to register your own dependencies which happens to be an autofac container.\n\nHere is how to add the database context, for example, using AutoFac.\n\n```language-csharp\nHttpConfiguration config = ServiceConfig.Initialize(\n\tnew ConfigBuilder(options, (configuration, builder) =>  \n    {        \n    \tmytodotipsContext context = new mytodotipsContext();\n        builder.RegisterInstance(context).As<mytodotipscontext>().SingleInstance();  }));\n```\n\nAnd now in our ToDoItemController.cs we can add a constructor and alter the Initializer method to the following.\n\n```language-csharp\npublic class TodoItemController : TableController<todoitem>\n{ \n\tmytodotipsContext context; \n    public TodoItemController(mytodotipsContext myContext) \n    {  \n    \tthis.context = myContext; \n    } \n    \n    protected override void Initialize(HttpControllerContext controllerContext) \n    {  \n    \tbase.Initialize(controllerContext);    \n        // mytodotipsContext context = new mytodotipsContext();  \n        DomainManager = new EntityDomainManager<todoitem>(context, Request, Services); \t\t\t}\n}\n```\n\n### Help Page\nSo, you've got Entity Framework setup with relationships, Dependency Injection going with AutoFac and now you are checking out the help page and getting nothing. What happened?\n\nThere are a few issues we want to attack here.\n\n*   Where is the data model?\n*   I only want to show JSON\n*   and a few more as we fix the top 2Data Model MissingThis is a common issue with serializers when there are circular properties.  In this case there is a Profile class that has ToDo items that has a Profile property.  See the Code First Mapping here:\n\n```language-csharp\nmodelBuilder.Entity<todoitems>().HasRequired(t => t.Profile)                \n\t.WithMany(p => p.ToDoItems)                \n    .HasForeignKey(t => t.ProfileId);\n```\n\nWhat happens here is when the JsonSerializer and XmlSerlizer &nbsp;starts to walk the property tree; they get in an infinite loop and eventually exhaust the maximum errors and exit. In order to fix this, we will add the following to the WebApiConfig.cs class inside the Register method. _*note only adding this for JsonFormatters, but can be handled for Xml just as well._\n\n```language-csharp\nconfig.Formatters.JsonFormatter.SerializerSettings.ReferenceLoopHandling = ReferenceLoopHandling.Ignore;\n```\nNow we can F5, see the help page and the object model represented in Json but the application/xml and text/xml boxes still show with the error. &nbsp;As mentioned in our to do list above we only wanted to support Json. To do so, add the following to the configuration now.\n\n```language-csharp\n// Remove default XML handler\nvar matches = config.Formatters     \n\t.Where(f => f.SupportedMediaTypes         \n    .Where(m => m.MediaType.ToString() == \"application/xml\" ||\n    \tm.MediaType.ToString() == \"text/xml\")         \n        .Count() > 0)     \n        .ToList();\n\nforeach (var match in matches) \n\tconfig.Formatters.Remove(match);\n```\n\nAnd finally, I like to properly case Json.\n\n```language-csharp\nconfig.Formatters.JsonFormatter.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();\n```\n\nThis single line will make JavaScript devs happy. Instead of seeing the objects like this:\n\n```language-javascript\n[    {        \"Text\": \"sample string 1\",        \"Complete\": true,        \"Id\": \"sample string 3\",        \"__version\": \"QEBA\",        \"__createdAt\": \"2014-06-02T16:40:40.641Z\",        \"__updatedAt\": \"2014-06-02T16:40:40.641Z\",        \"__deleted\": true    },\n```\n\nthey are cased properly like this:\n\n```language-javascript\n[    {        \"text\": \"sample string 1\",        \"complete\": true,        \"id\": \"sample string 3\",        \"__version\": \"QEBA\",        \"__createdAt\": \"2014-06-02T16:40:40.641Z\",        \"__updatedAt\": \"2014-06-02T16:40:40.641Z\",        \"__deleted\": true    }\n```\n\nThere are other features such as Notification Hubs and Scheduled Jobs which are awesome additions to any application. Be sure to check these out when leveraging Azure Mobile Services, regardless of whether you are using .NET or JavaScript as your back end of choice.\n\nLeave a comment if you have a tip or trick you like to use or pass on as well.","html":"<p>I've been working with Azure Mobile Services since it was released and until recently only the JavaScript backend was available, built using node.js. Although it is very mature with many options, the community was pressuring for a .NET option and now it is available.</p>\n\n<p>Modeled much like a standard Web API / MVC project at first glance, there may be a few things that you like to take advantage of in these types of projects that throw you for a loop when using the new .NET option. These include Dependency Injection, Entity Framework (Migrations and Relationships), and the help page.</p>\n\n<h3 id=\"gettingstarted\">Getting Started</h3>\n\n<p>You have two options for getting a project started.</p>\n\n<p>1. Go to the Azure Portal and create a new Azure Mobile Service and download the project <br />\n(<a href=\"http://azure.microsoft.com/en-us/documentation/articles/mobile-services-dotnet-backend-windows-store-dotnet-get-started/\">http://azure.microsoft.com/en-us/documentation/articles/mobile-services-dotnet-backend-windows-store-dotnet-get-started/</a>)</p>\n\n<p>2. Start New Project from Visual Studio 2013 SP2 and choose \"Web\" -&gt; \"Windows Azure Mobile Service\"</p>\n\n<p>For this example, I went with option #1 and called it \"<em>mytodotips</em>\". Download the solution and be sure to build it to get all of the necessary nuget packages and ensure that your environment is set.</p>\n\n<h3 id=\"entityframeworkcodefirstmigrationsandrelationshipchallenges\">Entity Framework, Code First, Migrations, and Relationship Challenges</h3>\n\n<p>There are a few items here that may leave you scratching your head here, frustrating you, and depending on your temper perhaps throwing things. So, let me see if I can keep your mouse in one piece.</p>\n\n<h4 id=\"migrations\">Migrations</h4>\n\n<p>Do this first! Open Package Manager Console, Tools -> NuGet Package Manager -> Package Manager Console, and type the following command> enable-migrations <br />\nthe result will create a new folder in your solution called \"Migrations\" containing a file named \"Configuration.cs\", thus enabling code first migrations when your schema changes. In order to complete the change, open the WebApiConfig.cs file in the \"App_Start\" folder.</p>\n\n<p>Comment out the <em>Database.SetInitializer(...);</em> line, and you may also comment out or delete the class that is called within the method. &nbsp;This method drops and recreates the database each time the application is run.</p>\n\n<p>Insert the following code above the <em>SetInitializer(...);</em>&nbsp;line to call the Configurator class just created by \"enable-migrations\" and&nbsp;explicitly apply the latest migration unless it has already been applied.</p>\n\n<pre><code class=\"language-csharp\">var migrator = new DbMigrator(new Configuration());  \nmigrator.Update();  \n</code></pre>\n\n<p>The following namespaces will also need to be added to your imports:</p>\n\n<pre><code class=\"language-csharp\">using System.Data.Entity.Migrations;  \nusing mytodotipsService.Migrations;  \n</code></pre>\n\n<p>Open Package Manager Console and run <em>add-migration init</em>, in doing so sets the initial migration and establishes the migration table.</p>\n\n<p>Now whenever you add to your models, you can run the same <em>Add-Migration \"migration name\"</em>&nbsp;in the Package Manager Console and then hit F5 to update the local machine database or publish to Azure and run the service to update the Azure SQL Server database.</p>\n\n<h4 id=\"relationships\">Relationships</h4>\n\n<p>Relationships are pretty easy, however there are a few maintenance items in the <em>*OnModelCreating *</em>method I have found that help me get past some errors when running \"update-database\" or \"add-migration\".</p>\n\n<p>Each class in Azure Mobile Services that has a table behind inherits from <em>EntityData</em>&nbsp;which implements _ITableData. _When make FK relationships you may receive errors when indexes are being created/altered. I have found by setting the Id field to be the PK on the table that sometimes these can be alleviated.</p>\n\n<pre><code class=\"language-csharp\">modelBuilder.Properties&lt;string&gt;()  \n    .Where(p =&gt; p.Name == \"Id\")\n    .Configure(p =&gt; p.IsKey());\n</code></pre>\n\n<p>Another option I also put on all new model classes is the following, this tells the database that the Id field is auto generated and is not required to be set when creating a new class.</p>\n\n<pre><code class=\"language-csharp\">modelBuilder.Entity&lt;entityname&gt;()  \n    .Property(m =&gt; m.Id)\n    .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);\n</code></pre>\n\n<p>Now this a simply a personal preference that I'm sure many will disagree with, but I happen to like my tables to be singular.</p>\n\n<pre><code class=\"language-csharp\">modelBuilder.Conventions.Remove&lt;PluralizingTableNameConvention&gt;();  \n</code></pre>\n\n<h3 id=\"dependencyinjection\">Dependency Injection</h3>\n\n<p>My favorite DI engine for sometime has been AutoFac, and by accident I discovered its baked into Azure Mobile's .NET back end as well.</p>\n\n<p>Now that I have the Entity Framework Code First context all set the way I like, I can now make sure I don't have to new up in every controller.</p>\n\n<p>In our WebApiConfig.cs class, there is a <code>ServiceConfig.Initialize(...)</code> call to kick off the configuration process of the application. It accepts a ConfigBuilder class accepting options for your service, but also has an overload to accept a Func to register your own dependencies which happens to be an autofac container.</p>\n\n<p>Here is how to add the database context, for example, using AutoFac.</p>\n\n<pre><code class=\"language-csharp\">HttpConfiguration config = ServiceConfig.Initialize(  \n    new ConfigBuilder(options, (configuration, builder) =&gt;  \n    {        \n        mytodotipsContext context = new mytodotipsContext();\n        builder.RegisterInstance(context).As&lt;mytodotipscontext&gt;().SingleInstance();  }));\n</code></pre>\n\n<p>And now in our ToDoItemController.cs we can add a constructor and alter the Initializer method to the following.</p>\n\n<pre><code class=\"language-csharp\">public class TodoItemController : TableController&lt;todoitem&gt;  \n{ \n    mytodotipsContext context; \n    public TodoItemController(mytodotipsContext myContext) \n    {  \n        this.context = myContext; \n    } \n\n    protected override void Initialize(HttpControllerContext controllerContext) \n    {  \n        base.Initialize(controllerContext);    \n        // mytodotipsContext context = new mytodotipsContext();  \n        DomainManager = new EntityDomainManager&lt;todoitem&gt;(context, Request, Services);             }\n}\n</code></pre>\n\n<h3 id=\"helppage\">Help Page</h3>\n\n<p>So, you've got Entity Framework setup with relationships, Dependency Injection going with AutoFac and now you are checking out the help page and getting nothing. What happened?</p>\n\n<p>There are a few issues we want to attack here.</p>\n\n<ul>\n<li>Where is the data model?</li>\n<li>I only want to show JSON</li>\n<li>and a few more as we fix the top 2Data Model MissingThis is a common issue with serializers when there are circular properties.  In this case there is a Profile class that has ToDo items that has a Profile property.  See the Code First Mapping here:</li>\n</ul>\n\n<pre><code class=\"language-csharp\">modelBuilder.Entity&lt;todoitems&gt;().HasRequired(t =&gt; t.Profile)  \n    .WithMany(p =&gt; p.ToDoItems)                \n    .HasForeignKey(t =&gt; t.ProfileId);\n</code></pre>\n\n<p>What happens here is when the JsonSerializer and XmlSerlizer &nbsp;starts to walk the property tree; they get in an infinite loop and eventually exhaust the maximum errors and exit. In order to fix this, we will add the following to the WebApiConfig.cs class inside the Register method. <em>*note only adding this for JsonFormatters, but can be handled for Xml just as well.</em></p>\n\n<pre><code class=\"language-csharp\">config.Formatters.JsonFormatter.SerializerSettings.ReferenceLoopHandling = ReferenceLoopHandling.Ignore;  \n</code></pre>\n\n<p>Now we can F5, see the help page and the object model represented in Json but the application/xml and text/xml boxes still show with the error. &nbsp;As mentioned in our to do list above we only wanted to support Json. To do so, add the following to the configuration now.</p>\n\n<pre><code class=\"language-csharp\">// Remove default XML handler\nvar matches = config.Formatters  \n    .Where(f =&gt; f.SupportedMediaTypes         \n    .Where(m =&gt; m.MediaType.ToString() == \"application/xml\" ||\n        m.MediaType.ToString() == \"text/xml\")         \n        .Count() &gt; 0)     \n        .ToList();\n\nforeach (var match in matches)  \n    config.Formatters.Remove(match);\n</code></pre>\n\n<p>And finally, I like to properly case Json.</p>\n\n<pre><code class=\"language-csharp\">config.Formatters.JsonFormatter.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();  \n</code></pre>\n\n<p>This single line will make JavaScript devs happy. Instead of seeing the objects like this:</p>\n\n<pre><code class=\"language-javascript\">[    {        \"Text\": \"sample string 1\",        \"Complete\": true,        \"Id\": \"sample string 3\",        \"__version\": \"QEBA\",        \"__createdAt\": \"2014-06-02T16:40:40.641Z\",        \"__updatedAt\": \"2014-06-02T16:40:40.641Z\",        \"__deleted\": true    },\n</code></pre>\n\n<p>they are cased properly like this:</p>\n\n<pre><code class=\"language-javascript\">[    {        \"text\": \"sample string 1\",        \"complete\": true,        \"id\": \"sample string 3\",        \"__version\": \"QEBA\",        \"__createdAt\": \"2014-06-02T16:40:40.641Z\",        \"__updatedAt\": \"2014-06-02T16:40:40.641Z\",        \"__deleted\": true    }\n</code></pre>\n\n<p>There are other features such as Notification Hubs and Scheduled Jobs which are awesome additions to any application. Be sure to check these out when leveraging Azure Mobile Services, regardless of whether you are using .NET or JavaScript as your back end of choice.</p>\n\n<p>Leave a comment if you have a tip or trick you like to use or pass on as well.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1401727740001,"created_by":1,"updated_at":1421080352538,"updated_by":1,"published_at":1401727740001,"published_by":1},{"id":3,"uuid":"74e3b037-eae0-433b-8ac7-44f2ee086fa2","title":"ASP.NET Presentations at DEVIntersection","slug":"asp_net_presentations_at_devintersection","markdown":"Had a great time presenting Async Application Development and the Social Authentication options available in ASP.NET this week at DevIntersection.\n\n### Building Async Applications in ASP.NET\n\nAsync has become much easier over time to code and maintain with the async/await keywords and adding the capabilities in WebForms applications can improve overall page response times if done correctly.\n\nHere are the additional links and the slides from the session.\n\n*   [Presentation Slides](http://www.slideshare.net/spboyer/async-aspnet-applications)\n*   [Hanselminutes Podcast – Everything .NET programmers know about Asynchronous Programming is wrong](http://hanselminutes.com/327/everything-net-programmers-know-about-asynchronous-programming-is-wrong).\n*   [Using Asynchronous Methods in ASP.NET 4.5](http://www.asp.net/web-forms/tutorials/aspnet-45/using-asynchronous-methods-in-aspnet-45)\n\n### Bring Your Own Authentication yo MVC\nAs I mentioned in my session on Social loin integration, adding the capability is very easy through since the addition of OWIN/Katana middleware authentication host plumbing that is out of the box in ASP.NET. &nbsp;A couple of highlights from the talk:\n\n*   Add social logins where appropriate\n\n*   Enterprise or internal company applications might not apply*   Leverage test user in Facebook's Developer portalHere are the slides and additional links.Presentation SlidesGet More from Facebook User / Using Facebook C# SDKOWIN and Katana ProjectAgain thanks for coming out and hope to see you in the fall at DEVIntersection and Anglebrackets!","html":"<p>Had a great time presenting Async Application Development and the Social Authentication options available in ASP.NET this week at DevIntersection.</p>\n\n<h3 id=\"buildingasyncapplicationsinaspnet\">Building Async Applications in ASP.NET</h3>\n\n<p>Async has become much easier over time to code and maintain with the async/await keywords and adding the capabilities in WebForms applications can improve overall page response times if done correctly.</p>\n\n<p>Here are the additional links and the slides from the session.</p>\n\n<ul>\n<li><a href=\"http://www.slideshare.net/spboyer/async-aspnet-applications\">Presentation Slides</a></li>\n<li><a href=\"http://hanselminutes.com/327/everything-net-programmers-know-about-asynchronous-programming-is-wrong\">Hanselminutes Podcast – Everything .NET programmers know about Asynchronous Programming is wrong</a>.</li>\n<li><a href=\"http://www.asp.net/web-forms/tutorials/aspnet-45/using-asynchronous-methods-in-aspnet-45\">Using Asynchronous Methods in ASP.NET 4.5</a></li>\n</ul>\n\n<h3 id=\"bringyourownauthenticationyomvc\">Bring Your Own Authentication yo MVC</h3>\n\n<p>As I mentioned in my session on Social loin integration, adding the capability is very easy through since the addition of OWIN/Katana middleware authentication host plumbing that is out of the box in ASP.NET. &nbsp;A couple of highlights from the talk:</p>\n\n<ul>\n<li><p>Add social logins where appropriate</p></li>\n<li><p>Enterprise or internal company applications might not apply*   Leverage test user in Facebook's Developer portalHere are the slides and additional links.Presentation SlidesGet More from Facebook User / Using Facebook C# SDKOWIN and Katana ProjectAgain thanks for coming out and hope to see you in the fall at DEVIntersection and Anglebrackets!</p></li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1397829900001,"created_by":1,"updated_at":1397829953627,"updated_by":1,"published_at":1397829900001,"published_by":1},{"id":4,"uuid":"156698db-8f1c-44f1-8f88-e5759649e4d0","title":"DEVIntersection: 3 Days of ASP.NET, Azure, SQL & More!","slug":"devintersection_3_days_of_asp_net_azure_sql_more_","markdown":"Come out to [DEVIntersection](http://www.devintersection.com/) April 13-16 at the JW Marriott in Orlando to get a chance to interact with a number of community experts such as Scott Guthrie, Scott Hanselman, Douglas Crockford and many more.I'll be giving two talks in the ASP.NET track:AS12: Building Asynchronous ASP.NET ApplicationsLearn how to take advantage of the new async/await operations to keep your applications responsive and avoid the performance bottlenecks. In comparison to how async code has been written with callbacks, the new way allows for cleaner more readable debug-able code. In this presentation topics covered WebForms, MVC, EF6 some tooling.AS11: Bring Your Own Authentication (BYOA) to MVCMost of us are familiar with the the phrase \"Bring Your Own Device\", where business users have over time influenced internal IT to move to the users platform instead of vice versa.  Leveraging the social sign on credentials such as Facebook, Microsoft, Twitter etc will not only eliminate the code you need to create, re-create or manage but also ease the sign on process for your potential users. ASP.NET provides the underlying OAuth framework to easily make the connection and manage the integration, this session will walk through leveraging social sign credentials in your applications in a few simple steps. Also don't miss out on the co-located <anglebrackets> at no extra cost where you'll get an opportunity to hear web experts like John Papa, Dan Wahlin, Elijah Manor Rob Eisenberg and more speak about AngularJS, Durandal and other current and emerging web tech you won't want to miss out on.</anglebrackets>Use discount code \"BOYER\" for an additional $50 off registration.","html":"<p>Come out to <a href=\"http://www.devintersection.com/\">DEVIntersection</a> April 13-16 at the JW Marriott in Orlando to get a chance to interact with a number of community experts such as Scott Guthrie, Scott Hanselman, Douglas Crockford and many more.I'll be giving two talks in the ASP.NET track:AS12: Building Asynchronous ASP.NET ApplicationsLearn how to take advantage of the new async/await operations to keep your applications responsive and avoid the performance bottlenecks. In comparison to how async code has been written with callbacks, the new way allows for cleaner more readable debug-able code. In this presentation topics covered WebForms, MVC, EF6 some tooling.AS11: Bring Your Own Authentication (BYOA) to MVCMost of us are familiar with the the phrase \"Bring Your Own Device\", where business users have over time influenced internal IT to move to the users platform instead of vice versa.  Leveraging the social sign on credentials such as Facebook, Microsoft, Twitter etc will not only eliminate the code you need to create, re-create or manage but also ease the sign on process for your potential users. ASP.NET provides the underlying OAuth framework to easily make the connection and manage the integration, this session will walk through leveraging social sign credentials in your applications in a few simple steps. Also don't miss out on the co-located <anglebrackets> at no extra cost where you'll get an opportunity to hear web experts like John Papa, Dan Wahlin, Elijah Manor Rob Eisenberg and more speak about AngularJS, Durandal and other current and emerging web tech you won't want to miss out on.</anglebrackets>Use discount code \"BOYER\" for an additional $50 off registration.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1395068160001,"created_by":1,"updated_at":1395068180016,"updated_by":1,"published_at":1395068160001,"published_by":1},{"id":5,"uuid":"f2c40f4d-e481-4147-9ad2-515056cd106d","title":"Town Hall Style, Windows 8 Development Shoot or Aim?","slug":"town_hall_style_windows_8_development_shoot_or_aim_","markdown":"Had the first meeting of the year last night for the Orlando Windows Phone / Windows 8 Group and instead of going down the planned presenter lead meeting format it turned more into a \"Town Hall\" style with some good topics I thought I'd share.\n\n### Where does everyone go to learn how to build or develop for Windows 8.1?\nAs anyone who can use the web, you w ill find a number of popular blogs that have articles written on how to get started using this or that, including my own, but how relevant are they considering how fast Windows 8 development is moving and changing for that matter. &nbsp;One attendee mentioned the LayoutAwarePage and how it was a thing and now its \"just there\". &nbsp;Or how there were only 3 views to deal with and now there are many. \n\nBrian, from the [Orlando .NET User Group](http://www.onetug.org/), likes [Microsoft's Virtual Academy](http://www.microsoftvirtualacademy.com/#?fbid=mu4xA_75SLL) and also stated that when looking at blogs the first piece of information is the date the article was posted to know whether or not to keep going.\n\n[Pluralsight.com](http://pluralsight.com/) is also another very well known resource for getting up to speed on almost any technology, and their catalog grows daily.\n\n### Monetization strategies for apps?\nOf course, a very common topic. &nbsp;How the heck do you make money on your apps? &nbsp;Charge for them, ads, in app purchases, both, so on and so forth. &nbsp;There has been a lot of conversation around this topic and sure enough the recent Flappy Bird app incident has everyone in a swirl to find the next big one.\n\nAlex Perez, from [Neuralnet](http://www.windowsphone.com/en-US/store/publishers?publisherId=Neuralnet%252c%2BLLC&amp;appId=15055946-fea6-4b03-ae97-20ac4ee3798e), gave some insight into their experience on in app purchases how they attacked the issue. &nbsp;Free with in app purchases was the most successful way, BUT you have to hook your users and make them want to keep coming back to the app is the key. \n\nI don't this is a big secret, the secret is finding the hook -- right?\n\n### Should I build apps for Windows 8.1 now or wait to see what happens after BUILD 2014?\nWhen Windows 8 hit the development community, a lot of the .NET community hit it learning the tools the new stuff throwing apps, blogging it etc. Some even went at the HTML/WinJS framework option reusing the libraries that were available building RSS readers, games, etc. \n\nThen 8.1 hit and the game was changed. Tools got better, controls were added, more views, the OS was smaller, better, faster. Question on the floor - shoot or just aim? &nbsp;\n\n### Strategies for sharing code?\nI love the MVVM pattern for mobile development - Windows Phone, Windows 8.* and anything Xamarin supports. &nbsp;With Portable Class Libraries and the lifted license restrictions and full support through Xamarin there is no reason not use it. &nbsp;BUT, do not get caught in hours of trying to force something into the pattern simply to put it into the pattern. &nbsp;Get the product out there, and rev. Refactor and release often.\n\n### Apps or Web?\nIt just depends right? What is the target audience, the device support, does it need connectivity, what is the skill set of the team you have and so on. &nbsp;There is no right answer. The answer is -&gt; know what questions to ask.\n\nAll great discussions, really enjoyed the format. &nbsp;What are your thoughts on any or all of these issues, and have you tried this format at your local user group? Would you?","html":"<p>Had the first meeting of the year last night for the Orlando Windows Phone / Windows 8 Group and instead of going down the planned presenter lead meeting format it turned more into a \"Town Hall\" style with some good topics I thought I'd share.</p>\n\n<h3 id=\"wheredoeseveryonegotolearnhowtobuildordevelopforwindows81\">Where does everyone go to learn how to build or develop for Windows 8.1?</h3>\n\n<p>As anyone who can use the web, you w ill find a number of popular blogs that have articles written on how to get started using this or that, including my own, but how relevant are they considering how fast Windows 8 development is moving and changing for that matter. &nbsp;One attendee mentioned the LayoutAwarePage and how it was a thing and now its \"just there\". &nbsp;Or how there were only 3 views to deal with and now there are many. </p>\n\n<p>Brian, from the <a href=\"http://www.onetug.org/\">Orlando .NET User Group</a>, likes <a href=\"http://www.microsoftvirtualacademy.com/#?fbid=mu4xA_75SLL\">Microsoft's Virtual Academy</a> and also stated that when looking at blogs the first piece of information is the date the article was posted to know whether or not to keep going.</p>\n\n<p><a href=\"http://pluralsight.com/\">Pluralsight.com</a> is also another very well known resource for getting up to speed on almost any technology, and their catalog grows daily.</p>\n\n<h3 id=\"monetizationstrategiesforapps\">Monetization strategies for apps?</h3>\n\n<p>Of course, a very common topic. &nbsp;How the heck do you make money on your apps? &nbsp;Charge for them, ads, in app purchases, both, so on and so forth. &nbsp;There has been a lot of conversation around this topic and sure enough the recent Flappy Bird app incident has everyone in a swirl to find the next big one.</p>\n\n<p>Alex Perez, from <a href=\"http://www.windowsphone.com/en-US/store/publishers?publisherId=Neuralnet%252c%2BLLC&amp;appId=15055946-fea6-4b03-ae97-20ac4ee3798e\">Neuralnet</a>, gave some insight into their experience on in app purchases how they attacked the issue. &nbsp;Free with in app purchases was the most successful way, BUT you have to hook your users and make them want to keep coming back to the app is the key. </p>\n\n<p>I don't this is a big secret, the secret is finding the hook -- right?</p>\n\n<h3 id=\"shouldibuildappsforwindows81noworwaittoseewhathappensafterbuild2014\">Should I build apps for Windows 8.1 now or wait to see what happens after BUILD 2014?</h3>\n\n<p>When Windows 8 hit the development community, a lot of the .NET community hit it learning the tools the new stuff throwing apps, blogging it etc. Some even went at the HTML/WinJS framework option reusing the libraries that were available building RSS readers, games, etc. </p>\n\n<p>Then 8.1 hit and the game was changed. Tools got better, controls were added, more views, the OS was smaller, better, faster. Question on the floor - shoot or just aim? &nbsp;</p>\n\n<h3 id=\"strategiesforsharingcode\">Strategies for sharing code?</h3>\n\n<p>I love the MVVM pattern for mobile development - Windows Phone, Windows 8.* and anything Xamarin supports. &nbsp;With Portable Class Libraries and the lifted license restrictions and full support through Xamarin there is no reason not use it. &nbsp;BUT, do not get caught in hours of trying to force something into the pattern simply to put it into the pattern. &nbsp;Get the product out there, and rev. Refactor and release often.</p>\n\n<h3 id=\"appsorweb\">Apps or Web?</h3>\n\n<p>It just depends right? What is the target audience, the device support, does it need connectivity, what is the skill set of the team you have and so on. &nbsp;There is no right answer. The answer is -&gt; know what questions to ask.</p>\n\n<p>All great discussions, really enjoyed the format. &nbsp;What are your thoughts on any or all of these issues, and have you tried this format at your local user group? Would you?</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1392910560000,"created_by":1,"updated_at":1392910582751,"updated_by":1,"published_at":1392910560000,"published_by":1},{"id":6,"uuid":"0c4359f0-7147-4df5-ba96-a548f5da8061","title":"Custom URIs added to I'm Here App","slug":"custom_uris_added_to_i_m_here_app","markdown":"I took a few moments to add custom URI launchers for my [I'm Here](http://www.windowsphone.com/s?appid=f7a8d5e3-86c8-4661-af6f-b8f566837345) app on Windows Phone so it could be used in [Rob Irving's Car Dash](http://www.windowsphone.com/en-us/store/app/car-dash/5c8c34e1-34c4-4e3e-87b5-bbb7d4a8c652) app. &nbsp;It was a really quick add to the app, however the one are I found to be a pain was testing it. &nbsp;I actually had to write another phone app to test it. Not that it was a chore, just didn't consider that when I started, I made an assumption I could've just typed i the URI in Internet Explorer or mocked an SMS message like you can in iOS.\n\nIf you have a Windows Phone App that offers functionality that other apps can use there is no reason not to offer custom launchers. &nbsp;It takes about an hour total development time, and the benefit can more than just adding the functionality. \n\nIn my case, one I learned how to do it. Two, I get free marketing from another very successful app. Make sure you document your URI on the [Nokia page](http://developer.nokia.com/Community/Wiki/URI_Association_Schemes_List) here to let every other developer know for extra exposure. And finally, made a nice connection in the developer community. &nbsp;Who knows, maybe the next big thing will happen when Rob and I team up...\n\nIf you want to use I'm Here in your app here is the simple launcher URI code to do so.\n\n> // launch the app\n> await Windows.System.Launcher.LaunchUriAsync(new Uri(\"imhere:\"));\n> // launch the app and share location via SMS\n> \n> await Windows.System.Launcher.LaunchUriAsync(new Uri(\"imhere://share/text\"));\n> // launch the app and share location via Email\n> \n> await Windows.System.Launcher.LaunchUriAsync(new Uri(\"imhere://share/email\"));\n> // launch the app and share location via Social Apps\n> \n> await Windows.System.Launcher.LaunchUriAsync(new Uri(\"imhere://share/social\"));\n> \n> // launch the app and share location via WhatsApp application\n> await Windows.System.Launcher.LaunchUriAsync(new Uri(\"imhere://share/whatsapp\"));\n\nBe sure to checkout [my apps](http://blog.tattoocoder.com/p/my-apps.html)&nbsp;and the other links below to take advantage of the custom URIs in you own apps.\n\n[Rob Irving on Twitter](http://www.twitter.com/robwirving)\n[Nokia URI Association Schemes List](http://developer.nokia.com/Community/Wiki/URI_Association_Schemes_List)\n[URI associations for Windows Phone - How To](http://developer.nokia.com/Community/Wiki/URI_associations_for_Windows_Phone)\n[Reserved file and URI associations for Windows Phone 8](http://msdn.microsoft.com/en-us/library/windowsphone/develop/jj207065(v%3Dvs.105).aspx#BKMK_Reservedprotocolnames)","html":"<p>I took a few moments to add custom URI launchers for my <a href=\"http://www.windowsphone.com/s?appid=f7a8d5e3-86c8-4661-af6f-b8f566837345\">I'm Here</a> app on Windows Phone so it could be used in <a href=\"http://www.windowsphone.com/en-us/store/app/car-dash/5c8c34e1-34c4-4e3e-87b5-bbb7d4a8c652\">Rob Irving's Car Dash</a> app. &nbsp;It was a really quick add to the app, however the one are I found to be a pain was testing it. &nbsp;I actually had to write another phone app to test it. Not that it was a chore, just didn't consider that when I started, I made an assumption I could've just typed i the URI in Internet Explorer or mocked an SMS message like you can in iOS.</p>\n\n<p>If you have a Windows Phone App that offers functionality that other apps can use there is no reason not to offer custom launchers. &nbsp;It takes about an hour total development time, and the benefit can more than just adding the functionality. </p>\n\n<p>In my case, one I learned how to do it. Two, I get free marketing from another very successful app. Make sure you document your URI on the <a href=\"http://developer.nokia.com/Community/Wiki/URI_Association_Schemes_List\">Nokia page</a> here to let every other developer know for extra exposure. And finally, made a nice connection in the developer community. &nbsp;Who knows, maybe the next big thing will happen when Rob and I team up...</p>\n\n<p>If you want to use I'm Here in your app here is the simple launcher URI code to do so.</p>\n\n<blockquote>\n  <p>// launch the app\n  await Windows.System.Launcher.LaunchUriAsync(new Uri(\"imhere:\"));\n  // launch the app and share location via SMS</p>\n  \n  <p>await Windows.System.Launcher.LaunchUriAsync(new Uri(\"imhere://share/text\"));\n  // launch the app and share location via Email</p>\n  \n  <p>await Windows.System.Launcher.LaunchUriAsync(new Uri(\"imhere://share/email\"));\n  // launch the app and share location via Social Apps</p>\n  \n  <p>await Windows.System.Launcher.LaunchUriAsync(new Uri(\"imhere://share/social\"));</p>\n  \n  <p>// launch the app and share location via WhatsApp application\n  await Windows.System.Launcher.LaunchUriAsync(new Uri(\"imhere://share/whatsapp\"));</p>\n</blockquote>\n\n<p>Be sure to checkout <a href=\"http://blog.tattoocoder.com/p/my-apps.html\">my apps</a>&nbsp;and the other links below to take advantage of the custom URIs in you own apps.</p>\n\n<p><a href=\"http://www.twitter.com/robwirving\">Rob Irving on Twitter</a>\n<a href=\"http://developer.nokia.com/Community/Wiki/URI_Association_Schemes_List\">Nokia URI Association Schemes List</a>\n<a href=\"http://developer.nokia.com/Community/Wiki/URI_associations_for_Windows_Phone\">URI associations for Windows Phone - How To</a>\n<a href=\"http://msdn.microsoft.com/en-us/library/windowsphone/develop/jj207065(v%3Dvs.105).aspx#BKMK_Reservedprotocolnames\">Reserved file and URI associations for Windows Phone 8</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1389716520001,"created_by":1,"updated_at":1389716525822,"updated_by":1,"published_at":1389716520001,"published_by":1},{"id":7,"uuid":"a60ef5f3-a06b-4767-a2ae-ae44d69fdd87","title":"Microsoft MVP - ASP.NET","slug":"microsoft_mvp_asp_net","markdown":"This year started off with a nice surprise, an email with the subject \"**Congratulations 2014 Microsoft MVP!**\"\n\nI am humbled and excited, as this is the first time for me, and as always to be a part of such a great community. I enjoy the time I spend at community events, speaking to other developers and hearing their challenges, ideas and what great projects they are working on.\n\nASP.NET is the category of my award, and although most know me for some the Windows Phone work I have done; Web API, MVC, and JavaScript/TypeScript is where I have spent a majority of my time. Mobile is as much about the back end services as it is about the front end.\n\n2014 is going to be another great year. &nbsp;I am already putting together my speaking schedule, working on new material and projects and can't wait to see the new stuff from the other new and renewed MVPs.\n\nThanks to all of my supporters in the community! Especially those in Florida who I get to see on a regular basis.","html":"<p>This year started off with a nice surprise, an email with the subject \"<strong>Congratulations 2014 Microsoft MVP!</strong>\"</p>\n\n<p>I am humbled and excited, as this is the first time for me, and as always to be a part of such a great community. I enjoy the time I spend at community events, speaking to other developers and hearing their challenges, ideas and what great projects they are working on.</p>\n\n<p>ASP.NET is the category of my award, and although most know me for some the Windows Phone work I have done; Web API, MVC, and JavaScript/TypeScript is where I have spent a majority of my time. Mobile is as much about the back end services as it is about the front end.</p>\n\n<p>2014 is going to be another great year. &nbsp;I am already putting together my speaking schedule, working on new material and projects and can't wait to see the new stuff from the other new and renewed MVPs.</p>\n\n<p>Thanks to all of my supporters in the community! Especially those in Florida who I get to see on a regular basis.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1388694540002,"created_by":1,"updated_at":1388694589102,"updated_by":1,"published_at":1388694540002,"published_by":1},{"id":8,"uuid":"a3e01826-1f39-4c35-b8c2-bf518afbe411","title":"Being a successful mobile developer - Windows Phone, Marketing & Xamarin","slug":"being_a_successful_mobile_developer_windows_phone_marketing_xamarin","markdown":"### Why Windows Phone?\nThis is not a new question, but a question or topic that I get involved a lot. &nbsp;Why do you have a Windows Phone? Why do you build apps for that platform? You should be learning Java and Objective C and putting your apps on iOS and Android; that's where the users are.\n\nThat is the message from the media, family, tech pundits and co-workers. And the numbers say that as well; the latest report shows that Android holds a ridiculous global market share of 80%, Apple with 12% and Windows Phone at 4% respectively. &nbsp;So why should I build an app for Windows Phone first?\n\nIts about visibility.\n\n### Visibility\nApple has more than 1 million apps on the iOS platform and Android just over 800,000\\. It is virtually impossible without spending an enormous amount of time, money and or energy getting an app exposure to the user base. &nbsp;However, through programs like Nokia's [DVLUP](http://dvlup.com/)&nbsp;you can manage to get very visibility in the marketplace, increased reviews and downloads and through the combination of all of these. Revenue will begin to climb. Now, there is some learning to be done by the developer when it comes to monetizing your app; I won't go into the various strategies as there have been many workshops/articles/blogs published so definitely look into those.\n\n### Building a Brand / Marketing\nBuild it and they will come is not a marketing campaign strategy! I'm pretty involved in the community and talk with a lot of developers, read quite a few email and message board threads about how they have a new app for this or that...please review, download etc. &nbsp;But that is the last place I see it ever mentioned.\n\nHere are a few suggestions:\n\n*   Build a Facebook Fan Page - it's free\n*   [Azure Websites](http://www.windowsazure.com/) - every subscriber gets 10 free site, build one for your app\n*   Blog about the technology you used in your app, why you chose to do it.&nbsp;\n*   Contact Media outlets about your app - [wpcentral.com](http://wpcentral.com/), [wmpoweruser.com](http://wmpoweruser.com/)\n*   Use social media to your advantage - twitter, Facebook, LinkedIn, Google+, Instagram (yes) &amp; learn what a hashtag (#) is and use those to your advantage. If you don't know ask a teenager.\n\n### Design\nNow none of the above will matter if your app is a battleship grey page with black comic sans font. Spend some time on design.  Now I know, not all developers are good designers. Guess what? Not all designers are good developers.  Find a friend who knows Photoshop, team up! There is this really cool online collaboration tool - Team Foundation Service that's free for up to 5 users, collaborate on a project and make it happen.\n\n### Build with Other Platforms in Mind - Xamarin\nNow that you have a great idea, either put together a great design or found a friend &amp; have a marketing strategy. &nbsp;Build your app with the correct tools and architecture so when you have Android and iOS users wanting it, you can respond in a reasonable amount of time.\n\n[Xamarin ](http://xamarin.com/)and Microsoft have teamed up to bring a closer integration in Visual Studio 2013 to allow you to create **native **iOS and Android applications (not HTML5 &amp; JavaScript) using C# and Portable Class Libraries. Thus maximizing your code reuse. \n\nMicrosoft also just announce full [Azure Mobile Services support for Xamarin](http://weblogs.asp.net/scottgu/archive/2013/11/21/windows-azure-general-availability-release-of-biztalk-services-traffic-manager-azure-ad-app-access-xamarin-support-for-mobile-services.aspx).\n\nI will be blogging more examples, in the meantime visit [www.xamarin.com](http://www.xamarin.com/) and follow&nbsp;[@xamarinhq](http://www.twitter.com/xamarinhq) &amp; [@jamesmontemagno](http://twitter.com/jamesmontemagno)&nbsp;(Xamarin Developer Evangelist) on twitter.\n\nPlease feel free to contact me via twitter&nbsp;[@spboyer](http://www.twitter.com/spboyer) concerning xamarin, portable class libraries, windows phone development, windows 8 development or anything.","html":"<h3 id=\"whywindowsphone\">Why Windows Phone?</h3>\n\n<p>This is not a new question, but a question or topic that I get involved a lot. &nbsp;Why do you have a Windows Phone? Why do you build apps for that platform? You should be learning Java and Objective C and putting your apps on iOS and Android; that's where the users are.</p>\n\n<p>That is the message from the media, family, tech pundits and co-workers. And the numbers say that as well; the latest report shows that Android holds a ridiculous global market share of 80%, Apple with 12% and Windows Phone at 4% respectively. &nbsp;So why should I build an app for Windows Phone first?</p>\n\n<p>Its about visibility.</p>\n\n<h3 id=\"visibility\">Visibility</h3>\n\n<p>Apple has more than 1 million apps on the iOS platform and Android just over 800,000. It is virtually impossible without spending an enormous amount of time, money and or energy getting an app exposure to the user base. &nbsp;However, through programs like Nokia's <a href=\"http://dvlup.com/\">DVLUP</a>&nbsp;you can manage to get very visibility in the marketplace, increased reviews and downloads and through the combination of all of these. Revenue will begin to climb. Now, there is some learning to be done by the developer when it comes to monetizing your app; I won't go into the various strategies as there have been many workshops/articles/blogs published so definitely look into those.</p>\n\n<h3 id=\"buildingabrandmarketing\">Building a Brand / Marketing</h3>\n\n<p>Build it and they will come is not a marketing campaign strategy! I'm pretty involved in the community and talk with a lot of developers, read quite a few email and message board threads about how they have a new app for this or that...please review, download etc. &nbsp;But that is the last place I see it ever mentioned.</p>\n\n<p>Here are a few suggestions:</p>\n\n<ul>\n<li>Build a Facebook Fan Page - it's free</li>\n<li><a href=\"http://www.windowsazure.com/\">Azure Websites</a> - every subscriber gets 10 free site, build one for your app</li>\n<li>Blog about the technology you used in your app, why you chose to do it.&nbsp;</li>\n<li>Contact Media outlets about your app - <a href=\"http://wpcentral.com/\">wpcentral.com</a>, <a href=\"http://wmpoweruser.com/\">wmpoweruser.com</a></li>\n<li>Use social media to your advantage - twitter, Facebook, LinkedIn, Google+, Instagram (yes) &amp; learn what a hashtag (#) is and use those to your advantage. If you don't know ask a teenager.</li>\n</ul>\n\n<h3 id=\"design\">Design</h3>\n\n<p>Now none of the above will matter if your app is a battleship grey page with black comic sans font. Spend some time on design.  Now I know, not all developers are good designers. Guess what? Not all designers are good developers.  Find a friend who knows Photoshop, team up! There is this really cool online collaboration tool - Team Foundation Service that's free for up to 5 users, collaborate on a project and make it happen.</p>\n\n<h3 id=\"buildwithotherplatformsinmindxamarin\">Build with Other Platforms in Mind - Xamarin</h3>\n\n<p>Now that you have a great idea, either put together a great design or found a friend &amp; have a marketing strategy. &nbsp;Build your app with the correct tools and architecture so when you have Android and iOS users wanting it, you can respond in a reasonable amount of time.</p>\n\n<p><a href=\"http://xamarin.com/\">Xamarin </a>and Microsoft have teamed up to bring a closer integration in Visual Studio 2013 to allow you to create <em>*native *</em>iOS and Android applications (not HTML5 &amp; JavaScript) using C# and Portable Class Libraries. Thus maximizing your code reuse. </p>\n\n<p>Microsoft also just announce full <a href=\"http://weblogs.asp.net/scottgu/archive/2013/11/21/windows-azure-general-availability-release-of-biztalk-services-traffic-manager-azure-ad-app-access-xamarin-support-for-mobile-services.aspx\">Azure Mobile Services support for Xamarin</a>.</p>\n\n<p>I will be blogging more examples, in the meantime visit <a href=\"http://www.xamarin.com/\">www.xamarin.com</a> and follow&nbsp;<a href=\"http://www.twitter.com/xamarinhq\">@xamarinhq</a> &amp; <a href=\"http://twitter.com/jamesmontemagno\">@jamesmontemagno</a>&nbsp;(Xamarin Developer Evangelist) on twitter.</p>\n\n<p>Please feel free to contact me via twitter&nbsp;<a href=\"http://www.twitter.com/spboyer\">@spboyer</a> concerning xamarin, portable class libraries, windows phone development, windows 8 development or anything.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1385139840000,"created_by":1,"updated_at":1385139966993,"updated_by":1,"published_at":1385139840000,"published_by":1},{"id":9,"uuid":"ee461e27-58dc-4d11-8eb5-5f94db90de1c","title":"Presenting Azure Mobile Services @ DVLUP Day Tampa 11/16/2013","slug":"presenting_azure_mobile_services_dvlup_day_tampa_11_16_2013","markdown":"Nokia, through its DVLUP program, is putting on DVLUP day in various cities from Nov. 16 - Dec 6\\. &nbsp;I'll be in Tampa on the 16th of November presenting Azure Mobile Services.\n\nI'll give an overview of:\n\n*   Getting Started\n*   Push Notifications\n*   Visual Studio 2013 Tools for Azure\n*   General Q &amp; A\n\nI will also be around all day if you have any questions about Portable Class Libraries or Advanced features of Azure Mobile Services such as complex data types, authentication, etc.\n\n### Event Summary\nSpend a day with two of our top Nokia Developer Ambassadors, Bill Reiss ([@billreiss](http://twitter.com/billreiss)) and Atley Hunter ([@atleyhunter](http://twitter.com/atleyhunter)). Together, Bill and Atley will guide you through the process of publishing your apps to the Windows Phone Store - either from scratch, or porting from iOS or Android.\n\nWhether you’re a first-time developer, or a seasoned pro who wants to know more about Windows Phone, this event is for you.\n\nIf you are in the Tampa Area, there is still space so [sign up](https://www.eventbrite.com/e/nokia-dvlup-day-november-16-2013-tampa-fl-tickets-8990182879)! There are other dates and locations available and they can be found on the DVLUP site ([http://www.dvlup.com/Events/138](http://www.dvlup.com/Events/138)).\n\nYou will need to have your DVLUP account ID. If you haven’t signed up already, sign up today at &nbsp;[www.dvlup.com](http://www.dvlup.com/)\n\n&nbsp;To win a device you need to complete one of these DVLUP challenges:\n\n[http://www.dvlup.com/Challenge/32](http://www.dvlup.com/Challenge/32)\n\n[http://www.dvlup.com/Challenge/125](http://www.dvlup.com/Challenge/125)\n\nYour app must be published within 14 days of your event to win.\n\nIf you are attending, be sure to tweet and use the hashtag #DVLUPday #tampa and follow&nbsp;[@dvlup](http://twitter.com/dvlup)","html":"<p>Nokia, through its DVLUP program, is putting on DVLUP day in various cities from Nov. 16 - Dec 6. &nbsp;I'll be in Tampa on the 16th of November presenting Azure Mobile Services.</p>\n\n<p>I'll give an overview of:</p>\n\n<ul>\n<li>Getting Started</li>\n<li>Push Notifications</li>\n<li>Visual Studio 2013 Tools for Azure</li>\n<li>General Q &amp; A</li>\n</ul>\n\n<p>I will also be around all day if you have any questions about Portable Class Libraries or Advanced features of Azure Mobile Services such as complex data types, authentication, etc.</p>\n\n<h3 id=\"eventsummary\">Event Summary</h3>\n\n<p>Spend a day with two of our top Nokia Developer Ambassadors, Bill Reiss (<a href=\"http://twitter.com/billreiss\">@billreiss</a>) and Atley Hunter (<a href=\"http://twitter.com/atleyhunter\">@atleyhunter</a>). Together, Bill and Atley will guide you through the process of publishing your apps to the Windows Phone Store - either from scratch, or porting from iOS or Android.</p>\n\n<p>Whether you’re a first-time developer, or a seasoned pro who wants to know more about Windows Phone, this event is for you.</p>\n\n<p>If you are in the Tampa Area, there is still space so <a href=\"https://www.eventbrite.com/e/nokia-dvlup-day-november-16-2013-tampa-fl-tickets-8990182879\">sign up</a>! There are other dates and locations available and they can be found on the DVLUP site (<a href=\"http://www.dvlup.com/Events/138\">http://www.dvlup.com/Events/138</a>).</p>\n\n<p>You will need to have your DVLUP account ID. If you haven’t signed up already, sign up today at &nbsp;<a href=\"http://www.dvlup.com/\">www.dvlup.com</a></p>\n\n<p>&nbsp;To win a device you need to complete one of these DVLUP challenges:</p>\n\n<p><a href=\"http://www.dvlup.com/Challenge/32\">http://www.dvlup.com/Challenge/32</a></p>\n\n<p><a href=\"http://www.dvlup.com/Challenge/125\">http://www.dvlup.com/Challenge/125</a></p>\n\n<p>Your app must be published within 14 days of your event to win.</p>\n\n<p>If you are attending, be sure to tweet and use the hashtag #DVLUPday #tampa and follow&nbsp;<a href=\"http://twitter.com/dvlup\">@dvlup</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1384530540001,"created_by":1,"updated_at":1384530730603,"updated_by":1,"published_at":1384530540001,"published_by":1},{"id":10,"uuid":"7f67aec7-856d-4d2a-aeee-f48d9e709ab2","title":"Azure Mobile Services & Portable Class Libraries - Part 2 Authentication Cont'd","slug":"azure_mobile_services_portable_class_libraries_part_2_authentication_cont_d","markdown":"In [Part 1](http://blog.tattoocoder.com/2013/08/azure-mobile-services-portable-class.html) I covered a simple implementation of the Authentication feature and portable class libraries from the Azure Mobile Services SDK.&nbsp; However, as mentioned in the \"Good &amp; Bad So Far\" section; there is not a whole lot of code reuse other than the Azure endpoint and secret key.&nbsp; Let's refactor a bit by adding some interfaces, conditional compile statements and the MVVM Light Event Bus to help the same solution operate cleaner.\n\nThe \"after\" code for part one is [available here.](http://sdrv.ms/14upB9R)\n\n### Building Our Core\nPortableAzure.Core is our Portable Class Library that is being shared with the Windows 8 and &nbsp;Windows Phone project in the attempt to reuse as much code as possible. &nbsp;However, as mentioned in&nbsp;[Part 1](http://blog.tattoocoder.com/2013/08/azure-mobile-services-portable-class.html)&nbsp;the authentication portion of the Azure Mobile Service SDK is a platform specific implementation due to the UX pieces of that component and how it is presented varies.\n\n#### Platform Adapter (PlatformAdapter.cs)\nIn the Services folder, add a new class called PlatformAdapter.cs. &nbsp;This is an abstract class that will be used as the base class for the platform specific implementation.\n\n<pre class=\"brush: csharp\">&nbsp; &nbsp; public abstract class PlatformAdapter\n&nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; public static PlatformAdapter Current { get; set; }\n&nbsp; &nbsp; &nbsp; &nbsp; public abstract IIdentity Identity { get; }\n&nbsp; &nbsp; }</pre>\n\n#### Identity (IIdentity.cs)\nAdd a new Identity interface, IIdentity.cs to be used as the implementation to execute the Authenticate method as well as store the MobileServiceUser upon logging in.\n\n<pre class=\"brush: csharp\">&nbsp; &nbsp; public interface IIdentity\n&nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; void Authenticate();\n&nbsp; &nbsp; &nbsp; &nbsp; MobileServiceUser User { get; set; }\n&nbsp; &nbsp; }</pre>\n\n#### \n\n#### \n&nbsp;Messages\nAdd a **Messages** folder to the root and a class called LoginMessage.cs to newly created folder.\n\nUsing the Event Bus from MVVM Light, a LoginMessage will be sent from the platform specific MainPage.xaml then subsequently handled in the MainViewModel.&nbsp; The LoginMessage is just an empty class at this point.\n\n<pre class=\"brush: csharp\">&nbsp; &nbsp; namespace PortableAzure.Core.Messages {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; public class LoginMessage { } \n&nbsp; &nbsp; }\n</pre>\n\n### Adding Adapters to the Platforms\nOn each plaftform we need to now inherit from the PlatformAdapter.cs class in the Services namespace from the Core library as well as implement the IIdentity interface thus replacing the code shown in part one with this code.\n\n#### Windows Phone\nAdd an \"Adapters\" folder to the root of the project and then a Platform.cs class which inherits from PlatformAdapter.\n\n<pre class=\"brush: csharp\">namespace PortableAzure.Phone8.Adapters\n{\n&nbsp; &nbsp; public class Platform : PlatformAdapter\n&nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; public IIdentity _identity = new Identity();\n\n&nbsp; &nbsp; &nbsp; &nbsp; public override IIdentity Identity\n&nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; get\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return _identity;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; }\n}\n\n</pre>\nNext, add the Identity class which is where all of the heavy lifting is done for the login logic.\n\n<pre class=\"brush: csharp\">namespace PortableAzure.Phone8.Adapters\n{\n&nbsp; &nbsp; public class Identity : IIdentity\n&nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; public async void Authenticate()\n&nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var app = ((App)Application.Current);\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; string message = string.Empty;\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; while (this.User == null)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; User = await app.Azure.MobileService.LoginAsync(MobileServiceAuthenticationProvider.Twitter);\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; message = string.Format(\"You are now logged in - {0}\", User.UserId);\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; catch (InvalidOperationException)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; message = \"You must log in. Login Required\";\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MessageBox.Show(message);\n&nbsp; &nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp; &nbsp; &nbsp; public MobileServiceUser User { get; set; }\n&nbsp; &nbsp; }\n}&nbsp; &nbsp;\n&nbsp; &nbsp;\n&nbsp; &nbsp;\n&nbsp; &nbsp;\n</pre>Now that the Windows Phone implementation is complete we need to tell the Service library what is the current class is for the PlaformAdapater. &nbsp;This is set in the App.xaml.cs class in the App contstructor:\n\n<pre class=\"brush: csharp\">public App()\n{\n &nbsp; Azure = new AzureMobileServices();\n\n &nbsp; PortableAzure.Core.Services.PlatformAdapter.Current = new Platform();\n\n   ...\n\n</pre>\n\n#### Windows 8\nTo implement the PlatformAdapter class in the Windows 8 application, you could follow the same steps as documented for the Phone project, but that is duplication and not manageable over time.\n\nSo in this case we will use add the existing Identity and Platform classes then add conditional compile statements to the areas of the classes where needed to address the small differences for Windows versus Phone.\n\nAdd Existing item by holding the Alt key and dragging the file, or the whole folder from the Phone project to the Windows 8 Project.&nbsp; Thanks [Matt Hidinger](http://www.twitter.com/matthidinger) for this little trick. You could also just go through the right click -&gt; add existing -&gt; add as link process but now that you know the \"Hold Alt&nbsp;+ Drag\" why??\n\nHere are the completed Platform and Identity classes. &nbsp;You will need to repeat the setting of the current platform in the App.xaml.cs constructor.\n\n**Platform.cs**\n**\n**\n<pre class=\"brush: csharp\">#if NETFX_CORE\n\nnamespace PortableAzure.Win8.Adapters\n\n#endif\n\n#if WINDOWS_PHONE\n\nnamespace PortableAzure.Phone8.Adapters\n\n#endif\n\n{\n&nbsp; &nbsp; public class Platform : PlatformAdapter\n&nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; public IIdentity _identity = new Identity();\n\n&nbsp; &nbsp; &nbsp; &nbsp; public override IIdentity Identity\n&nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; get\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return _identity;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; }\n}</pre>\n**Identity.cs**\n\n<pre class=\"brush: csharp\">#if NETFX_CORE\n\nnamespace PortableAzure.Win8.Adapters\n\n#endif\n\n#if WINDOWS_PHONE\n\nnamespace PortableAzure.Phone8.Adapters\n\n#endif\n\n{\n&nbsp; &nbsp; public class Identity : IIdentity\n&nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; public async void Authenticate()\n&nbsp; &nbsp; &nbsp; &nbsp; {\n\n#if WINDOWS_PHONE\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var app = ((App)Application.Current);\n\n#endif\n\n#if NETFX_CORE\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var app = ((PortableAzure.Win8.App)(Windows.UI.Xaml.Application.Current));\n\n#endif\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; string message = string.Empty;\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; while (this.User == null)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; User = await app.Azure.MobileService.LoginAsync(MobileServiceAuthenticationProvider.Twitter);\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; message = string.Format(\"You are now logged in - {0}\", User.UserId);\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; catch (InvalidOperationException)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; message = \"You must log in. Login Required\";\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n\n#if WINDOWS_PHONE\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MessageBox.Show(message);\n\n#endif\n\n#if NETFX_CORE\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var messageDialog = new Windows.UI.Popups.MessageDialog(message);\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; await messageDialog.ShowAsync();\n\n#endif\n\n&nbsp; &nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp; &nbsp; &nbsp; public MobileServiceUser User { get; set; }\n\n&nbsp; &nbsp; }\n\n}\n\n</pre>Note, be sure to use the full namespace OR add more #if at the top for the imports.\n\n#### Cleanup &amp; Consolidation\nNow that there is a single place where the application executes the call to Authenticate, through the magic of #if and reusing existing files, time to delete some code. &nbsp;Nice right?\n\nIn Part, each of the front end projects had code in the MainPage.xaml.cs file within the \"Loaded\" handler to execute the Azure authentication code. &nbsp;That can be replaced by using the Event Messaging Bus provided by MVVM Light and sending the LoginMessage.\n\nMessenger.Default.Send&lt;LoginMessage&gt;(new LoginMessage());\n\nIn the MainViewModel, add the handler in the constructor and the Login subroutine to call the Authenticate method in the Identity interface.\n\n<pre class=\"brush: csharp\">&nbsp;public MainViewModel()\n&nbsp;{\n&nbsp; &nbsp; &nbsp;Messenger.Default.Register&lt;LoginMessage&gt;(this, m =&gt; { Login(); });\n&nbsp; }\n\n&nbsp;public void Login()\n&nbsp;{\n&nbsp; &nbsp; &nbsp;if (PlatformAdapter.Current.Identity.User == null)\n&nbsp; &nbsp; &nbsp;{\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;try\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;PlatformAdapter.Current.Identity.Authenticate();\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; catch (Exception ex)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Debug.WriteLine(ex.ToString());\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}\n&nbsp; &nbsp; &nbsp;}\n&nbsp;}</pre>\nNow when either platform is run, the Login entry point happens in the MainViewModel upon loading of the main page. &nbsp;Another option, if you wanted to eliminate the messaging, would be to add a login button and have the ICommand call the Login method thus eliminating any code behind in the MainPage.xaml but that depends on your applications needs.\n\n<table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: left; margin-right: 1em; text-align: left;\"><tbody><tr><td style=\"text-align: center;\">![](http://3.bp.blogspot.com/-8lzbSolfP6U/UhjMfDdLVcI/AAAAAAAAAi0/LO8wD7Qof60/s200/PortableAzure1.png)</td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Windows Phone</td></tr></tbody></table><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\">[![](http://2.bp.blogspot.com/-VgxUqIxUVS8/UhjMi94SnBI/AAAAAAAAAi8/tAR6icYJEbs/s320/screenshot_08242013_110509.png)](http://2.bp.blogspot.com/-VgxUqIxUVS8/UhjMi94SnBI/AAAAAAAAAi8/tAR6icYJEbs/s1600/screenshot_08242013_110509.png)</td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Windows 8 / RT</td></tr></tbody></table>[](http://3.bp.blogspot.com/-8lzbSolfP6U/UhjMfDdLVcI/AAAAAAAAAi0/LO8wD7Qof60/s1600/PortableAzure1.png)\n\n### \n\n### Wrapping Up Authentication\nOne item to mention, in this example every time the app is run on either platform the user will have to authenticate. &nbsp;When the MobileServiceUser is successfully authenticated, there are two properties that you can save; MobileServiceAuthenticationToken and UserId respectively. &nbsp;In a subsequent execution of the app, create a new instance of the MobileServiceUser and set the CurrentUser property of the AzureMobileService.MobileService. For Example:\n\n<pre class=\"brush: csharp\">var user = new MobileServiceUser(mySavedUserId);\n\nuser.MobileServiceAuthenticationToken = mySavedMobileServiceAuthenticationToken;\n\nApp.MobileService.CurrentUser = user;</pre>\nPart 1 and Part 2 has shown a simple introduction of how to use portable class libraries with Azure Mobile Services and through the use of a little indirection reuse all the code possible BUT also keep the MVVM implementation and code organization as clean as possible.\n\nFinal Code for Part 2 located [here](http://sdrv.ms/1f9CsO3)","html":"<p>In <a href=\"http://blog.tattoocoder.com/2013/08/azure-mobile-services-portable-class.html\">Part 1</a> I covered a simple implementation of the Authentication feature and portable class libraries from the Azure Mobile Services SDK.&nbsp; However, as mentioned in the \"Good &amp; Bad So Far\" section; there is not a whole lot of code reuse other than the Azure endpoint and secret key.&nbsp; Let's refactor a bit by adding some interfaces, conditional compile statements and the MVVM Light Event Bus to help the same solution operate cleaner.</p>\n\n<p>The \"after\" code for part one is <a href=\"http://sdrv.ms/14upB9R\">available here.</a></p>\n\n<h3 id=\"buildingourcore\">Building Our Core</h3>\n\n<p>PortableAzure.Core is our Portable Class Library that is being shared with the Windows 8 and &nbsp;Windows Phone project in the attempt to reuse as much code as possible. &nbsp;However, as mentioned in&nbsp;<a href=\"http://blog.tattoocoder.com/2013/08/azure-mobile-services-portable-class.html\">Part 1</a>&nbsp;the authentication portion of the Azure Mobile Service SDK is a platform specific implementation due to the UX pieces of that component and how it is presented varies.</p>\n\n<h4 id=\"platformadapterplatformadaptercs\">Platform Adapter (PlatformAdapter.cs)</h4>\n\n<p>In the Services folder, add a new class called PlatformAdapter.cs. &nbsp;This is an abstract class that will be used as the base class for the platform specific implementation.</p>\n\n<pre class=\"brush: csharp\">&nbsp; &nbsp; public abstract class PlatformAdapter  \n&nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; public static PlatformAdapter Current { get; set; }\n&nbsp; &nbsp; &nbsp; &nbsp; public abstract IIdentity Identity { get; }\n&nbsp; &nbsp; }</pre>\n\n#### Identity (IIdentity.cs)\nAdd a new Identity interface, IIdentity.cs to be used as the implementation to execute the Authenticate method as well as store the MobileServiceUser upon logging in.\n\n<pre class=\"brush: csharp\">&nbsp; &nbsp; public interface IIdentity  \n&nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; void Authenticate();\n&nbsp; &nbsp; &nbsp; &nbsp; MobileServiceUser User { get; set; }\n&nbsp; &nbsp; }</pre>\n\n#### \n\n#### \n&nbsp;Messages\nAdd a **Messages** folder to the root and a class called LoginMessage.cs to newly created folder.\n\nUsing the Event Bus from MVVM Light, a LoginMessage will be sent from the platform specific MainPage.xaml then subsequently handled in the MainViewModel.&nbsp; The LoginMessage is just an empty class at this point.\n\n<pre class=\"brush: csharp\">&nbsp; &nbsp; namespace PortableAzure.Core.Messages {  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; public class LoginMessage { } \n&nbsp; &nbsp; }\n</pre>\n\n<h3 id=\"addingadapterstotheplatforms\">Adding Adapters to the Platforms</h3>\n\n<p>On each plaftform we need to now inherit from the PlatformAdapter.cs class in the Services namespace from the Core library as well as implement the IIdentity interface thus replacing the code shown in part one with this code.</p>\n\n<h4 id=\"windowsphone\">Windows Phone</h4>\n\n<p>Add an \"Adapters\" folder to the root of the project and then a Platform.cs class which inherits from PlatformAdapter.</p>\n\n<pre class=\"brush: csharp\">namespace PortableAzure.Phone8.Adapters  \n{\n&nbsp; &nbsp; public class Platform : PlatformAdapter\n&nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; public IIdentity _identity = new Identity();\n\n&nbsp; &nbsp; &nbsp; &nbsp; public override IIdentity Identity\n&nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; get\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return _identity;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; }\n}\n\n</pre>  \n\n<p>Next, add the Identity class which is where all of the heavy lifting is done for the login logic.</p>\n\n<pre class=\"brush: csharp\">namespace PortableAzure.Phone8.Adapters  \n{\n&nbsp; &nbsp; public class Identity : IIdentity\n&nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; public async void Authenticate()\n&nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var app = ((App)Application.Current);\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; string message = string.Empty;\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; while (this.User == null)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; User = await app.Azure.MobileService.LoginAsync(MobileServiceAuthenticationProvider.Twitter);\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; message = string.Format(\"You are now logged in - {0}\", User.UserId);\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; catch (InvalidOperationException)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; message = \"You must log in. Login Required\";\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MessageBox.Show(message);\n&nbsp; &nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp; &nbsp; &nbsp; public MobileServiceUser User { get; set; }\n&nbsp; &nbsp; }\n}&nbsp; &nbsp;\n&nbsp; &nbsp;\n&nbsp; &nbsp;\n&nbsp; &nbsp;\n</pre>Now that the Windows Phone implementation is complete we need to tell the Service library what is the current class is for the PlaformAdapater. &nbsp;This is set in the App.xaml.cs class in the App contstructor:\n\n<pre class=\"brush: csharp\">public App()  \n{\n &nbsp; Azure = new AzureMobileServices();\n\n &nbsp; PortableAzure.Core.Services.PlatformAdapter.Current = new Platform();\n\n   ...\n\n</pre>\n\n<h4 id=\"windows8\">Windows 8</h4>\n\n<p>To implement the PlatformAdapter class in the Windows 8 application, you could follow the same steps as documented for the Phone project, but that is duplication and not manageable over time.</p>\n\n<p>So in this case we will use add the existing Identity and Platform classes then add conditional compile statements to the areas of the classes where needed to address the small differences for Windows versus Phone.</p>\n\n<p>Add Existing item by holding the Alt key and dragging the file, or the whole folder from the Phone project to the Windows 8 Project.&nbsp; Thanks <a href=\"http://www.twitter.com/matthidinger\">Matt Hidinger</a> for this little trick. You could also just go through the right click -&gt; add existing -&gt; add as link process but now that you know the \"Hold Alt&nbsp;+ Drag\" why??</p>\n\n<p>Here are the completed Platform and Identity classes. &nbsp;You will need to repeat the setting of the current platform in the App.xaml.cs constructor.</p>\n\n<p><strong>Platform.cs</strong>\n<em>*\n*</em></p>\n\n<pre class=\"brush: csharp\">#if NETFX_CORE\n\nnamespace PortableAzure.Win8.Adapters\n\n#endif\n\n#if WINDOWS_PHONE\n\nnamespace PortableAzure.Phone8.Adapters\n\n#endif\n\n{\n&nbsp; &nbsp; public class Platform : PlatformAdapter\n&nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; public IIdentity _identity = new Identity();\n\n&nbsp; &nbsp; &nbsp; &nbsp; public override IIdentity Identity\n&nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; get\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return _identity;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; }\n}</pre>\n\n<p><strong>Identity.cs</strong></p>\n\n<pre class=\"brush: csharp\">#if NETFX_CORE\n\nnamespace PortableAzure.Win8.Adapters\n\n#endif\n\n#if WINDOWS_PHONE\n\nnamespace PortableAzure.Phone8.Adapters\n\n#endif\n\n{\n&nbsp; &nbsp; public class Identity : IIdentity\n&nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; public async void Authenticate()\n&nbsp; &nbsp; &nbsp; &nbsp; {\n\n#if WINDOWS_PHONE\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var app = ((App)Application.Current);\n\n#endif\n\n#if NETFX_CORE\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var app = ((PortableAzure.Win8.App)(Windows.UI.Xaml.Application.Current));\n\n#endif\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; string message = string.Empty;\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; while (this.User == null)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; User = await app.Azure.MobileService.LoginAsync(MobileServiceAuthenticationProvider.Twitter);\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; message = string.Format(\"You are now logged in - {0}\", User.UserId);\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; catch (InvalidOperationException)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; message = \"You must log in. Login Required\";\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n\n#if WINDOWS_PHONE\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MessageBox.Show(message);\n\n#endif\n\n#if NETFX_CORE\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var messageDialog = new Windows.UI.Popups.MessageDialog(message);\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; await messageDialog.ShowAsync();\n\n#endif\n\n&nbsp; &nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp; &nbsp; &nbsp; public MobileServiceUser User { get; set; }\n\n&nbsp; &nbsp; }\n\n}\n\n</pre>Note, be sure to use the full namespace OR add more #if at the top for the imports.\n\n#### Cleanup &amp; Consolidation\nNow that there is a single place where the application executes the call to Authenticate, through the magic of #if and reusing existing files, time to delete some code. &nbsp;Nice right?\n\nIn Part, each of the front end projects had code in the MainPage.xaml.cs file within the \"Loaded\" handler to execute the Azure authentication code. &nbsp;That can be replaced by using the Event Messaging Bus provided by MVVM Light and sending the LoginMessage.\n\nMessenger.Default.Send&lt;LoginMessage&gt;(new LoginMessage());\n\nIn the MainViewModel, add the handler in the constructor and the Login subroutine to call the Authenticate method in the Identity interface.\n\n<pre class=\"brush: csharp\">&nbsp;public MainViewModel()  \n&nbsp;{\n&nbsp; &nbsp; &nbsp;Messenger.Default.Register&lt;LoginMessage&gt;(this, m =&gt; { Login(); });\n&nbsp; }\n\n&nbsp;public void Login()\n&nbsp;{\n&nbsp; &nbsp; &nbsp;if (PlatformAdapter.Current.Identity.User == null)\n&nbsp; &nbsp; &nbsp;{\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;try\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;PlatformAdapter.Current.Identity.Authenticate();\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; catch (Exception ex)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Debug.WriteLine(ex.ToString());\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}\n&nbsp; &nbsp; &nbsp;}\n&nbsp;}</pre>\n\n<p>Now when either platform is run, the Login entry point happens in the MainViewModel upon loading of the main page. &nbsp;Another option, if you wanted to eliminate the messaging, would be to add a login button and have the ICommand call the Login method thus eliminating any code behind in the MainPage.xaml but that depends on your applications needs.</p>\n\n<p><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: left; margin-right: 1em; text-align: left;\"><tbody><tr><td style=\"text-align: center;\"><img src=\"http://3.bp.blogspot.com/-8lzbSolfP6U/UhjMfDdLVcI/AAAAAAAAAi0/LO8wD7Qof60/s200/PortableAzure1.png\" alt=\"\" title=\"\" /></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Windows Phone</td></tr></tbody></table><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://2.bp.blogspot.com/-VgxUqIxUVS8/UhjMi94SnBI/AAAAAAAAAi8/tAR6icYJEbs/s1600/screenshot_08242013_110509.png\"><img src=\"http://2.bp.blogspot.com/-VgxUqIxUVS8/UhjMi94SnBI/AAAAAAAAAi8/tAR6icYJEbs/s320/screenshot_08242013_110509.png\" alt=\"\" title=\"\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Windows 8 / RT</td></tr></tbody></table><a href=\"http://3.bp.blogspot.com/-8lzbSolfP6U/UhjMfDdLVcI/AAAAAAAAAi0/LO8wD7Qof60/s1600/PortableAzure1.png\"></a></p>\n\n<h3 id=\"\"> </h3>\n\n<h3 id=\"wrappingupauthentication\">Wrapping Up Authentication</h3>\n\n<p>One item to mention, in this example every time the app is run on either platform the user will have to authenticate. &nbsp;When the MobileServiceUser is successfully authenticated, there are two properties that you can save; MobileServiceAuthenticationToken and UserId respectively. &nbsp;In a subsequent execution of the app, create a new instance of the MobileServiceUser and set the CurrentUser property of the AzureMobileService.MobileService. For Example:</p>\n\n<pre class=\"brush: csharp\">var user = new MobileServiceUser(mySavedUserId);\n\nuser.MobileServiceAuthenticationToken = mySavedMobileServiceAuthenticationToken;\n\nApp.MobileService.CurrentUser = user;</pre>  \n\n<p>Part 1 and Part 2 has shown a simple introduction of how to use portable class libraries with Azure Mobile Services and through the use of a little indirection reuse all the code possible BUT also keep the MVVM implementation and code organization as clean as possible.</p>\n\n<p>Final Code for Part 2 located <a href=\"http://sdrv.ms/1f9CsO3\">here</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1377357900002,"created_by":1,"updated_at":1377358286522,"updated_by":1,"published_at":1377357900002,"published_by":1},{"id":11,"uuid":"43d66c72-daec-47d8-9080-039517b18cf5","title":"Azure Mobile Services & Portable Class Libraries - Part 1 Authentication","slug":"azure_mobile_services_portable_class_libraries_part_1_authentication","markdown":"Azure Mobile Services is undoubtedly one of the best platforms to emerge from the Azure group over the last year. If you are a mobile developer and not taking advantage of it; I encourage you to do so. &nbsp;There are many video and blog posts available to get you started at&nbsp;[http://www.windowsazure.com/en-us/develop/mobile/](http://www.windowsazure.com/en-us/develop/mobile/)&nbsp;.\n\n[![](http://4.bp.blogspot.com/-wFQhPER5p58/Uf_QUnXT7LI/AAAAAAAAAh4/mPUDF-7LMco/s320/AzureNuget.PNG)](http://4.bp.blogspot.com/-wFQhPER5p58/Uf_QUnXT7LI/AAAAAAAAAh4/mPUDF-7LMco/s1600/AzureNuget.PNG)One of the features you may not be aware of is Azure Mobile Services is a Portable Class Library (PCL) available through nuget. If you are not familiar with PCL's see my \"[Move Your ViewModels](http://blog.tattoocoder.com/2013/01/portable-mvvm-light-move-your-view.html)\" series.\n\nThere is a caveat however when using Azure Mobile Services in your PCL; although all of the data calls to the services are available, using the [Identity ](http://www.windowsazure.com/en-us/develop/mobile/tutorials/get-started-with-users-wp8/)feature is not and must be implemented in a platform specific way.\n\nThe Identity feature allows your application to leverage the user's Microsoft, Google, Facebook or Twitter account to login to the application and abstract the overhead of OAuth or provider specific authentication models into a single call.\n\n> var user =&nbsp;MobileService.LoginAsync(MobileServiceAuthenticationProvider.Twitter);\n\n### The Challenge - Maximize Code Reuse\nThere is no secret that Model-View-View-Model (MVVM) is a preferred pattern for xaml developers, but it is also know that sometimes breaking patterns is needed either due to time constraints or other restrictions.\n\nIn the effort to maintain the MVVM pattern in this scenario a platform abstraction is needed to accomplish to goal of reusing as much code as possible. &nbsp;[Matt Hidinger](http://www.twitter.com/matthidinger) did a [great talk at BUILD 2013](http://www.matthidinger.com/archive/2013/07/02/video-and-code-from-my-build-talk-on-sharing-code.aspx) this year on this topic, give a watch on his [blog](http://www.matthidinger.com/archive/2013/07/02/video-and-code-from-my-build-talk-on-sharing-code.aspx).\n\n### Scenario - Setting up your solution\nI won't walk through setting up a Mobile Service on Azure, [see this post for instructions](http://www.windowsazure.com/en-us/develop/mobile/), so let's assume we have a Windows Phone &amp; Windows Store application where we'd like to share code in a Portable Class Library and allow the user to login with their Twitter account. The project solution should contain 3 projects:\n\n[![](http://1.bp.blogspot.com/-Jazrb31Bp-o/Uf_dd2K-F0I/AAAAAAAAAiI/yux5KOb6WX8/s320/Solution.PNG)](http://1.bp.blogspot.com/-Jazrb31Bp-o/Uf_dd2K-F0I/AAAAAAAAAiI/yux5KOb6WX8/s1600/Solution.PNG)*   PortableAzure.Win8 - Windows 8 Blank &nbsp;Application\n*   PortableAzure.Phone8 - Windows Phone 8 Application\n*   PortableAzure.Core - Portable Class Library Project\nI have added the following nuget packages to the projects\n\n*   Microsoft.Net.Http\n*   Portable.MvvmLightLibs\n*   WindowsAzure.MobileServices\nThere is some plumbing related to the MVVM structure that is needed as well. &nbsp;Get the \"before\" code here&nbsp;[http://sdrv.ms/14ufYYZ](http://sdrv.ms/14ufYYZ)&nbsp;, your solution explorer should look like the image here -&gt;.\n\n### Adding Azure&nbsp;\n\n_Assumption(s) - you have created a Azure Mobile Service._\n\nFirst, you will want to add a new class to the **Services **folder in the **PortableAzure.Core** project and call it AzureMobileServices. I have also added an empty interface out of habit and to use for IoC (Inversion of Control).\n\n> namespace PortableAzure.Core.Services\n> {\n> &nbsp; &nbsp; public class AzureMobileServices : IAzureMobileServices\n> &nbsp; &nbsp; {\n> &nbsp; &nbsp; &nbsp; &nbsp; public MobileServiceClient MobileService = new MobileServiceClient(\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"https://portableazure.azure-mobile.net/\",\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"[your app key]\"\n> &nbsp; &nbsp; &nbsp; &nbsp; );\n> &nbsp; &nbsp; &nbsp; &nbsp; public AzureMobileServices()\n> &nbsp; &nbsp; &nbsp; &nbsp; {\n> &nbsp; &nbsp; &nbsp; &nbsp; }\n> &nbsp; &nbsp; }\n> &nbsp; &nbsp; public interface IAzureMobileServices\n> &nbsp; &nbsp; {\n> &nbsp; &nbsp; }\n> }\nThe app key and url comes from the Azure portal when you complete the setup; you will want to choose \"Connect to an Existing Project\". Either Windows Phone or Windows 8 is an acceptable choice.\n\nNext step is to [setup the Twitter authentication](http://www.windowsazure.com/en-us/develop/mobile/how-to-guides/register-for-twitter-authentication/), or other provider of your choosing. &nbsp;([reference](http://www.windowsazure.com/en-us/develop/mobile/tutorials/get-started-with-users-wp8/))\n\nNow that that is complete, we'll add the necessary platform specific code to the Windows Phone &amp; Windows 8 platforms to prompt the user to login using their Twitter account.\n\n### Windows Phone\nOpen the App.xaml.cs and create a new property for the AzureMobileService class from the Core project.\n\n> &nbsp; &nbsp; public partial class App : Application\n> &nbsp; &nbsp; {\n> &nbsp; &nbsp; &nbsp; &nbsp; /// &lt;summary&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; /// Provides easy access to the root frame of the Phone Application.\n> &nbsp; &nbsp; &nbsp; &nbsp; /// &lt;/summary&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; /// &lt;returns&gt;The root frame of the Phone Application.&lt;/returns&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; public static PhoneApplicationFrame RootFrame { get; private set; }&nbsp;> &nbsp; &nbsp; &nbsp; &nbsp;** public AzureMobileServices Azure { get; private set; }&nbsp;**> &nbsp; &nbsp; &nbsp; &nbsp; /// &lt;summary&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; /// Constructor for the Application object.\n> &nbsp; &nbsp; &nbsp; &nbsp; /// &lt;/summary&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; public App()\nThen in the App constructor create the new instance of the AzureMobileService class.\n\n> Azure = new AzureMobileServices();&nbsp;In order to prompt the user, open the MainPage.xaml.cs file and add the following code to the PhoneApplicationPage_Loaded event.\n\n> &nbsp;private async void PhoneApplicationPage_Loaded(object sender, RoutedEventArgs e)\n> &nbsp; &nbsp; &nbsp; &nbsp; {\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MobileServiceUser user = null;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; while (user == null)\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; string message;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; user = await((App)Application.Current).Azure.MobileService.LoginAsync(MobileServiceAuthenticationProvider.Twitter);\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; message = string.Format(\"You are now logged in - {0}\", user.UserId);\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; catch (InvalidOperationException)\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; message = \"You must log in. Login Required\";\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MessageBox.Show(message);\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n> &nbsp; &nbsp; &nbsp; &nbsp; }\n\n### \n\n### Windows 8\nThe implementation is essentially the same for Windows 8 with the exception of how to show a message box. \n\n> private async void Page_Loaded(object sender, RoutedEventArgs e)\n> &nbsp; &nbsp; &nbsp; &nbsp; {\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MobileServiceUser user = null;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; while (user == null)\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; string message;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; user = await((App)Application.Current).Azure.MobileService.LoginAsync(MobileServiceAuthenticationProvider.Twitter);\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; message = string.Format(\"You are now logged in - {0}\", user.UserId);\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; catch (InvalidOperationException)\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; message = \"You must log in. Login Required\";\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; **var dialog = new MessageDialog(message);\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dialog.Commands.Add(new UICommand(\"OK\"));\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; await dialog.ShowAsync();**\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n> &nbsp; &nbsp; &nbsp; &nbsp; }\n\n### The Good &amp; Bad - so far\nTo this point everything is working great and we have now effectively added the authentication to each platform using the Identity features in Azure Mobile Services. But other than the url and the key of the Azure Mobile Service; there isn't a lot of code reuse in this scenario.\n\nThis is a necessity when there are platform specific implementations of a feature. &nbsp;In this case, the UI needs to present differently and cannot re-use the xaml or controls that are a part of the login utility for the specified provider.\n\nThe bad part of this is it breaks the MVVM pattern to a degree by putting some of the logic in the code behind.\n\nIn the next installment, I'll show how to add an abstraction layer and use the MVVM Light Event Bus to push some of this code back to our view models.\n\nHere is the completed [code for Part 1](http://sdrv.ms/14upB9R).","html":"<p>Azure Mobile Services is undoubtedly one of the best platforms to emerge from the Azure group over the last year. If you are a mobile developer and not taking advantage of it; I encourage you to do so. &nbsp;There are many video and blog posts available to get you started at&nbsp;<a href=\"http://www.windowsazure.com/en-us/develop/mobile/\">http://www.windowsazure.com/en-us/develop/mobile/</a>&nbsp;.</p>\n\n<p><a href=\"http://4.bp.blogspot.com/-wFQhPER5p58/Uf_QUnXT7LI/AAAAAAAAAh4/mPUDF-7LMco/s1600/AzureNuget.PNG\"><img src=\"http://4.bp.blogspot.com/-wFQhPER5p58/Uf_QUnXT7LI/AAAAAAAAAh4/mPUDF-7LMco/s320/AzureNuget.PNG\" alt=\"\" title=\"\" /></a>One of the features you may not be aware of is Azure Mobile Services is a Portable Class Library (PCL) available through nuget. If you are not familiar with PCL's see my \"<a href=\"http://blog.tattoocoder.com/2013/01/portable-mvvm-light-move-your-view.html\">Move Your ViewModels</a>\" series.</p>\n\n<p>There is a caveat however when using Azure Mobile Services in your PCL; although all of the data calls to the services are available, using the <a href=\"http://www.windowsazure.com/en-us/develop/mobile/tutorials/get-started-with-users-wp8/\">Identity </a>feature is not and must be implemented in a platform specific way.</p>\n\n<p>The Identity feature allows your application to leverage the user's Microsoft, Google, Facebook or Twitter account to login to the application and abstract the overhead of OAuth or provider specific authentication models into a single call.</p>\n\n<blockquote>\n  <p>var user =&nbsp;MobileService.LoginAsync(MobileServiceAuthenticationProvider.Twitter);</p>\n</blockquote>\n\n<h3 id=\"thechallengemaximizecodereuse\">The Challenge - Maximize Code Reuse</h3>\n\n<p>There is no secret that Model-View-View-Model (MVVM) is a preferred pattern for xaml developers, but it is also know that sometimes breaking patterns is needed either due to time constraints or other restrictions.</p>\n\n<p>In the effort to maintain the MVVM pattern in this scenario a platform abstraction is needed to accomplish to goal of reusing as much code as possible. &nbsp;<a href=\"http://www.twitter.com/matthidinger\">Matt Hidinger</a> did a <a href=\"http://www.matthidinger.com/archive/2013/07/02/video-and-code-from-my-build-talk-on-sharing-code.aspx\">great talk at BUILD 2013</a> this year on this topic, give a watch on his <a href=\"http://www.matthidinger.com/archive/2013/07/02/video-and-code-from-my-build-talk-on-sharing-code.aspx\">blog</a>.</p>\n\n<h3 id=\"scenariosettingupyoursolution\">Scenario - Setting up your solution</h3>\n\n<p>I won't walk through setting up a Mobile Service on Azure, <a href=\"http://www.windowsazure.com/en-us/develop/mobile/\">see this post for instructions</a>, so let's assume we have a Windows Phone &amp; Windows Store application where we'd like to share code in a Portable Class Library and allow the user to login with their Twitter account. The project solution should contain 3 projects:</p>\n\n<p><a href=\"http://1.bp.blogspot.com/-Jazrb31Bp-o/Uf_dd2K-F0I/AAAAAAAAAiI/yux5KOb6WX8/s1600/Solution.PNG\"><img src=\"http://1.bp.blogspot.com/-Jazrb31Bp-o/Uf_dd2K-F0I/AAAAAAAAAiI/yux5KOb6WX8/s320/Solution.PNG\" alt=\"\" title=\"\" /></a>*   PortableAzure.Win8 - Windows 8 Blank &nbsp;Application\n*   PortableAzure.Phone8 - Windows Phone 8 Application\n*   PortableAzure.Core - Portable Class Library Project\nI have added the following nuget packages to the projects</p>\n\n<ul>\n<li>Microsoft.Net.Http</li>\n<li>Portable.MvvmLightLibs</li>\n<li>WindowsAzure.MobileServices\nThere is some plumbing related to the MVVM structure that is needed as well. &nbsp;Get the \"before\" code here&nbsp;<a href=\"http://sdrv.ms/14ufYYZ\">http://sdrv.ms/14ufYYZ</a>&nbsp;, your solution explorer should look like the image here -&gt;.</li>\n</ul>\n\n<h3 id=\"addingazurenbsp\">Adding Azure&nbsp;</h3>\n\n<p><em>Assumption(s) - you have created a Azure Mobile Service.</em></p>\n\n<p>First, you will want to add a new class to the <strong>Services <em>*folder in the *</em>PortableAzure.Core</strong> project and call it AzureMobileServices. I have also added an empty interface out of habit and to use for IoC (Inversion of Control).</p>\n\n<blockquote>\n  <p>namespace PortableAzure.Core.Services\n  {\n  &nbsp; &nbsp; public class AzureMobileServices : IAzureMobileServices\n  &nbsp; &nbsp; {\n  &nbsp; &nbsp; &nbsp; &nbsp; public MobileServiceClient MobileService = new MobileServiceClient(\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"<a href='https://portableazure.azure-mobile.net/'>https://portableazure.azure-mobile.net/</a>\",\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"[your app key]\"\n  &nbsp; &nbsp; &nbsp; &nbsp; );\n  &nbsp; &nbsp; &nbsp; &nbsp; public AzureMobileServices()\n  &nbsp; &nbsp; &nbsp; &nbsp; {\n  &nbsp; &nbsp; &nbsp; &nbsp; }\n  &nbsp; &nbsp; }\n  &nbsp; &nbsp; public interface IAzureMobileServices\n  &nbsp; &nbsp; {\n  &nbsp; &nbsp; }\n  }\n  The app key and url comes from the Azure portal when you complete the setup; you will want to choose \"Connect to an Existing Project\". Either Windows Phone or Windows 8 is an acceptable choice.</p>\n</blockquote>\n\n<p>Next step is to <a href=\"http://www.windowsazure.com/en-us/develop/mobile/how-to-guides/register-for-twitter-authentication/\">setup the Twitter authentication</a>, or other provider of your choosing. &nbsp;(<a href=\"http://www.windowsazure.com/en-us/develop/mobile/tutorials/get-started-with-users-wp8/\">reference</a>)</p>\n\n<p>Now that that is complete, we'll add the necessary platform specific code to the Windows Phone &amp; Windows 8 platforms to prompt the user to login using their Twitter account.</p>\n\n<h3 id=\"windowsphone\">Windows Phone</h3>\n\n<p>Open the App.xaml.cs and create a new property for the AzureMobileService class from the Core project.</p>\n\n<blockquote>\n  <p>&nbsp; &nbsp; public partial class App : Application\n  &nbsp; &nbsp; {\n  &nbsp; &nbsp; &nbsp; &nbsp; /// &lt;summary&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; /// Provides easy access to the root frame of the Phone Application.\n  &nbsp; &nbsp; &nbsp; &nbsp; /// &lt;/summary&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; /// &lt;returns&gt;The root frame of the Phone Application.&lt;/returns&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; public static PhoneApplicationFrame RootFrame { get; private set; }&nbsp;> &nbsp; &nbsp; &nbsp; &nbsp;<em>* public AzureMobileServices Azure { get; private set; }&nbsp;</em>*> &nbsp; &nbsp; &nbsp; &nbsp; /// &lt;summary&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; /// Constructor for the Application object.\n  &nbsp; &nbsp; &nbsp; &nbsp; /// &lt;/summary&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; public App()\n  Then in the App constructor create the new instance of the AzureMobileService class.</p>\n  \n  <p>Azure = new AzureMobileServices();&nbsp;In order to prompt the user, open the MainPage.xaml.cs file and add the following code to the PhoneApplicationPage_Loaded event.</p>\n  \n  <p>&nbsp;private async void PhoneApplicationPage_Loaded(object sender, RoutedEventArgs e)\n  &nbsp; &nbsp; &nbsp; &nbsp; {\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MobileServiceUser user = null;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; while (user == null)\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; string message;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; user = await((App)Application.Current).Azure.MobileService.LoginAsync(MobileServiceAuthenticationProvider.Twitter);\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; message = string.Format(\"You are now logged in - {0}\", user.UserId);\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; catch (InvalidOperationException)\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; message = \"You must log in. Login Required\";\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MessageBox.Show(message);\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n  &nbsp; &nbsp; &nbsp; &nbsp; }</p>\n</blockquote>\n\n<h3 id=\"\"> </h3>\n\n<h3 id=\"windows8\">Windows 8</h3>\n\n<p>The implementation is essentially the same for Windows 8 with the exception of how to show a message box. </p>\n\n<blockquote>\n  <p>private async void Page_Loaded(object sender, RoutedEventArgs e)\n  &nbsp; &nbsp; &nbsp; &nbsp; {\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MobileServiceUser user = null;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; while (user == null)\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; string message;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; user = await((App)Application.Current).Azure.MobileService.LoginAsync(MobileServiceAuthenticationProvider.Twitter);\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; message = string.Format(\"You are now logged in - {0}\", user.UserId);\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; catch (InvalidOperationException)\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; message = \"You must log in. Login Required\";\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <strong>var dialog = new MessageDialog(message);\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dialog.Commands.Add(new UICommand(\"OK\"));\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; await dialog.ShowAsync();</strong>\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n  &nbsp; &nbsp; &nbsp; &nbsp; }</p>\n</blockquote>\n\n<h3 id=\"thegoodampbadsofar\">The Good &amp; Bad - so far</h3>\n\n<p>To this point everything is working great and we have now effectively added the authentication to each platform using the Identity features in Azure Mobile Services. But other than the url and the key of the Azure Mobile Service; there isn't a lot of code reuse in this scenario.</p>\n\n<p>This is a necessity when there are platform specific implementations of a feature. &nbsp;In this case, the UI needs to present differently and cannot re-use the xaml or controls that are a part of the login utility for the specified provider.</p>\n\n<p>The bad part of this is it breaks the MVVM pattern to a degree by putting some of the logic in the code behind.</p>\n\n<p>In the next installment, I'll show how to add an abstraction layer and use the MVVM Light Event Bus to push some of this code back to our view models.</p>\n\n<p>Here is the completed <a href=\"http://sdrv.ms/14upB9R\">code for Part 1</a>.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1375729560001,"created_by":1,"updated_at":1375729594215,"updated_by":1,"published_at":1375729560001,"published_by":1},{"id":12,"uuid":"cb87e622-1964-4630-afb0-65228a55346b","title":"Cross Mobile Development with Icenium","slug":"cross_mobile_development_with_icenium","markdown":"I have recently spent some time with [Telerik](http://www.telerik.com/)'s new product offering for cross mobile development called Icenium and I have to say it is quite nice. &nbsp;Paired with [KendoUI Mobile](http://www.kendoui.com/mobile.aspx) you can't go wrong with a great set of tools for cross mobile platform development if you are an HTML&nbsp;+ CSS&nbsp;+ JavaScript developer.\nIceniumIcenium is a cloud based IDE, there is also a Windows WPF Click-Once app, that allows you as a developer to leverage your existing HTML, CSS and JavaScript skills to develop hybrid cross mobile platform applications.  Assistance of publishing your applications to the Google Play and Apple Store, integrated debugging and development environment, source control integration (including Git) and much more.  See http://www.icenium.com for more information.I will mention also that the underlying bits of Icenium is PhoneGap (Apache-Cordova) which provides and API through JavaScript (cordova.js) to the device functions such as the camera other hardware capabilities.  For more information on that piece, Jim Cowart (@ifandelse) recently did a blog entry on their blog - \"Demystifying Cordova and PhoneGap\".Getting StartedHead over to Icenium.com and click the \"Get Started\" button. Choose either the browser (cloud) based IDE or download the Windows app.Once the application is launched select New Project -> Cross Platform Device Application (Kendo UI Mobile). Name the project \"MyBloodPressure\" and click Ok.In doing so, Icenium presents the built in \"Hello World\" type template. Shows how geolocation, transitions, styling using Kendo UI Mobile etc.  If you run the application by either hitting F5 or clicking the \"Run\" icon atop the IDE you'll also see the awesome tools for viewing the various mobile devices currently supported as well.After you spend a few minutes playing with the emulators and realizing how cool that all is, we'll rip out some stuff add some sauce to this and get cooking.\n\n### Reorganizing the Project for Organization\nI'm a very big proponent of being able to look at a project and know what the heck is going without having to hunt down someone or run the code and step through it to find out how it's all composed.  In a C#/XAML world in I use the MVVM pattern with MVVM Light for my projects. I like to see the view folder, viewmodel folder etc. when developing the app.  For doing so here I will leverage RequireJS  for structuring the organization.  \n\n#### Removing&nbsp;unnecessary&nbsp;files\nDelete the hello-world.js from the scripts folder as we will not be using this for the project.\n\n#### Folder structure\nFirst, lets create a few folders.  At the root of the project create an app folder that contains view, viewmodel and model.For any scripts that are 3rd party libraries, I prefer to put those in the scripts folder and any that are related directly to the application specific functionality I organize them within the app folder appropriately.  Given that, I'll move the kendo.mobile.min.js, jquery.min.js and also add require.js to the scripts folderNext, add a new JavaScript file to the app folder by right clicking and selecting add new file. Name is main.js; this will be the entry point to the application.Also add a JavaScript file to the app folder named app.js, this will serve as the singelton for exposing the viewmodels and could also be referred to as the view model locator.First item of business is to tell require.js where to find the modules we either have or will be creating in our application. Add the following to main.js to configure require.js.> require.config({\n> &nbsp; &nbsp; paths: {\n> &nbsp; &nbsp; &nbsp; &nbsp; jQuery: \"../scripts/jquery.min\",\n> &nbsp; &nbsp; &nbsp; &nbsp; kendo: \"../scripts/kendo.mobile.min\",\n> &nbsp; &nbsp; &nbsp; &nbsp; view: \"../app/view\",\n> &nbsp; &nbsp; &nbsp; &nbsp; viewmodel: \"../app/viewmodel\",\n> &nbsp; &nbsp; &nbsp; &nbsp; app: \"../app\"\n> &nbsp; &nbsp; },\n> &nbsp; &nbsp; shim: {\n> &nbsp; &nbsp; &nbsp; &nbsp; jQuery: {\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; exports: \"jQuery\"\n> &nbsp; &nbsp; &nbsp; &nbsp; },\n> &nbsp; &nbsp; &nbsp; &nbsp; kendo: {\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; deps: [\"jQuery\"],\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; exports: \"kendo\"\n> &nbsp; &nbsp; &nbsp; &nbsp; }\n> &nbsp; &nbsp; }\n> });What this is doing, if you are not familiar, is telling require.js that when a module is defined like> define(['viewmodel/bp'], function(bp) { ... } );it knows to go look for bp.js inside of the \"[root]/app/viewmodel\" folder and not a relative path etc.  In the shim portion of the code we are stating that kendo has a dependency on jQuery and should wait for that library to load first.  For more information on requirejs and the config method see http://requirejs.org/docs/api.html#config .Finally in the main.js file add the following to create the app module, put it in scope and init the application.> var app;\n> require([\"app/app\"], function (application) {\n> &nbsp; &nbsp; console.log('initializing');\n> &nbsp; &nbsp; app = application;\n> &nbsp; &nbsp; app.init();\n> });Last order of business is to add the code to app.js to tell kendo to initialize the mobile application.  Here is the full app.js code for now.> define([\"jQuery\", \"kendo\"], function ($, kendo) {\n> &nbsp; &nbsp; var _kendoApplication;\n> &nbsp; &nbsp; return {\n> &nbsp; &nbsp; &nbsp; &nbsp; init: function () {\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.log('app init');\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _kendoApplication = new kendo.mobile.Application(document.body,\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; { transition: \"slide\", layout: \"mobile-tabstrip\" });\n> &nbsp; &nbsp; &nbsp; &nbsp; }\n> &nbsp; &nbsp; }\n> }); &nbsp;&nbsp;The init function is called when the application first fires up setting the transitons of the app the 'slide' and telling kendo what the layout root of the app is; in this case 'mobile-tabstrip'.\n\n### Wiring Up Index.html\nNow that the scripts, view, viewmodel, entry points etc. are all setup; open index.html.In the <head> tag remove everything except the references to the .css and cordova.js files and the we need to add the script reference to main and require.js for our entry point.  After that all scripts will be loaded using AMD and require.js . </head>> &nbsp; &nbsp; &lt;head&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &lt;title&gt;&lt;/title&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &lt;meta charset=\"utf-8\" /&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &lt;script src=\"cordova.js\"&gt;&lt;/script&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &lt;script data-main=\"app/main\" src=\"scripts/require.js\"&gt;&lt;/script&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &lt;link href=\"kendo/styles/kendo.mobile.all.min.css\" rel=\"stylesheet\" /&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &lt;link href=\"styles/main.css\" rel=\"stylesheet\" /&gt;\n> &nbsp; &nbsp; &lt;/head&gt;Also remove the script tag at the bottom of the file that refers to the kendo.mobile.application as we have now moved that to the app.js init function.Finally, remove all <div> tag sections with a data-role of view other that the first one.  These will be separated into individual html files and stored in the views folder in Part 2 of the series.  The final html document should appear as:</div>> &lt;!DOCTYPE html&gt;\n> &lt;html&gt;\n> &nbsp; &nbsp; &lt;head&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &lt;title&gt;&lt;/title&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &lt;meta charset=\"utf-8\" /&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &lt;script src=\"cordova.js\"&gt;&lt;/script&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &lt;script data-main=\"app/main\" src=\"scripts/require.js\"&gt;&lt;/script&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &lt;link href=\"kendo/styles/kendo.mobile.all.min.css\" rel=\"stylesheet\" /&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &lt;link href=\"styles/main.css\" rel=\"stylesheet\" /&gt;\n> &nbsp; &nbsp; &lt;/head&gt;\n> &nbsp; &nbsp; &lt;body&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &lt;div data-role=\"view\" id=\"tabstrip-home\" data-title=\"Hello World!\"&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;h1&gt;Welcome!&lt;/h1&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;p&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Icenium&amp;trade; enables you to build cross-platform device applications regardless of your\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; development platform by combining the convenience of a local development toolset with the\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; power and flexibility of the cloud.\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;/p&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &lt;/div&gt;\n> &nbsp; &nbsp; &nbsp; \n> &nbsp; &nbsp; &nbsp; &nbsp; &lt;div data-role=\"layout\" data-id=\"mobile-tabstrip\"&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;header data-role=\"header\"&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;div data-role=\"navbar\"&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;span data-role=\"view-title\"&gt;&lt;/span&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;/div&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;/header&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;div data-role=\"footer\"&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;div data-role=\"tabstrip\"&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;a href=\"#tabstrip-home\" data-icon=\"home\"&gt;Home&lt;/a&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;a href=\"#tabstrip-uiinteraction\" data-icon=\"share\"&gt;UI Interaction&lt;/a&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;a href=\"#tabstrip-geolocation\" data-icon=\"globe\"&gt;Geolocation&lt;/a&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;/div&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;/div&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &lt;/div&gt;\n> &nbsp; &nbsp; &nbsp; \n> &nbsp; &nbsp; &lt;/body&gt;\n> &lt;/html&gt;\n\n### Conclusion\nIf you run the application you can see that the application still operates as it did in the very beginning, with the exception of the additional views not appearing, but the advantage here is that the overall structure allows for manageability moving forward as complexity is added to the project through data services and additional views. If there is something that you would like to see in a series or have a question please add a comment. \n\nCode available on GitHub - https://github.com/tattoocoder/iceniumbp.git","html":"<p>I have recently spent some time with <a href=\"http://www.telerik.com/\">Telerik</a>'s new product offering for cross mobile development called Icenium and I have to say it is quite nice. &nbsp;Paired with <a href=\"http://www.kendoui.com/mobile.aspx\">KendoUI Mobile</a> you can't go wrong with a great set of tools for cross mobile platform development if you are an HTML&nbsp;+ CSS&nbsp;+ JavaScript developer. <br />\nIceniumIcenium is a cloud based IDE, there is also a Windows WPF Click-Once app, that allows you as a developer to leverage your existing HTML, CSS and JavaScript skills to develop hybrid cross mobile platform applications.  Assistance of publishing your applications to the Google Play and Apple Store, integrated debugging and development environment, source control integration (including Git) and much more.  See <a href='http://www.icenium.com'>http://www.icenium.com</a> for more information.I will mention also that the underlying bits of Icenium is PhoneGap (Apache-Cordova) which provides and API through JavaScript (cordova.js) to the device functions such as the camera other hardware capabilities.  For more information on that piece, Jim Cowart (@ifandelse) recently did a blog entry on their blog - \"Demystifying Cordova and PhoneGap\".Getting StartedHead over to Icenium.com and click the \"Get Started\" button. Choose either the browser (cloud) based IDE or download the Windows app.Once the application is launched select New Project -> Cross Platform Device Application (Kendo UI Mobile). Name the project \"MyBloodPressure\" and click Ok.In doing so, Icenium presents the built in \"Hello World\" type template. Shows how geolocation, transitions, styling using Kendo UI Mobile etc.  If you run the application by either hitting F5 or clicking the \"Run\" icon atop the IDE you'll also see the awesome tools for viewing the various mobile devices currently supported as well.After you spend a few minutes playing with the emulators and realizing how cool that all is, we'll rip out some stuff add some sauce to this and get cooking.</p>\n\n<h3 id=\"reorganizingtheprojectfororganization\">Reorganizing the Project for Organization</h3>\n\n<p>I'm a very big proponent of being able to look at a project and know what the heck is going without having to hunt down someone or run the code and step through it to find out how it's all composed.  In a C#/XAML world in I use the MVVM pattern with MVVM Light for my projects. I like to see the view folder, viewmodel folder etc. when developing the app.  For doing so here I will leverage RequireJS  for structuring the organization.  </p>\n\n<h4 id=\"removingnbspunnecessarynbspfiles\">Removing&nbsp;unnecessary&nbsp;files</h4>\n\n<p>Delete the hello-world.js from the scripts folder as we will not be using this for the project.</p>\n\n<h4 id=\"folderstructure\">Folder structure</h4>\n\n<p>First, lets create a few folders.  At the root of the project create an app folder that contains view, viewmodel and model.For any scripts that are 3rd party libraries, I prefer to put those in the scripts folder and any that are related directly to the application specific functionality I organize them within the app folder appropriately.  Given that, I'll move the kendo.mobile.min.js, jquery.min.js and also add require.js to the scripts folderNext, add a new JavaScript file to the app folder by right clicking and selecting add new file. Name is main.js; this will be the entry point to the application.Also add a JavaScript file to the app folder named app.js, this will serve as the singelton for exposing the viewmodels and could also be referred to as the view model locator.First item of business is to tell require.js where to find the modules we either have or will be creating in our application. Add the following to main.js to configure require.js.> require.config({  </p>\n\n<blockquote>\n  <p>&nbsp; &nbsp; paths: {\n  &nbsp; &nbsp; &nbsp; &nbsp; jQuery: \"../scripts/jquery.min\",\n  &nbsp; &nbsp; &nbsp; &nbsp; kendo: \"../scripts/kendo.mobile.min\",\n  &nbsp; &nbsp; &nbsp; &nbsp; view: \"../app/view\",\n  &nbsp; &nbsp; &nbsp; &nbsp; viewmodel: \"../app/viewmodel\",\n  &nbsp; &nbsp; &nbsp; &nbsp; app: \"../app\"\n  &nbsp; &nbsp; },\n  &nbsp; &nbsp; shim: {\n  &nbsp; &nbsp; &nbsp; &nbsp; jQuery: {\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; exports: \"jQuery\"\n  &nbsp; &nbsp; &nbsp; &nbsp; },\n  &nbsp; &nbsp; &nbsp; &nbsp; kendo: {\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; deps: [\"jQuery\"],\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; exports: \"kendo\"\n  &nbsp; &nbsp; &nbsp; &nbsp; }\n  &nbsp; &nbsp; }\n  });What this is doing, if you are not familiar, is telling require.js that when a module is defined like> define(['viewmodel/bp'], function(bp) { ... } );it knows to go look for bp.js inside of the \"[root]/app/viewmodel\" folder and not a relative path etc.  In the shim portion of the code we are stating that kendo has a dependency on jQuery and should wait for that library to load first.  For more information on requirejs and the config method see <a href='http://requirejs.org/docs/api.html#config'>http://requirejs.org/docs/api.html#config</a> .Finally in the main.js file add the following to create the app module, put it in scope and init the application.> var app;\n  require([\"app/app\"], function (application) {\n  &nbsp; &nbsp; console.log('initializing');\n  &nbsp; &nbsp; app = application;\n  &nbsp; &nbsp; app.init();\n  });Last order of business is to add the code to app.js to tell kendo to initialize the mobile application.  Here is the full app.js code for now.> define([\"jQuery\", \"kendo\"], function ($, kendo) {\n  &nbsp; &nbsp; var _kendoApplication;\n  &nbsp; &nbsp; return {\n  &nbsp; &nbsp; &nbsp; &nbsp; init: function () {\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.log('app init');\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _kendoApplication = new kendo.mobile.Application(document.body,\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; { transition: \"slide\", layout: \"mobile-tabstrip\" });\n  &nbsp; &nbsp; &nbsp; &nbsp; }\n  &nbsp; &nbsp; }\n  }); &nbsp;&nbsp;The init function is called when the application first fires up setting the transitons of the app the 'slide' and telling kendo what the layout root of the app is; in this case 'mobile-tabstrip'.</p>\n</blockquote>\n\n<h3 id=\"wiringupindexhtml\">Wiring Up Index.html</h3>\n\n<p>Now that the scripts, view, viewmodel, entry points etc. are all setup; open index.html.In the <head> tag remove everything except the references to the .css and cordova.js files and the we need to add the script reference to main and require.js for our entry point.  After that all scripts will be loaded using AMD and require.js . </head>> &nbsp; &nbsp; &lt;head&gt;  </p>\n\n<blockquote>\n  <p>&nbsp; &nbsp; &nbsp; &nbsp; &lt;title&gt;&lt;/title&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &lt;meta charset=\"utf-8\" /&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &lt;script src=\"cordova.js\"&gt;&lt;/script&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &lt;script data-main=\"app/main\" src=\"scripts/require.js\"&gt;&lt;/script&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &lt;link href=\"kendo/styles/kendo.mobile.all.min.css\" rel=\"stylesheet\" /&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &lt;link href=\"styles/main.css\" rel=\"stylesheet\" /&gt;\n  &nbsp; &nbsp; &lt;/head&gt;Also remove the script tag at the bottom of the file that refers to the kendo.mobile.application as we have now moved that to the app.js init function.Finally, remove all <div> tag sections with a data-role of view other that the first one.  These will be separated into individual html files and stored in the views folder in Part 2 of the series.  The final html document should appear as:</div>> &lt;!DOCTYPE html&gt;\n  &lt;html&gt;\n  &nbsp; &nbsp; &lt;head&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &lt;title&gt;&lt;/title&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &lt;meta charset=\"utf-8\" /&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &lt;script src=\"cordova.js\"&gt;&lt;/script&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &lt;script data-main=\"app/main\" src=\"scripts/require.js\"&gt;&lt;/script&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &lt;link href=\"kendo/styles/kendo.mobile.all.min.css\" rel=\"stylesheet\" /&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &lt;link href=\"styles/main.css\" rel=\"stylesheet\" /&gt;\n  &nbsp; &nbsp; &lt;/head&gt;\n  &nbsp; &nbsp; &lt;body&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &lt;div data-role=\"view\" id=\"tabstrip-home\" data-title=\"Hello World!\"&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;h1&gt;Welcome!&lt;/h1&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;p&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Icenium&amp;trade; enables you to build cross-platform device applications regardless of your\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; development platform by combining the convenience of a local development toolset with the\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; power and flexibility of the cloud.\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;/p&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &lt;/div&gt;\n  &nbsp; &nbsp; &nbsp; \n  &nbsp; &nbsp; &nbsp; &nbsp; &lt;div data-role=\"layout\" data-id=\"mobile-tabstrip\"&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;header data-role=\"header\"&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;div data-role=\"navbar\"&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;span data-role=\"view-title\"&gt;&lt;/span&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;/div&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;/header&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;div data-role=\"footer\"&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;div data-role=\"tabstrip\"&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;a href=\"#tabstrip-home\" data-icon=\"home\"&gt;Home&lt;/a&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;a href=\"#tabstrip-uiinteraction\" data-icon=\"share\"&gt;UI Interaction&lt;/a&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;a href=\"#tabstrip-geolocation\" data-icon=\"globe\"&gt;Geolocation&lt;/a&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;/div&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;/div&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &lt;/div&gt;\n  &nbsp; &nbsp; &nbsp; \n  &nbsp; &nbsp; &lt;/body&gt;\n  &lt;/html&gt;</p>\n</blockquote>\n\n<h3 id=\"conclusion\">Conclusion</h3>\n\n<p>If you run the application you can see that the application still operates as it did in the very beginning, with the exception of the additional views not appearing, but the advantage here is that the overall structure allows for manageability moving forward as complexity is added to the project through data services and additional views. If there is something that you would like to see in a series or have a question please add a comment. </p>\n\n<p>Code available on GitHub - <a href='https://github.com/tattoocoder/iceniumbp.git'>https://github.com/tattoocoder/iceniumbp.git</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1364482620001,"created_by":1,"updated_at":1375364542117,"updated_by":1,"published_at":1364482620001,"published_by":1},{"id":13,"uuid":"53905f7c-bf9d-43d1-8859-212bfa8b2820","title":"Custom Routing with IRouteConstraint for ASP.NET Web API","slug":"custom_routing_with_iroute_constraint_for_asp_net_web_api_","markdown":"I will admit that Regex and I do not speak anymore. &nbsp;In fact, even when we did it was never a really nice conversation and sometimes ended in me cursing and/or leaving the room.\n\nIf you have had this same experience when creating custom routes in ASP.NET MVC then you know what I'm talking about.\n\nIRouteConstraint\nIRouteConstraint has been around for some time in MVC, but it is also available in Web API too because of course it is based on the same stack for routing.\n\nUndoubtedly, the most difficult part of routes is debugging or getting the Regex right. I recently re-lived this experience when having to create a custom API route for a project something along the lines of\n\n> /api/{controller}/**{model}**/**{road}**/**{id}**\nwhere **{model}** must exist in a list of valid string values and **{road}** is a pattern of **_XX9999_** and then obviously the **{id}** must be an integer for the specific record in the list.\n\nSo, initially you start putting the Regex together for the id, \"_^\\d+$_\", and then the road might be something like &nbsp; \"_^[a-zA-Z]{2}\\d{4}$_\". &nbsp;But how should I handle the in list for the **{model}** param? \n\nSure we could put together the Regex for that, but debugging all of this is a pain even in the short term. &nbsp;Also if the constraint itself is something of an edge case where the value must be a filename that exists, or a guid in memory etc; IRouteConstraint is the answer.\n\nIRouteConstraint requires you to implement one method, Match, which returns a boolean. In the method below we are looking for one of the values being passed in the values[] parameter to a list used in the constructor.\n\n```language-csharp\npublic class FromValuesListConstraint : IRouteConstraint\n{\n    public FromValuesListConstraint(params string[] values)\n    {\n        this._values = values;\n    }\n\n    private readonly string[] _values;\n\n    public bool Match(HttpContextBase httpContext, \n                        Route route, string parameterName, \n                        RouteValueDictionary values, \n                        RouteDirection routeDirection)\n    {\n        // Get the value called \"parameterName\" from the            \n        // RouteValueDictionary called \"value\"            \n        string value = values[parameterName].ToString();\n        // Return true is the list of allowed values contains            \n        // this value.            \n        return _values.Contains(value, StringComparer.CurrentCultureIgnoreCase);\n    }\n}\n\n```\n\nIn order to use this from the WebApiConfig.cs class, create your route like the following.\n\n```language-csharp\n config.Routes.MapHttpRoute(\n        name: \"CustomRouteNoDayOrAction\",\n        routeTemplate: \"api/{controller}/{model}/{road}/{id}\",\n        defaults: null,\n        constraints: new\n        {\n            model = new FromValuesListConstraint(\"ford\", \"chevy\", \"dodge\", \"toyota\"),\n            road = @\"^[a-zA-Z]{2}\\d{4}$\",\n            id = @\"^\\d+$\"\n        });\n\n```\n\nWhen you run and test your routes, you can now put a break point on the FromValuesListConstraint Match method and debug the routing.","html":"<p>I will admit that Regex and I do not speak anymore. &nbsp;In fact, even when we did it was never a really nice conversation and sometimes ended in me cursing and/or leaving the room.</p>\n\n<p>If you have had this same experience when creating custom routes in ASP.NET MVC then you know what I'm talking about.</p>\n\n<p>IRouteConstraint <br />\nIRouteConstraint has been around for some time in MVC, but it is also available in Web API too because of course it is based on the same stack for routing.</p>\n\n<p>Undoubtedly, the most difficult part of routes is debugging or getting the Regex right. I recently re-lived this experience when having to create a custom API route for a project something along the lines of</p>\n\n<blockquote>\n  <p>/api/{controller}/<strong>{model}</strong>/<strong>{road}</strong>/<strong>{id}</strong>\n  where <strong>{model}</strong> must exist in a list of valid string values and <strong>{road}</strong> is a pattern of <strong><em>XX9999</em></strong> and then obviously the <strong>{id}</strong> must be an integer for the specific record in the list.</p>\n</blockquote>\n\n<p>So, initially you start putting the Regex together for the id, \"<em>^\\d+$</em>\", and then the road might be something like &nbsp; \"<em>^[a-zA-Z]{2}\\d{4}$</em>\". &nbsp;But how should I handle the in list for the <strong>{model}</strong> param? </p>\n\n<p>Sure we could put together the Regex for that, but debugging all of this is a pain even in the short term. &nbsp;Also if the constraint itself is something of an edge case where the value must be a filename that exists, or a guid in memory etc; IRouteConstraint is the answer.</p>\n\n<p>IRouteConstraint requires you to implement one method, Match, which returns a boolean. In the method below we are looking for one of the values being passed in the values[] parameter to a list used in the constructor.</p>\n\n<pre><code class=\"language-csharp\">public class FromValuesListConstraint : IRouteConstraint  \n{\n    public FromValuesListConstraint(params string[] values)\n    {\n        this._values = values;\n    }\n\n    private readonly string[] _values;\n\n    public bool Match(HttpContextBase httpContext, \n                        Route route, string parameterName, \n                        RouteValueDictionary values, \n                        RouteDirection routeDirection)\n    {\n        // Get the value called \"parameterName\" from the            \n        // RouteValueDictionary called \"value\"            \n        string value = values[parameterName].ToString();\n        // Return true is the list of allowed values contains            \n        // this value.            \n        return _values.Contains(value, StringComparer.CurrentCultureIgnoreCase);\n    }\n}\n</code></pre>\n\n<p>In order to use this from the WebApiConfig.cs class, create your route like the following.</p>\n\n<pre><code class=\"language-csharp\"> config.Routes.MapHttpRoute(\n        name: \"CustomRouteNoDayOrAction\",\n        routeTemplate: \"api/{controller}/{model}/{road}/{id}\",\n        defaults: null,\n        constraints: new\n        {\n            model = new FromValuesListConstraint(\"ford\", \"chevy\", \"dodge\", \"toyota\"),\n            road = @\"^[a-zA-Z]{2}\\d{4}$\",\n            id = @\"^\\d+$\"\n        });\n</code></pre>\n\n<p>When you run and test your routes, you can now put a break point on the FromValuesListConstraint Match method and debug the routing.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1364240220000,"created_by":1,"updated_at":1421080888549,"updated_by":1,"published_at":1364240220000,"published_by":1},{"id":14,"uuid":"c72766ee-d777-4e13-8e92-3d091c567a7a","title":"South Florida Code Camp","slug":"south_florida_code_camp","markdown":"I will be giving two talks this Saturday at South Florida Code Camp, being held at Nova University in Ft. Lauderdale, Fl.  For directions and more information visithttp://www.fladotnet.com/codecamp/. Schedule for other sessions here.\n\n### My Sessions\n\n#### Introduction to ASP.NET Web API - Why you should be using it.\nThis is an introduction to ASP.NET WebAPI and how easy it is to get started and use it in your application development when building RESTful services.TypeScriptCome see how it can make you a more productive JavaScript developer or even a new one. I'll cover the core concepts, compare JavaScript practices and even show how to use in a Windows 8 app.","html":"<p>I will be giving two talks this Saturday at South Florida Code Camp, being held at Nova University in Ft. Lauderdale, Fl.  For directions and more information visit<a href='http://www.fladotnet.com/codecamp/'>http://www.fladotnet.com/codecamp/</a>. Schedule for other sessions here.</p>\n\n<h3 id=\"mysessions\">My Sessions</h3>\n\n<h4 id=\"introductiontoaspnetwebapiwhyyoushouldbeusingit\">Introduction to ASP.NET Web API - Why you should be using it.</h4>\n\n<p>This is an introduction to ASP.NET WebAPI and how easy it is to get started and use it in your application development when building RESTful services.TypeScriptCome see how it can make you a more productive JavaScript developer or even a new one. I'll cover the core concepts, compare JavaScript practices and even show how to use in a Windows 8 app.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1360179000002,"created_by":1,"updated_at":1360179047862,"updated_by":1,"published_at":1360179000002,"published_by":1},{"id":15,"uuid":"3850af8e-a177-4bc3-a181-970e2fac96a1","title":"Develop Windows 8 & Windows Phone Apps and Win Cash!","slug":"develop_windows_8_windows_phone_apps_and_win_cash_","markdown":"[![](http://2.bp.blogspot.com/-RuEhEuOF9II/UQviniGXzGI/AAAAAAAAAeQ/PaklV1P0_w4/s1600/AppSweepstakes_150x290.jpg)](http://spboyer.me/appsforcash) From February 1 through June 2013, publish a new Windows 8 or Windows Phone app and enter my sweepstakes page to win up to $1000 in cash prizes.  WHAT?!?!  \nPretty cool right.  Get extra $$ for what you are already doing.  Publish you app in the store the go to http://spboyer.me/appsforcash and submit your app.\n3 Winners each month!\n$1000\n$500\n$250\nFollow me on twitter @spboyer and let me know when you submit it and I'll personally look at the app and give it a review and let all my friends to give it a look as well for extra exposure.\nSee official rules here\n\n### BONUS POINTS AND AWARDS\n\n#### FREE NOKIA PHONE\nIf this is your FIRST Windows Phone App you may qualify for a Free Nokia Lumia Phone.\n\n#### TELERIK WINDOWS 8 Controls\nI will pick 1 Winner each month from the Windows 8 Submissions to receive a free licensed copy of Telerik's Windows 8 Controls","html":"<p><a href=\"http://spboyer.me/appsforcash\"><img src=\"http://2.bp.blogspot.com/-RuEhEuOF9II/UQviniGXzGI/AAAAAAAAAeQ/PaklV1P0_w4/s1600/AppSweepstakes_150x290.jpg\" alt=\"\" title=\"\" /></a> From February 1 through June 2013, publish a new Windows 8 or Windows Phone app and enter my sweepstakes page to win up to $1000 in cash prizes.  WHAT?!?!  \nPretty cool right.  Get extra $$ for what you are already doing.  Publish you app in the store the go to <a href='http://spboyer.me/appsforcash'>http://spboyer.me/appsforcash</a> and submit your app. <br />\n3 Winners each month! <br />\n$1000\n$500\n$250\nFollow me on twitter @spboyer and let me know when you submit it and I'll personally look at the app and give it a review and let all my friends to give it a look as well for extra exposure. <br />\nSee official rules here</p>\n\n<h3 id=\"bonuspointsandawards\">BONUS POINTS AND AWARDS</h3>\n\n<h4 id=\"freenokiaphone\">FREE NOKIA PHONE</h4>\n\n<p>If this is your FIRST Windows Phone App you may qualify for a Free Nokia Lumia Phone.</p>\n\n<h4 id=\"telerikwindows8controls\">TELERIK WINDOWS 8 Controls</h4>\n\n<p>I will pick 1 Winner each month from the Windows 8 Submissions to receive a free licensed copy of Telerik's Windows 8 Controls</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1359734100001,"created_by":1,"updated_at":1367853483046,"updated_by":1,"published_at":1359734100001,"published_by":1},{"id":16,"uuid":"a8184bbc-d630-482c-9068-b7b9b77613da","title":"Nothing great was ever achieved without enthusiasm...","slug":"nothing_great_was_ever_achieved_without_enthusiasm_","markdown":"Over the past month I have had the opportunity to give some thought to what I wanted to accomplish this year in my life, career, and health. And during those times of thought I have often gone back to a speech I listened or re-listened to by the late [Jimmy Valvano](http://en.wikipedia.org/wiki/Jim_Valvano).\nJimmy V was a great college basketball coach and was unfortunately diagnosed and later passed away from bone cancer. But shortly before his death he gave a riveting speech at the 1993 ESPN ESPY Awards. There are some great things he said, but one statement lost in many outtakes that stuck with me was \"Nothing great was ever achieved without enthusiasm\" ...Ralph Waldo EmersonI think about that statement and how it relates to life, but also how I approach code, software development and teaching. Enthusiasm is the name of the game.  I'm passionate in how I present it, teach it, talk about it and code it. The question I have always wondered is how can the few of us who think this way make that feeling contagious? Spread that disease?I know how I feel after taking a good 5 mile run or so and beating a goal or my last time thinking, \"hell yes!\" and that's the same feeling I get when a project is complete or I inspire a developer to do something different or try a new path and then later they tell me \"thanks, just what I needed\".Recently, after a .NET User Group meeting I sat and had a beer with a few friends from the group and we had this very discussion and the conversation was really good.  I heard stuff like...\"It's not their project....\"\"...making the other guy money, why be passionate\"\"...some companies are better at making their devs feel ownership...\"What are your thoughts?  What can make you more enthusiastic or pump up that 9-5'er you know at your office?Start the conversation....","html":"<p>Over the past month I have had the opportunity to give some thought to what I wanted to accomplish this year in my life, career, and health. And during those times of thought I have often gone back to a speech I listened or re-listened to by the late <a href=\"http://en.wikipedia.org/wiki/Jim_Valvano\">Jimmy Valvano</a>. <br />\nJimmy V was a great college basketball coach and was unfortunately diagnosed and later passed away from bone cancer. But shortly before his death he gave a riveting speech at the 1993 ESPN ESPY Awards. There are some great things he said, but one statement lost in many outtakes that stuck with me was \"Nothing great was ever achieved without enthusiasm\" ...Ralph Waldo EmersonI think about that statement and how it relates to life, but also how I approach code, software development and teaching. Enthusiasm is the name of the game.  I'm passionate in how I present it, teach it, talk about it and code it. The question I have always wondered is how can the few of us who think this way make that feeling contagious? Spread that disease?I know how I feel after taking a good 5 mile run or so and beating a goal or my last time thinking, \"hell yes!\" and that's the same feeling I get when a project is complete or I inspire a developer to do something different or try a new path and then later they tell me \"thanks, just what I needed\".Recently, after a .NET User Group meeting I sat and had a beer with a few friends from the group and we had this very discussion and the conversation was really good.  I heard stuff like...\"It's not their project....\"\"...making the other guy money, why be passionate\"\"...some companies are better at making their devs feel ownership...\"What are your thoughts?  What can make you more enthusiastic or pump up that 9-5'er you know at your office?Start the conversation....</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1359474120002,"created_by":1,"updated_at":1367853544706,"updated_by":1,"published_at":1359474120002,"published_by":1},{"id":17,"uuid":"258aa052-df69-46e2-ac1a-652f074119fc","title":"Portable MVVM Light - Move Your View Models : Part 2","slug":"portable_mvvm_light_move_your_view_models_part_2","markdown":"In the [first part](http://blog.tattoocoder.com/2013/01/portable-mvvm-light-move-your-view.html) I covered how to get the initial project setup and share the ViewModels and ViewModelLocator between a Windows Phone 8 project and a Windows Store Application. &nbsp;In this post, I'll add a DataService and a Model class that will be used to get the most recent posts from the Windows Phone Blog and display the results.\n\n### Adding DataService and Async to Portable Class Library\nThe purpose of the DataService in the context of this project is to retrieve the RSS feed from the Windows Phone Blog ([http://blogs.windows.com/windows_phone/b/wpdev/rss.aspx](http://blogs.windows.com/windows_phone/b/wpdev/rss.aspx)) using the async methods available in the 4.5 Framework, return a collection of our Headline class object for the UI to handle and display.\n\n#### Headline Class Model\nThe Headline class is the object that will be loaded and a collection of these will be built and returned from the data service method. &nbsp;Create a new folder in the Mvvm.PCL project called \"Model\" and add a new file called Headline.cs.\n\n> &nbsp; &nbsp; public class Headline\n> &nbsp; &nbsp; {\n> &nbsp; &nbsp; &nbsp; &nbsp; public string Title { get; set; }\n> &nbsp; &nbsp; &nbsp; &nbsp; public string Description { get; set; }\n> &nbsp; &nbsp; &nbsp; &nbsp; public string Url { get; set; }\n> &nbsp; &nbsp; &nbsp; &nbsp; public DateTime Published { get; set; }\n> &nbsp; &nbsp; }\n\n#### IDataService\nIn good practice, create an interface for the DataService class. &nbsp;This would allow for taking advantage of dependency injection if you chose to do so. Add a new interface file to the model folder called IDataService.cs. &nbsp;Here is the interface:\n\n> namespace Mvvm.PCL.Model\n> {\n>  public interface IDataService\n>  {\n>   void GetHeadlines(Action&lt;List&lt;Headline&gt;, Exception&gt; callback);\n>  }\n> }\nThe interface defines a single method that accepts a delegate with a collections or List&lt;T&gt; of Headline and an Exception parameter.\n\n#### DataService\nNext, in the same folder, add the DataService.cs file and implement the interface.\n\n> &nbsp; &nbsp; public class DataService : IDataService\n> &nbsp; &nbsp; {\n> &nbsp; &nbsp; &nbsp; &nbsp; public void GetHeadlines(Action&lt;List&lt;Headline&gt;, Exception&gt; callback)\n> &nbsp; &nbsp; &nbsp; &nbsp; {\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; throw new NotImplementedException();\n> &nbsp; &nbsp; &nbsp; &nbsp; }\n> &nbsp; &nbsp; }\n\n#### HttpWebRequest\nMost simple requests for data are done with the [WebClient ](http://msdn.microsoft.com/en-us/library/system.net.webclient(v=vs.110).aspx)class, however this class is not available in Portable Class libraries and is really only an abstraction of what must be used and that is the HttpWebRequest.\n\nAdd a new method to the class called MakeAsyncRequest accepting a url (string) as a parameter and set the method to return a Task&lt;string&gt;. Within the method I'll use the Task.Factory.FromAsync method to call the url&nbsp;asynchronously&nbsp;returning the Task&lt;WebRequest&gt; then use a continuation to read the WebResponse.\n\n> &nbsp; &nbsp; &nbsp; &nbsp; private static Task&lt;string&gt; MakeAsyncRequest(string url)\n> &nbsp; &nbsp; &nbsp; &nbsp; {\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; HttpWebRequest request = WebRequest.CreateHttp(url);\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; request.Method = \"GET\";\n> \n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Task&lt;WebResponse&gt; task = Task.Factory.FromAsync(\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; request.BeginGetResponse,\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (asyncResult) =&gt; request.EndGetResponse(asyncResult),\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (object)null);\n> \n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return task.ContinueWith(t =&gt; ReadStreamFromResponse(t.Result));\n> &nbsp; &nbsp; &nbsp; &nbsp; }\n> &nbsp; &nbsp; &nbsp; &nbsp; private static string ReadStreamFromResponse(WebResponse response)\n> &nbsp; &nbsp; &nbsp; &nbsp; {\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; using (Stream responseStream = response.GetResponseStream())\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; using (StreamReader sr = new StreamReader(responseStream))\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; string strContent = sr.ReadToEnd();\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return strContent;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n> &nbsp; &nbsp; &nbsp; &nbsp; }\nThe GetHeadlines method can now be completed. First add the static url.\n\n> &nbsp;private readonly string uri = \"[http://blogs.windows.com/windows_phone/b/wpdev/rss.aspx](http://blogs.windows.com/windows_phone/b/wpdev/rss.aspx)\";\n\nThen declare a variable to hold the results of the MakeAsyncRequest method and set the call with the await keyword so the UI thread is not blocked.\n\n> var t = **await **MakeAsyncRequest(uri);\nYou will also have to mark the method as async or the compiler will give you an error telling you to do so.\n\n> public **async **void GetHeadlines(Action&lt;List&lt;Headline&gt;, Exception&gt; callback)\n> {\n> ...\n> }\nThe results returned are a string type and there are a couple of options to get it into a nice format to work with. &nbsp;Your first option might be to use the Silverlight [SyndicationFeed ](http://msdn.microsoft.com/en-us/library/system.servicemodel.syndication.syndicationfeed(v=vs.110).aspx)class which is in the System.ServiceModel.Syndication namespace. However, it is not inherently available in the portable classes and you'll need to go searching for it on your dev machine. **Hint **(_C:\\Program Files (x86)\\Microsoft SDKs\\Silverlight\\v4.0\\Libraries\\Client\\System.ServiceModel.Syndication.dll_).\n\nI'm choosing to use LINQ and doing Linq to XML here to get what I need out of the results string and inflate my classes and return it.\n\nHere is the completed method.\n\n> &nbsp; &nbsp; &nbsp; &nbsp; public async void GetHeadlines(Action&lt;List&lt;Headline&gt;, Exception&gt; callback)\n> &nbsp; &nbsp; &nbsp; &nbsp; {\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // locally scoped exception var\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Exception err = null;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; List&lt;Headline&gt; results = null;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var t = await MakeAsyncRequest(uri);\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; StringReader stringReader = new StringReader(t);\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; using (var xmlReader = System.Xml.XmlReader.Create(stringReader))\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var doc = System.Xml.Linq.XDocument.Load(xmlReader);\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; results = (from e in doc.Element(\"rss\").Element(\"channel\").Elements(\"item\")\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;select\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;new Headline()\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Title = e.Element(\"title\").Value,\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Description = e.Element(\"description\").Value,\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Published = Convert.ToDateTime(e.Element(\"pubDate\").Value),\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Url = e.Element(\"link\").Value\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}).ToList();\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; catch (Exception ex)\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // should do some other\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // logging here. for now pass off\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // exception to callback on UI\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; err = ex;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; callback(results, err);\n> &nbsp; &nbsp; &nbsp; &nbsp; }\n\nThat covers all of the code needed in the Portable Class(es) for getting the data, just need to edit the MainViewModel class constructor to create the DataService class, implement the new method and create a Headlines property.\n\nMainViewModel\nAdd a new property for the headlines to be bound to by the UI.\n\n> &nbsp; &nbsp; &nbsp; &nbsp; private List&lt;Model.Headline&gt; _headlines;\n> &nbsp; &nbsp; &nbsp; &nbsp; public List&lt;Model.Headline&gt; Headlines\n> &nbsp; &nbsp; &nbsp; &nbsp; {\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; get { return _headlines; }\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; set\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _headlines = value;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RaisePropertyChanged(() =&gt; Headlines);\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n> &nbsp; &nbsp; &nbsp; &nbsp; }\nIn the constructor, create an instance of the DataService and execute the method. &nbsp;I did mention earlier that there is an IDataService for DI, but for this example an concrete DataService class is created.\n\n> &nbsp; &nbsp; &nbsp; &nbsp; public MainViewModel()\n> &nbsp; &nbsp; &nbsp; &nbsp; {\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /// create a new dataservice class\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var service = new DataService();\n> &nbsp; &nbsp; &nbsp; &nbsp; \n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /// call getHeadlines passing headlines and exception delegate vars\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; service.GetHeadlines((headlines, err) =&gt; {\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (err != null)\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /// if there is an error should create a property and bind to it for better practices\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.Diagnostics.Debug.WriteLine(err.ToString());\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /// set the property\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.Headlines = headlines;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; });\n> &nbsp; &nbsp; &nbsp; &nbsp; }\n\n### Adding the UI Elements\n\n#### Windows Phone\nOpen the MainPage.xaml page and wrap the previous TextBlock from part 1 in a StackPanel then add a ListBox. &nbsp;Set the ItemsSource property of the ListBox to {Binding Headlines, Mode=TwoWay}, then add a simple template with a TextBlock to show the title of the story.\n\n> &nbsp; &nbsp; &nbsp; &nbsp; &lt;Grid x:Name=\"ContentPanel\" Grid.Row=\"1\" Margin=\"12,0,12,0\"&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;StackPanel&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;TextBlock Text=\"{Binding Hello, Mode=TwoWay}\" Foreground=\"White\" FontSize=\"18\" /&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;ListBox ItemsSource=\"{Binding Headlines, Mode=TwoWay}\"&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;ListBox.ItemTemplate&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;DataTemplate&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;ListBoxItem&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;TextBlock Text=\"{Binding Title}\" /&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;/ListBoxItem&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;/DataTemplate&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;/ListBox.ItemTemplate&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;/ListBox&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;/StackPanel&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &lt;/Grid&gt;\n\n#### Windows Store\nThe store app is just as easy. &nbsp;In MainPage.xaml, add a GridView controls, set the ItemsSource to {Binding Headlines, Mode=TwoWay}, but in this case I'll define an ItemTemplate outside of the control called PCLItemTemplate and display the Title and the Description.\n\n> &nbsp; &nbsp; &nbsp; &nbsp; &lt;GridView ItemsSource=\"{Binding Headlines, Mode=TwoWay}\" Grid.Row=\"1\" ItemTemplate=\"{StaticResource PCLItemTemplate}\" /&gt;&nbsp; &nbsp; &nbsp; \n\n> &nbsp; &nbsp; &lt;Page.Resources&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &lt;DataTemplate x:Key=\"PCLItemTemplate\"&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;StackPanel Orientation=\"Vertical\" Width=\"500\" Height=\"250\"&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;TextBlock Foreground=\"White\" Text=\"{Binding Title}\" FontSize=\"18\" HorizontalAlignment=\"Center\" Margin=\"20,10,20,0\" TextTrimming=\"WordEllipsis\"/&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;TextBlock Foreground=\"White\" Text=\"{Binding Description}\" Style=\"{StaticResource ItemTextStyle}\" HorizontalAlignment=\"Center\" Margin=\"20,10\" TextTrimming=\"WordEllipsis\"/&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;/StackPanel&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &lt;/DataTemplate&gt;\n> &nbsp; &nbsp; &lt;/Page.Resources&gt;\n\n### Summary\n[![](http://1.bp.blogspot.com/-9yQ5miGqCYE/UQbdx9-_i9I/AAAAAAAAAdc/Vzy7H6Ki8SE/s200/portable2_wp.PNG)](http://1.bp.blogspot.com/-9yQ5miGqCYE/UQbdx9-_i9I/AAAAAAAAAdc/Vzy7H6Ki8SE/s1600/portable2_wp.PNG)&nbsp;Running either apps presents the data in a different context and there is complete control as to the presentation and design choices based on the platform. &nbsp;If you are looking to create Windows Store apps and/or Windows Phone&nbsp;applications&nbsp; Portable Class Libraries is a great way to leverage code within your multiple platform target solution. &nbsp;MvvmLight is a choice of mine and many others and fits very well too thanks to others in the community.\n\nFull source code available here:&nbsp;[http://sdrv.ms/WpBGqS](http://sdrv.ms/WpBGqS)","html":"<p>In the <a href=\"http://blog.tattoocoder.com/2013/01/portable-mvvm-light-move-your-view.html\">first part</a> I covered how to get the initial project setup and share the ViewModels and ViewModelLocator between a Windows Phone 8 project and a Windows Store Application. &nbsp;In this post, I'll add a DataService and a Model class that will be used to get the most recent posts from the Windows Phone Blog and display the results.</p>\n\n<h3 id=\"addingdataserviceandasynctoportableclasslibrary\">Adding DataService and Async to Portable Class Library</h3>\n\n<p>The purpose of the DataService in the context of this project is to retrieve the RSS feed from the Windows Phone Blog (<a href=\"http://blogs.windows.com/windows_phone/b/wpdev/rss.aspx\">http://blogs.windows.com/windows_phone/b/wpdev/rss.aspx</a>) using the async methods available in the 4.5 Framework, return a collection of our Headline class object for the UI to handle and display.</p>\n\n<h4 id=\"headlineclassmodel\">Headline Class Model</h4>\n\n<p>The Headline class is the object that will be loaded and a collection of these will be built and returned from the data service method. &nbsp;Create a new folder in the Mvvm.PCL project called \"Model\" and add a new file called Headline.cs.</p>\n\n<blockquote>\n  <p>&nbsp; &nbsp; public class Headline\n  &nbsp; &nbsp; {\n  &nbsp; &nbsp; &nbsp; &nbsp; public string Title { get; set; }\n  &nbsp; &nbsp; &nbsp; &nbsp; public string Description { get; set; }\n  &nbsp; &nbsp; &nbsp; &nbsp; public string Url { get; set; }\n  &nbsp; &nbsp; &nbsp; &nbsp; public DateTime Published { get; set; }\n  &nbsp; &nbsp; }</p>\n</blockquote>\n\n<h4 id=\"idataservice\">IDataService</h4>\n\n<p>In good practice, create an interface for the DataService class. &nbsp;This would allow for taking advantage of dependency injection if you chose to do so. Add a new interface file to the model folder called IDataService.cs. &nbsp;Here is the interface:</p>\n\n<blockquote>\n  <p>namespace Mvvm.PCL.Model\n  {\n   public interface IDataService\n   {\n    void GetHeadlines(Action&lt;List&lt;Headline&gt;, Exception&gt; callback);\n   }\n  }\n  The interface defines a single method that accepts a delegate with a collections or List&lt;T&gt; of Headline and an Exception parameter.</p>\n</blockquote>\n\n<h4 id=\"dataservice\">DataService</h4>\n\n<p>Next, in the same folder, add the DataService.cs file and implement the interface.</p>\n\n<blockquote>\n  <p>&nbsp; &nbsp; public class DataService : IDataService\n  &nbsp; &nbsp; {\n  &nbsp; &nbsp; &nbsp; &nbsp; public void GetHeadlines(Action&lt;List&lt;Headline&gt;, Exception&gt; callback)\n  &nbsp; &nbsp; &nbsp; &nbsp; {\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; throw new NotImplementedException();\n  &nbsp; &nbsp; &nbsp; &nbsp; }\n  &nbsp; &nbsp; }</p>\n</blockquote>\n\n<h4 id=\"httpwebrequest\">HttpWebRequest</h4>\n\n<p>Most simple requests for data are done with the <a href=\"http://msdn.microsoft.com/en-us/library/system.net.webclient(v=vs.110).aspx\">WebClient </a>class, however this class is not available in Portable Class libraries and is really only an abstraction of what must be used and that is the HttpWebRequest.</p>\n\n<p>Add a new method to the class called MakeAsyncRequest accepting a url (string) as a parameter and set the method to return a Task&lt;string&gt;. Within the method I'll use the Task.Factory.FromAsync method to call the url&nbsp;asynchronously&nbsp;returning the Task&lt;WebRequest&gt; then use a continuation to read the WebResponse.</p>\n\n<blockquote>\n  <p>&nbsp; &nbsp; &nbsp; &nbsp; private static Task&lt;string&gt; MakeAsyncRequest(string url)\n  &nbsp; &nbsp; &nbsp; &nbsp; {\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; HttpWebRequest request = WebRequest.CreateHttp(url);\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; request.Method = \"GET\";</p>\n  \n  <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Task&lt;WebResponse&gt; task = Task.Factory.FromAsync(\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; request.BeginGetResponse,\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (asyncResult) =&gt; request.EndGetResponse(asyncResult),\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (object)null);</p>\n  \n  <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return task.ContinueWith(t =&gt; ReadStreamFromResponse(t.Result));\n  &nbsp; &nbsp; &nbsp; &nbsp; }\n  &nbsp; &nbsp; &nbsp; &nbsp; private static string ReadStreamFromResponse(WebResponse response)\n  &nbsp; &nbsp; &nbsp; &nbsp; {\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; using (Stream responseStream = response.GetResponseStream())\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; using (StreamReader sr = new StreamReader(responseStream))\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; string strContent = sr.ReadToEnd();\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return strContent;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n  &nbsp; &nbsp; &nbsp; &nbsp; }\n  The GetHeadlines method can now be completed. First add the static url.</p>\n  \n  <p>&nbsp;private readonly string uri = \"<a href=\"http://blogs.windows.com/windows_phone/b/wpdev/rss.aspx\">http://blogs.windows.com/windows_phone/b/wpdev/rss.aspx</a>\";</p>\n</blockquote>\n\n<p>Then declare a variable to hold the results of the MakeAsyncRequest method and set the call with the await keyword so the UI thread is not blocked.</p>\n\n<blockquote>\n  <p>var t = <em>*await *</em>MakeAsyncRequest(uri);\n  You will also have to mark the method as async or the compiler will give you an error telling you to do so.</p>\n  \n  <p>public <em>*async *</em>void GetHeadlines(Action&lt;List&lt;Headline&gt;, Exception&gt; callback)\n  {\n  ...\n  }\n  The results returned are a string type and there are a couple of options to get it into a nice format to work with. &nbsp;Your first option might be to use the Silverlight <a href=\"http://msdn.microsoft.com/en-us/library/system.servicemodel.syndication.syndicationfeed(v=vs.110).aspx\">SyndicationFeed </a>class which is in the System.ServiceModel.Syndication namespace. However, it is not inherently available in the portable classes and you'll need to go searching for it on your dev machine. <em>*Hint *</em>(<em>C:\\Program Files (x86)\\Microsoft SDKs\\Silverlight\\v4.0\\Libraries\\Client\\System.ServiceModel.Syndication.dll</em>).</p>\n</blockquote>\n\n<p>I'm choosing to use LINQ and doing Linq to XML here to get what I need out of the results string and inflate my classes and return it.</p>\n\n<p>Here is the completed method.</p>\n\n<blockquote>\n  <p>&nbsp; &nbsp; &nbsp; &nbsp; public async void GetHeadlines(Action&lt;List&lt;Headline&gt;, Exception&gt; callback)\n  &nbsp; &nbsp; &nbsp; &nbsp; {\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // locally scoped exception var\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Exception err = null;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; List&lt;Headline&gt; results = null;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var t = await MakeAsyncRequest(uri);\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; StringReader stringReader = new StringReader(t);\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; using (var xmlReader = System.Xml.XmlReader.Create(stringReader))\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var doc = System.Xml.Linq.XDocument.Load(xmlReader);\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; results = (from e in doc.Element(\"rss\").Element(\"channel\").Elements(\"item\")\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;select\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;new Headline()\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Title = e.Element(\"title\").Value,\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Description = e.Element(\"description\").Value,\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Published = Convert.ToDateTime(e.Element(\"pubDate\").Value),\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Url = e.Element(\"link\").Value\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}).ToList();\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; catch (Exception ex)\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // should do some other\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // logging here. for now pass off\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // exception to callback on UI\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; err = ex;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; callback(results, err);\n  &nbsp; &nbsp; &nbsp; &nbsp; }</p>\n</blockquote>\n\n<p>That covers all of the code needed in the Portable Class(es) for getting the data, just need to edit the MainViewModel class constructor to create the DataService class, implement the new method and create a Headlines property.</p>\n\n<p>MainViewModel <br />\nAdd a new property for the headlines to be bound to by the UI.</p>\n\n<blockquote>\n  <p>&nbsp; &nbsp; &nbsp; &nbsp; private List&lt;Model.Headline&gt; _headlines;\n  &nbsp; &nbsp; &nbsp; &nbsp; public List&lt;Model.Headline&gt; Headlines\n  &nbsp; &nbsp; &nbsp; &nbsp; {\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; get { return _headlines; }\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; set\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _headlines = value;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RaisePropertyChanged(() =&gt; Headlines);\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n  &nbsp; &nbsp; &nbsp; &nbsp; }\n  In the constructor, create an instance of the DataService and execute the method. &nbsp;I did mention earlier that there is an IDataService for DI, but for this example an concrete DataService class is created.</p>\n  \n  <p>&nbsp; &nbsp; &nbsp; &nbsp; public MainViewModel()\n  &nbsp; &nbsp; &nbsp; &nbsp; {\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /// create a new dataservice class\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var service = new DataService();\n  &nbsp; &nbsp; &nbsp; &nbsp; \n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /// call getHeadlines passing headlines and exception delegate vars\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; service.GetHeadlines((headlines, err) =&gt; {\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (err != null)\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /// if there is an error should create a property and bind to it for better practices\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.Diagnostics.Debug.WriteLine(err.ToString());\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /// set the property\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.Headlines = headlines;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; });\n  &nbsp; &nbsp; &nbsp; &nbsp; }</p>\n</blockquote>\n\n<h3 id=\"addingtheuielements\">Adding the UI Elements</h3>\n\n<h4 id=\"windowsphone\">Windows Phone</h4>\n\n<p>Open the MainPage.xaml page and wrap the previous TextBlock from part 1 in a StackPanel then add a ListBox. &nbsp;Set the ItemsSource property of the ListBox to {Binding Headlines, Mode=TwoWay}, then add a simple template with a TextBlock to show the title of the story.</p>\n\n<blockquote>\n  <p>&nbsp; &nbsp; &nbsp; &nbsp; &lt;Grid x:Name=\"ContentPanel\" Grid.Row=\"1\" Margin=\"12,0,12,0\"&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;StackPanel&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;TextBlock Text=\"{Binding Hello, Mode=TwoWay}\" Foreground=\"White\" FontSize=\"18\" /&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;ListBox ItemsSource=\"{Binding Headlines, Mode=TwoWay}\"&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;ListBox.ItemTemplate&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;DataTemplate&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;ListBoxItem&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;TextBlock Text=\"{Binding Title}\" /&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;/ListBoxItem&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;/DataTemplate&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;/ListBox.ItemTemplate&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;/ListBox&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;/StackPanel&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &lt;/Grid&gt;</p>\n</blockquote>\n\n<h4 id=\"windowsstore\">Windows Store</h4>\n\n<p>The store app is just as easy. &nbsp;In MainPage.xaml, add a GridView controls, set the ItemsSource to {Binding Headlines, Mode=TwoWay}, but in this case I'll define an ItemTemplate outside of the control called PCLItemTemplate and display the Title and the Description.</p>\n\n<blockquote>\n  <p>&nbsp; &nbsp; &nbsp; &nbsp; &lt;GridView ItemsSource=\"{Binding Headlines, Mode=TwoWay}\" Grid.Row=\"1\" ItemTemplate=\"{StaticResource PCLItemTemplate}\" /&gt;&nbsp; &nbsp; &nbsp; </p>\n  \n  <p>&nbsp; &nbsp; &lt;Page.Resources&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &lt;DataTemplate x:Key=\"PCLItemTemplate\"&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;StackPanel Orientation=\"Vertical\" Width=\"500\" Height=\"250\"&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;TextBlock Foreground=\"White\" Text=\"{Binding Title}\" FontSize=\"18\" HorizontalAlignment=\"Center\" Margin=\"20,10,20,0\" TextTrimming=\"WordEllipsis\"/&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;TextBlock Foreground=\"White\" Text=\"{Binding Description}\" Style=\"{StaticResource ItemTextStyle}\" HorizontalAlignment=\"Center\" Margin=\"20,10\" TextTrimming=\"WordEllipsis\"/&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;/StackPanel&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &lt;/DataTemplate&gt;\n  &nbsp; &nbsp; &lt;/Page.Resources&gt;</p>\n</blockquote>\n\n<h3 id=\"summary\">Summary</h3>\n\n<p><a href=\"http://1.bp.blogspot.com/-9yQ5miGqCYE/UQbdx9-_i9I/AAAAAAAAAdc/Vzy7H6Ki8SE/s1600/portable2_wp.PNG\"><img src=\"http://1.bp.blogspot.com/-9yQ5miGqCYE/UQbdx9-_i9I/AAAAAAAAAdc/Vzy7H6Ki8SE/s200/portable2_wp.PNG\" alt=\"\" title=\"\" /></a>&nbsp;Running either apps presents the data in a different context and there is complete control as to the presentation and design choices based on the platform. &nbsp;If you are looking to create Windows Store apps and/or Windows Phone&nbsp;applications&nbsp; Portable Class Libraries is a great way to leverage code within your multiple platform target solution. &nbsp;MvvmLight is a choice of mine and many others and fits very well too thanks to others in the community.</p>\n\n<p>Full source code available here:&nbsp;<a href=\"http://sdrv.ms/WpBGqS\">http://sdrv.ms/WpBGqS</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1359404700000,"created_by":1,"updated_at":1367853573384,"updated_by":1,"published_at":1359404700000,"published_by":1},{"id":18,"uuid":"fe44b8c5-d112-4f57-84ec-0218f62c8d71","title":"Portable MVVM Light - Move Your View Models","slug":"portable_mvvm_light_move_your_view_models_","markdown":" \n\n### Portable Class Libraries&nbsp;\nPortable Class Libraries were added as a project type in the interest of creating an assembly that you could use across the .NET Framework, Silverlight, Windows Phone 7, or Xbox 360 platforms without modifications. &nbsp;Well, not really that easy. &nbsp;There is some work to do and as you get into the development of PCLs you'll find out that there is really a sliver of what you'd hope is supported. ([http://msdn.microsoft.com/en-us/library/vstudio/gg597391(v=vs.110).aspx](http://msdn.microsoft.com/en-us/library/vstudio/gg597391(v=vs.110).aspx))\n\n### MVVM Light\nWhere I have found it for me is in Windows Store and Windows Phone (7.5 and 8) with [MVVM Light](http://mvvmlight.codeplex.com/). I have been using this MVVM framework exclusively for a few years now on Silverlight, WPF, Windows Phone and now Windows Store platforms and each release gets better.\n\nMost recently, another MVVM Light fan, [Oren Novotny](http://novotny.org/blog)&nbsp;([@onovotny](http://twitter.com/onovotny)) ported the MVVM Light project and made it possible to use it in a Portable Class Library. This is great, code reuse is the ultimate time saver. And when developing Windows Store Apps or a Windows Phone App; making a complimentary piece for the other just makes sense when the UI is really the only difference and even that is almost the same.\n\n### Example Project\nOpen Visual Studio 2012 and create a new project. &nbsp;I like to start with the \"**_Other Project Types_**\" and select the Blank Visual Studio Solution; name it **MvvmPortable **and click save. Next add a Windows Store App (C# Blank Template) and call it **Mvvm.Store**. Add a new Windows Phone 8 project to the solution named **Mvvm.Phone**.\n\nNow add a new project to the solution and select the \"_Portable Class Library_\" project type.\n\nClick OK and then you'll be presented with a dialog to choose the platforms to be supported. Select all except XBox and for **Windows Phone choose 7.5 or higher**. (_An error will occur when adding the nuget packages later if the 'Windows Phone 7.1 or higher' option is chosen_).\n\nClick OK and now the MVVM Light packages can start to be added via nuget.\n\n### Nuget\nIf you are &nbsp;not using nuget, please pause here and go to [nuget.org](http://nuget.org/) and/or install via Tools-&gt;Extensions And Updates.\n\nMvvm.PCL Project\nRight click the project and select the Manage Nuget Packages and in the dialog search for \"**Portable.MvvmLightLibs**\" and be sure that the Include Pre-release option is on, or you can use the package manager console and use the command **_install package portable.mvvmlightlibs -prerelease_**.\n\nRepeat this process for the Windows Phone and Windows Store projects.\n\nNext we need to add the MVVM Light specific platform assemblies to each of the respective platforms and do some setup and cleanup to make this all work.\n\nRight Click the Windows Store project, select Manage Nuget Packages and search for MVVM Light and click the install button. In doing so, a few folders and files will be added to the project and you may see some errors which we'll clean up and repeat the process for the Phone project.\n\n### Moving ViewModelLocator,ViewModels and Wiring it Up\nNow on to the fun! In the Mvvm.PCL project create a folder call ViewModel in the root of the project. Then expand the  ViewModel folder in the Mvvm.Store project and select the ViewModelLocator.cs and MainViewModel.cs file and cut and paste those to the ViewModel folder in the Mvvm.PCL project.Open each of those and change the namespace to Mvvm.PCL.ViewModel from Mvvm.Store.ViewModel.Since the ViewModelLocator has moved, the store app needs to know where to find it and the ViewModels, so open the App.xaml file in the Mvvm.Store project and change:> &nbsp;xmlns:vm=\"using:Mvvm.Store.ViewModel\"&nbsp;to\n\n> &nbsp;xmlns:vm=\"using:Mvvm.PCL.ViewModel\"&nbsp;\nand we need to modify the Resources section because the nuget installer for MvvmLight puts in some extra entries for the ViewModelLocator\n\n> &nbsp; &nbsp; &lt;ResourceDictionary&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &lt;vm:ViewModelLocator p7:Key=\"Locator\" p8:IsDataSource=\"True\"\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; xmlns:p8=\"http://schemas.microsoft.com/expression/blend/2008\"\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; xmlns:p7=\"http://schemas.microsoft.com/winfx/2006/xaml\" /&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &lt;ResourceDictionary.MergedDictionaries&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;!--\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Styles that define common aspects of the platform look and feel\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Required by Visual Studio project and item templates\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;--&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;ResourceDictionary Source=\"Common/StandardStyles.xaml\" /&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &lt;/ResourceDictionary.MergedDictionaries&gt;\n> &nbsp; &nbsp; \n> &nbsp; &nbsp; &lt;/ResourceDictionary&gt;\nFinally for the Store app we'll go to the MainPage.xaml and set the DataContext and add a TextBlock to be filled from the MainViewModel.cs in the portable class library that we'll add following that.\n\nIn the MainView.xaml page add the DataContext property at the top of the page after the other declarations.\n\n> &nbsp; &nbsp; ...\n> &nbsp; &nbsp; xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n> &nbsp; &nbsp; mc:Ignorable=\"d\"\n> &nbsp; &nbsp; DataContext=\"{Binding Main, Source={StaticResource Locator}}\"\n> &nbsp; &nbsp; &gt;Next in the grid add the TextBlock as follows\n\n> &nbsp; &nbsp; &lt;Grid Background=\"{StaticResource ApplicationPageBackgroundThemeBrush}\"&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &lt;TextBlock Foreground=\"White\" FontSize=\"42\" Text=\"{Binding Hello, Mode=TwoWay}\" /&gt;\n> &nbsp; &nbsp; &lt;/Grid&gt;If you compile the store project at this point you will get some errors concerning MvvmLight confilcts. These occur because there are class duplicates in the portable and in the specific versions of the assemblies. &nbsp;In order to alleviate the errors, expand the references folder in the project and select the *.Win8 assemblies and delete them.\n\nAdding Hello to MainViewModel\nNow that the wiring up of the relocated ViewModelLocator and MainViewModel are completed we can add the simple \"Hello\" property in the MainViewModel so it can be bound to in the store project.\n\nOpen MainViewModel.cs and add the property as follows:\n\n> &nbsp; &nbsp; &nbsp; &nbsp; private string _hello = \"Hello\";\n> &nbsp; &nbsp; &nbsp; &nbsp; public string Hello\n> &nbsp; &nbsp; &nbsp; &nbsp; {\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; get\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return _hello;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; set\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _hello = value;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RaisePropertyChanged(() =&gt; Hello);\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n> &nbsp; &nbsp; &nbsp; &nbsp; }\nSet the store project as the default project to run and either run in the simulator or on your local machine and you should see \"Hello\" appear in the top left of the application.\n\n### Wiring up the Phone Project\nThe process here is pretty much the same as was done for the store project.  Instead of moving the ViewModel folder in the phone project; it can be deleted.Open the App.xaml and make the adjustments to let the application know where the ViewModelLocator and ViewModels are located. Note that making these references in the phone project are different that in the store project, albeit subtle can trip you up.Change  > &nbsp;...xmlns:vm=\"clr-namespace:Mvvm.Phone.ViewModel\" mc:Ignorable=\"d\"&gt;to> &nbsp;...xmlns:vm=\"clr-namespace:Mvvm.PCL.ViewModel;assembly=Mvvm.PCL\"&gt;then make the modifications to the Application.Resources portion as follows:> &nbsp; &lt;Application.Resources&gt;\n> &nbsp; &nbsp; &lt;local:LocalizedStrings xmlns:local=\"clr-namespace:Mvvm.Phone\" x:Key=\"LocalizedStrings\" /&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &lt;vm:ViewModelLocator p6:Key=\"Locator\"\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;p7:IsDataSource=\"True\" xmlns:p7=\"http://schemas.microsoft.com/expression/blend/2008\"\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;xmlns:p6=\"http://schemas.microsoft.com/winfx/2006/xaml\" /&gt;\n> &nbsp; &nbsp; &lt;/Application.Resources&gt;Next, open the MainPage.xaml and add the DataContext declaration and the TextBlock as we did for the store application.\n> ... \n> shell:SystemTray.IsVisible=\"True\"\n> &nbsp; &nbsp; DataContext=\"{Binding Main, Source={StaticResource Locator}}\"&gt;\nadding the TextBlock> &nbsp; &nbsp; &nbsp; &nbsp; &lt;Grid x:Name=\"ContentPanel\" Grid.Row=\"1\" Margin=\"12,0,12,0\"&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;TextBlock Text=\"{Binding Hello, Mode=TwoWay}\" Foreground=\"White\" FontSize=\"18\" /&gt;\n> &nbsp; &nbsp; &nbsp; &nbsp; &lt;/Grid&gt;\nAnd finally as mentioned in the store project, you will get the assembly conflicts so be sure to remove the .*WP8 references in the phone project prior to building the solution here.\n\nRun the application and you'll see the Hello presented in the same location on the phone app.\n\n### Wrapping Up\nAll of the other capabilities that you may or may not be familiar with in the MVVM Light framework is still available to you within the specific projects or of you'd like extract those as well too. &nbsp;I find that the navigation and switching of the views is still best served within the specific platforms.\n\nI have in my projects moved services negotiation for getting data into the PCL assembly using the Microsfoft.BCL.Async library via nuget too and that is also great but a little different depending on your experience with the platform and WebClient versus HttpClient requests.\n\nEnjoy and feel free to ask questions.\n\n[Part 2 - Adding a Data Service](http://blog.tattoocoder.com/2013/01/portable-mvvm-light-move-your-view_28.html)","html":"<h3 id=\"portableclasslibrariesnbsp\">Portable Class Libraries&nbsp;</h3>\n\n<p>Portable Class Libraries were added as a project type in the interest of creating an assembly that you could use across the .NET Framework, Silverlight, Windows Phone 7, or Xbox 360 platforms without modifications. &nbsp;Well, not really that easy. &nbsp;There is some work to do and as you get into the development of PCLs you'll find out that there is really a sliver of what you'd hope is supported. (<a href=\"http://msdn.microsoft.com/en-us/library/vstudio/gg597391(v=vs.110).aspx\">http://msdn.microsoft.com/en-us/library/vstudio/gg597391(v=vs.110).aspx</a>)</p>\n\n<h3 id=\"mvvmlight\">MVVM Light</h3>\n\n<p>Where I have found it for me is in Windows Store and Windows Phone (7.5 and 8) with <a href=\"http://mvvmlight.codeplex.com/\">MVVM Light</a>. I have been using this MVVM framework exclusively for a few years now on Silverlight, WPF, Windows Phone and now Windows Store platforms and each release gets better.</p>\n\n<p>Most recently, another MVVM Light fan, <a href=\"http://novotny.org/blog\">Oren Novotny</a>&nbsp;(<a href=\"http://twitter.com/onovotny\">@onovotny</a>) ported the MVVM Light project and made it possible to use it in a Portable Class Library. This is great, code reuse is the ultimate time saver. And when developing Windows Store Apps or a Windows Phone App; making a complimentary piece for the other just makes sense when the UI is really the only difference and even that is almost the same.</p>\n\n<h3 id=\"exampleproject\">Example Project</h3>\n\n<p>Open Visual Studio 2012 and create a new project. &nbsp;I like to start with the \"<strong><em>Other Project Types</em></strong>\" and select the Blank Visual Studio Solution; name it <strong>MvvmPortable <em>*and click save. Next add a Windows Store App (C# Blank Template) and call it *</em>Mvvm.Store</strong>. Add a new Windows Phone 8 project to the solution named <strong>Mvvm.Phone</strong>.</p>\n\n<p>Now add a new project to the solution and select the \"<em>Portable Class Library</em>\" project type.</p>\n\n<p>Click OK and then you'll be presented with a dialog to choose the platforms to be supported. Select all except XBox and for <strong>Windows Phone choose 7.5 or higher</strong>. (<em>An error will occur when adding the nuget packages later if the 'Windows Phone 7.1 or higher' option is chosen</em>).</p>\n\n<p>Click OK and now the MVVM Light packages can start to be added via nuget.</p>\n\n<h3 id=\"nuget\">Nuget</h3>\n\n<p>If you are &nbsp;not using nuget, please pause here and go to <a href=\"http://nuget.org/\">nuget.org</a> and/or install via Tools-&gt;Extensions And Updates.</p>\n\n<p>Mvvm.PCL Project <br />\nRight click the project and select the Manage Nuget Packages and in the dialog search for \"<strong>Portable.MvvmLightLibs</strong>\" and be sure that the Include Pre-release option is on, or you can use the package manager console and use the command <strong><em>install package portable.mvvmlightlibs -prerelease</em></strong>.</p>\n\n<p>Repeat this process for the Windows Phone and Windows Store projects.</p>\n\n<p>Next we need to add the MVVM Light specific platform assemblies to each of the respective platforms and do some setup and cleanup to make this all work.</p>\n\n<p>Right Click the Windows Store project, select Manage Nuget Packages and search for MVVM Light and click the install button. In doing so, a few folders and files will be added to the project and you may see some errors which we'll clean up and repeat the process for the Phone project.</p>\n\n<h3 id=\"movingviewmodellocatorviewmodelsandwiringitup\">Moving ViewModelLocator,ViewModels and Wiring it Up</h3>\n\n<p>Now on to the fun! In the Mvvm.PCL project create a folder call ViewModel in the root of the project. Then expand the  ViewModel folder in the Mvvm.Store project and select the ViewModelLocator.cs and MainViewModel.cs file and cut and paste those to the ViewModel folder in the Mvvm.PCL project.Open each of those and change the namespace to Mvvm.PCL.ViewModel from Mvvm.Store.ViewModel.Since the ViewModelLocator has moved, the store app needs to know where to find it and the ViewModels, so open the App.xaml file in the Mvvm.Store project and change:> &nbsp;xmlns:vm=\"using:Mvvm.Store.ViewModel\"&nbsp;to</p>\n\n<blockquote>\n  <p>&nbsp;xmlns:vm=\"using:Mvvm.PCL.ViewModel\"&nbsp;\n  and we need to modify the Resources section because the nuget installer for MvvmLight puts in some extra entries for the ViewModelLocator</p>\n  \n  <p>&nbsp; &nbsp; &lt;ResourceDictionary&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &lt;vm:ViewModelLocator p7:Key=\"Locator\" p8:IsDataSource=\"True\"\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; xmlns:p8=\"<a href='http://schemas.microsoft.com/expression/blend/2008'>http://schemas.microsoft.com/expression/blend/2008</a>\"\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; xmlns:p7=\"<a href='http://schemas.microsoft.com/winfx/2006/xaml'>http://schemas.microsoft.com/winfx/2006/xaml</a>\" /&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &lt;ResourceDictionary.MergedDictionaries&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;!--\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Styles that define common aspects of the platform look and feel\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Required by Visual Studio project and item templates\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;--&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;ResourceDictionary Source=\"Common/StandardStyles.xaml\" /&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &lt;/ResourceDictionary.MergedDictionaries&gt;\n  &nbsp; &nbsp; \n  &nbsp; &nbsp; &lt;/ResourceDictionary&gt;\n  Finally for the Store app we'll go to the MainPage.xaml and set the DataContext and add a TextBlock to be filled from the MainViewModel.cs in the portable class library that we'll add following that.</p>\n</blockquote>\n\n<p>In the MainView.xaml page add the DataContext property at the top of the page after the other declarations.</p>\n\n<blockquote>\n  <p>&nbsp; &nbsp; ...\n  &nbsp; &nbsp; xmlns:mc=\"<a href='http://schemas.openxmlformats.org/markup-compatibility/2006'>http://schemas.openxmlformats.org/markup-compatibility/2006</a>\"\n  &nbsp; &nbsp; mc:Ignorable=\"d\"\n  &nbsp; &nbsp; DataContext=\"{Binding Main, Source={StaticResource Locator}}\"\n  &nbsp; &nbsp; &gt;Next in the grid add the TextBlock as follows</p>\n  \n  <p>&nbsp; &nbsp; &lt;Grid Background=\"{StaticResource ApplicationPageBackgroundThemeBrush}\"&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &lt;TextBlock Foreground=\"White\" FontSize=\"42\" Text=\"{Binding Hello, Mode=TwoWay}\" /&gt;\n  &nbsp; &nbsp; &lt;/Grid&gt;If you compile the store project at this point you will get some errors concerning MvvmLight confilcts. These occur because there are class duplicates in the portable and in the specific versions of the assemblies. &nbsp;In order to alleviate the errors, expand the references folder in the project and select the *.Win8 assemblies and delete them.</p>\n</blockquote>\n\n<p>Adding Hello to MainViewModel <br />\nNow that the wiring up of the relocated ViewModelLocator and MainViewModel are completed we can add the simple \"Hello\" property in the MainViewModel so it can be bound to in the store project.</p>\n\n<p>Open MainViewModel.cs and add the property as follows:</p>\n\n<blockquote>\n  <p>&nbsp; &nbsp; &nbsp; &nbsp; private string _hello = \"Hello\";\n  &nbsp; &nbsp; &nbsp; &nbsp; public string Hello\n  &nbsp; &nbsp; &nbsp; &nbsp; {\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; get\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return _hello;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; set\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _hello = value;\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RaisePropertyChanged(() =&gt; Hello);\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n  &nbsp; &nbsp; &nbsp; &nbsp; }\n  Set the store project as the default project to run and either run in the simulator or on your local machine and you should see \"Hello\" appear in the top left of the application.</p>\n</blockquote>\n\n<h3 id=\"wiringupthephoneproject\">Wiring up the Phone Project</h3>\n\n<p>The process here is pretty much the same as was done for the store project.  Instead of moving the ViewModel folder in the phone project; it can be deleted.Open the App.xaml and make the adjustments to let the application know where the ViewModelLocator and ViewModels are located. Note that making these references in the phone project are different that in the store project, albeit subtle can trip you up.Change  > &nbsp;...xmlns:vm=\"clr-namespace:Mvvm.Phone.ViewModel\" mc:Ignorable=\"d\"&gt;to> &nbsp;...xmlns:vm=\"clr-namespace:Mvvm.PCL.ViewModel;assembly=Mvvm.PCL\"&gt;then make the modifications to the Application.Resources portion as follows:> &nbsp; &lt;Application.Resources&gt;  </p>\n\n<blockquote>\n  <p>&nbsp; &nbsp; &lt;local:LocalizedStrings xmlns:local=\"clr-namespace:Mvvm.Phone\" x:Key=\"LocalizedStrings\" /&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &lt;vm:ViewModelLocator p6:Key=\"Locator\"\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;p7:IsDataSource=\"True\" xmlns:p7=\"<a href='http://schemas.microsoft.com/expression/blend/2008'>http://schemas.microsoft.com/expression/blend/2008</a>\"\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;xmlns:p6=\"<a href='http://schemas.microsoft.com/winfx/2006/xaml'>http://schemas.microsoft.com/winfx/2006/xaml</a>\" /&gt;\n  &nbsp; &nbsp; &lt;/Application.Resources&gt;Next, open the MainPage.xaml and add the DataContext declaration and the TextBlock as we did for the store application.\n  ... \n  shell:SystemTray.IsVisible=\"True\"\n  &nbsp; &nbsp; DataContext=\"{Binding Main, Source={StaticResource Locator}}\"&gt;\n  adding the TextBlock> &nbsp; &nbsp; &nbsp; &nbsp; &lt;Grid x:Name=\"ContentPanel\" Grid.Row=\"1\" Margin=\"12,0,12,0\"&gt; <br />\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;TextBlock Text=\"{Binding Hello, Mode=TwoWay}\" Foreground=\"White\" FontSize=\"18\" /&gt;\n  &nbsp; &nbsp; &nbsp; &nbsp; &lt;/Grid&gt;\n  And finally as mentioned in the store project, you will get the assembly conflicts so be sure to remove the .*WP8 references in the phone project prior to building the solution here.</p>\n</blockquote>\n\n<p>Run the application and you'll see the Hello presented in the same location on the phone app.</p>\n\n<h3 id=\"wrappingup\">Wrapping Up</h3>\n\n<p>All of the other capabilities that you may or may not be familiar with in the MVVM Light framework is still available to you within the specific projects or of you'd like extract those as well too. &nbsp;I find that the navigation and switching of the views is still best served within the specific platforms.</p>\n\n<p>I have in my projects moved services negotiation for getting data into the PCL assembly using the Microsfoft.BCL.Async library via nuget too and that is also great but a little different depending on your experience with the platform and WebClient versus HttpClient requests.</p>\n\n<p>Enjoy and feel free to ask questions.</p>\n\n<p><a href=\"http://blog.tattoocoder.com/2013/01/portable-mvvm-light-move-your-view_28.html\">Part 2 - Adding a Data Service</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1359065640000,"created_by":1,"updated_at":1359488426230,"updated_by":1,"published_at":1359065640000,"published_by":1},{"id":19,"uuid":"bcb05f28-3bc7-4499-a729-be39fd0c1bad","title":"Picking the Right Tools for Your Project","slug":"picking_the_right_tools_for_your_project","markdown":"[CodeProject](http://www.codeproject.com)Over the weekend I was able to release the first of many Windows 8 applications ([Download and Rate here](http://apps.microsoft.com/windows/app/dzone/7a51272f-6174-4f69-9ce8-caaece769d66)) into the store that I have been working on. This first one is just a RSS type application for DZone.com, but it just the first version and the next installment will add more content. &nbsp;If you have ever planned a good, cross platform application before you may or may not understand that picking the right tools for job are important, and yes even what you're using for the front end language matters sometimes as it did in my case here.\n\nHere is a run down of the application architecture components:\n\n*   Node.js REST API on Azure\n\n*   [Express ](http://expressjs.com/api.html):&nbsp;MVC type framework for Node.js for routing, rendering, HTTP Listener\n*   [Memory-Cache](https://github.com/ptarjan/node-cache) : memory caching on server\n*   [Cheerio](https://github.com/MatthewMueller/cheerio)&nbsp;: JQuery on the server, lightweight simple HTML parsing\n*   [Async ](https://github.com/caolan/async): parallel library for Node.js&nbsp;*   Windows 8TypeScript was also used in the Node.js project as well to build out some of the model objects.I wanted my app to present more. More than just the headline and a link off to another web browser as well as offer the ability to re-use what I had done for Windows Phone or other mobile devices. \n\n### \nAPI Architecture Choices - Reuse is Key\nThe RSS feeds don't change that much, so I want to create a way to have an API I could reuse for other platforms, but also leverage some caching for high availability, scale out if necessary and also make the development as fast as possible. I chose to go with Node.js on Azure to solve this challenge.**Node.js** ([http://en.wikipedia.org/wiki/Node.js](http://en.wikipedia.org/wiki/Node.js)) -&nbsp;_Node.js is a packaged compilation of Google's V8 JavaScript engine, the libUV platform abstraction layer, and a core library, which is itself primarily written in JavaScript.&nbsp;__Node.js was created by Ryan Dahl starting in 2009, and its growth is sponsored by Joyent, his employer._\n_\n_Node also has Node Package Manager (npm) which I would or most would say is the equivelant to .NET's nuget package library repository for getting community contributed libraries for accomplishing common tasks such as caching, async and so forth.\n\nI hadn't used node before but I have plenty of JavaScript experience and it was on my list of \"want to learn\" this year. &nbsp;I was recently asked why node instead of Web API, other just to say \"I used node.js\"? &nbsp;Good question, and a legit one too. &nbsp;So here is the answer;\n\nWeb API is great, I love it and give a talk on \"Why you should be using it\" at code camps quite often. &nbsp;However, I found that using C# to parse HTML to not be as flexible and lacked performance in comparison to using Cheerio (JQuery on node.js) when outside of the standard RSS or ATOM formatted feeds. JavaScript is really great at parsing strings. &nbsp;Secondly, the ability for me to make routes in Express was really easy in comparison to ASP.NET. &nbsp;For example, in ASP.NET if I wanted to setup a route to handle a controller / action / id route; there are changes needed in the routing configuration as well as potential changes in the controller too. \n\n#### Routing Config\n\nroutes.MapHttpRoute(\n&nbsp; &nbsp; name: \"myNewRouteAction\",\n&nbsp; &nbsp; routeTemplate: \"api/{controller}/{action}/{id}\",\n&nbsp; &nbsp; defaults: new { id = RouteParameter.Optional }\n);\n\n#### Controller Code\n\npublic class ProductsController : ApiController \n{  &nbsp; \n&nbsp; &nbsp; &nbsp;[HttpGet]  &nbsp; \n&nbsp; &nbsp; &nbsp;public string Details(int id) &nbsp;{ ... }\n}\n\nOr \n\npublic class ProductsController : ApiController\n{ &nbsp; \n&nbsp; &nbsp; &nbsp;public string GetDetails(int id) { ... }\n} \n\nThis sets up the API for the action name to be in the url like **_http://localhost/api/products/details/1_**. By contrast in node the same is accomplished with Express.js by doing the following\n\napp.get('/api/products/details/:id', function(request, response) { ... }); \n\nNext, in node I can take advantage of running multiple processes at once for checking for updates while also hosting a REST API for the application. &nbsp;In another application there are two worker roles in Azure, basically Windows Services, doing this type of work and a single Web role for my Web API. &nbsp;This allows for me to consolidate the processes into one right now and if the need arises I can break the back end architecture into multiple processes.&nbsp;Flexibility&nbsp;and some simplicity I like here. Here is an example where 3 processes are running at once doing tasks at different intervals all non-blocking.\n\n#### app.js&nbsp;\nvar job = function() {\n&nbsp; &nbsp; &nbsp;console.log(\"working at 1 second.\");\n&nbsp;};\nvar job2 = function() {\n&nbsp; &nbsp; &nbsp;console.log(\"working at 3 seconds.\");\n};\nsetInterval(job, 1000);\nsetInterval(job2, 3000);   \n\n#### Ouput in Console\n\nFinally, I chose JavaScript/HTML for the UI portions which I'll cover more reasons why later and it's nice to code JavaScript everywhere.\n\n### C#/XAML or HTML5/JavaScript/CSS3 ?\nNow I will mention that C# is my first language of choice when diving into any new project and in fact that is what I initially started with, but I found that when getting the contents of the RSS feeds, which were non-standard formatted and in order to consume RSS nicely in C# or VB.NET you have a dependency on the SyndicationFeed assembly which is good and bad. Good if the feed is formatted in the standard RSS or ATOM formats, but bad if the provider has extended it.Once more the article content was also available in nice print formatted HTML, however when using C# in Windows 8 you must embed a browser control and the flow is not fluid in landscape mode.  At least, not the way it should intuitively should appear. However in JavaScript you can take the HTML from the print view and set the innerHTML equal to the result and sprinkle some CSS in there and you are set. No fuss. So HTML5 is the choice here.In making the decision there are some features that I really enjoy about the language and the ability to create Windows applications versus XAML. There is a clear separation of concerns between what is Presentation, Styling, and Logic that I think I had taken for granted in my web development projects.  When using C# and XAML I really structure my project with MVVM pattern using MVVM Light, use some naming convention on my files and folder structures to ensure that just by looking at the project I know what does what where.In a JavaScript Windows 8 project it's clear, just in the tooling and file types.  Now make no mistake you can embed all of the CSS and JavaScript right in the HTML and spaghetti it all up just like anything.  However, the templates and the maturity of the tool set and language almost keeps you from doing so.The HTML5 support in Blend is also great, especially when seeing what CSS styles are applied to what HTML elements, and using the tooling to create a new style from an existing style.  I encourage you to view the video on blendinsider.com .Some other items I'll quickly mention that I like about JavaScript projects in Windows 8CSSmultiple background layers and overall styling much easier than XAMLSupporting snapping, full, landscape etc through media queries I found much more intuitiveJQuery SupportWho doesn't like JQuery when it comes to getting to the DOM?Web Essentials! not that this has anything specific to do with WIndows 8, but if you are doing any HTML, CSS, and/or JavaScript development you MUST get this.  I have been using this for a while and it continues to get better and now has its own dedicated site as http://vswebessentials.com/I will still use C# and XAML as it is my first set of tools, but don't forget the others in the box.  There have been some fantastic tools thrown at the developers and some are very quick to poo poo the idea of a new coding language or application of an existing language in a different way.  Pick what best works towards the success of the project.Here are a few resources for HTML5 and JavaScript Development for Windows 8 https://www.meetmyapp.in/meetmyapp/windows_8_build.aspx - Design Templates!!! Ready to go in XAML or HTML/JShttp://31daysofwindows8.com/ - By Clark Sell @csell5 on twitter. http://dev.windows.comhttp://generationapp.com","html":"<p><a href=\"http://www.codeproject.com\">CodeProject</a>Over the weekend I was able to release the first of many Windows 8 applications (<a href=\"http://apps.microsoft.com/windows/app/dzone/7a51272f-6174-4f69-9ce8-caaece769d66\">Download and Rate here</a>) into the store that I have been working on. This first one is just a RSS type application for DZone.com, but it just the first version and the next installment will add more content. &nbsp;If you have ever planned a good, cross platform application before you may or may not understand that picking the right tools for job are important, and yes even what you're using for the front end language matters sometimes as it did in my case here.</p>\n\n<p>Here is a run down of the application architecture components:</p>\n\n<ul>\n<li><p>Node.js REST API on Azure</p></li>\n<li><p><a href=\"http://expressjs.com/api.html\">Express </a>:&nbsp;MVC type framework for Node.js for routing, rendering, HTTP Listener</p></li>\n<li><a href=\"https://github.com/ptarjan/node-cache\">Memory-Cache</a> : memory caching on server</li>\n<li><a href=\"https://github.com/MatthewMueller/cheerio\">Cheerio</a>&nbsp;: JQuery on the server, lightweight simple HTML parsing</li>\n<li><a href=\"https://github.com/caolan/async\">Async </a>: parallel library for Node.js&nbsp;*   Windows 8TypeScript was also used in the Node.js project as well to build out some of the model objects.I wanted my app to present more. More than just the headline and a link off to another web browser as well as offer the ability to re-use what I had done for Windows Phone or other mobile devices. </li>\n</ul>\n\n<h3 id=\"\"> </h3>\n\n<p>API Architecture Choices - Reuse is Key <br />\nThe RSS feeds don't change that much, so I want to create a way to have an API I could reuse for other platforms, but also leverage some caching for high availability, scale out if necessary and also make the development as fast as possible. I chose to go with Node.js on Azure to solve this challenge.<strong>Node.js</strong> (<a href=\"http://en.wikipedia.org/wiki/Node.js\">http://en.wikipedia.org/wiki/Node.js</a>) -&nbsp;<em>Node.js is a packaged compilation of Google's V8 JavaScript engine, the libUV platform abstraction layer, and a core library, which is itself primarily written in JavaScript.&nbsp;</em><em>Node.js was created by Ryan Dahl starting in 2009, and its growth is sponsored by Joyent, his employer.</em> <br />\n_ <br />\n_Node also has Node Package Manager (npm) which I would or most would say is the equivelant to .NET's nuget package library repository for getting community contributed libraries for accomplishing common tasks such as caching, async and so forth.</p>\n\n<p>I hadn't used node before but I have plenty of JavaScript experience and it was on my list of \"want to learn\" this year. &nbsp;I was recently asked why node instead of Web API, other just to say \"I used node.js\"? &nbsp;Good question, and a legit one too. &nbsp;So here is the answer;</p>\n\n<p>Web API is great, I love it and give a talk on \"Why you should be using it\" at code camps quite often. &nbsp;However, I found that using C# to parse HTML to not be as flexible and lacked performance in comparison to using Cheerio (JQuery on node.js) when outside of the standard RSS or ATOM formatted feeds. JavaScript is really great at parsing strings. &nbsp;Secondly, the ability for me to make routes in Express was really easy in comparison to ASP.NET. &nbsp;For example, in ASP.NET if I wanted to setup a route to handle a controller / action / id route; there are changes needed in the routing configuration as well as potential changes in the controller too. </p>\n\n<h4 id=\"routingconfig\">Routing Config</h4>\n\n<p>routes.MapHttpRoute( <br />\n&nbsp; &nbsp; name: \"myNewRouteAction\",\n&nbsp; &nbsp; routeTemplate: \"api/{controller}/{action}/{id}\",\n&nbsp; &nbsp; defaults: new { id = RouteParameter.Optional }\n);</p>\n\n<h4 id=\"controllercode\">Controller Code</h4>\n\n<p>public class ProductsController : ApiController <br />\n{  &nbsp; \n&nbsp; &nbsp; &nbsp;[HttpGet]  &nbsp; \n&nbsp; &nbsp; &nbsp;public string Details(int id) &nbsp;{ ... }\n}</p>\n\n<p>Or </p>\n\n<p>public class ProductsController : ApiController <br />\n{ &nbsp; \n&nbsp; &nbsp; &nbsp;public string GetDetails(int id) { ... }\n} </p>\n\n<p>This sets up the API for the action name to be in the url like <strong><em><a href='http://localhost/api/products/details/1'>http://localhost/api/products/details/1</a></em></strong>. By contrast in node the same is accomplished with Express.js by doing the following</p>\n\n<p>app.get('/api/products/details/:id', function(request, response) { ... }); </p>\n\n<p>Next, in node I can take advantage of running multiple processes at once for checking for updates while also hosting a REST API for the application. &nbsp;In another application there are two worker roles in Azure, basically Windows Services, doing this type of work and a single Web role for my Web API. &nbsp;This allows for me to consolidate the processes into one right now and if the need arises I can break the back end architecture into multiple processes.&nbsp;Flexibility&nbsp;and some simplicity I like here. Here is an example where 3 processes are running at once doing tasks at different intervals all non-blocking.</p>\n\n<h4 id=\"appjsnbsp\">app.js&nbsp;</h4>\n\n<p>var job = function() { <br />\n&nbsp; &nbsp; &nbsp;console.log(\"working at 1 second.\");\n&nbsp;};\nvar job2 = function() { <br />\n&nbsp; &nbsp; &nbsp;console.log(\"working at 3 seconds.\");\n};\nsetInterval(job, 1000); <br />\nsetInterval(job2, 3000);   </p>\n\n<h4 id=\"ouputinconsole\">Ouput in Console</h4>\n\n<p>Finally, I chose JavaScript/HTML for the UI portions which I'll cover more reasons why later and it's nice to code JavaScript everywhere.</p>\n\n<h3 id=\"cxamlorhtml5javascriptcss3\">C#/XAML or HTML5/JavaScript/CSS3 ?</h3>\n\n<p>Now I will mention that C# is my first language of choice when diving into any new project and in fact that is what I initially started with, but I found that when getting the contents of the RSS feeds, which were non-standard formatted and in order to consume RSS nicely in C# or VB.NET you have a dependency on the SyndicationFeed assembly which is good and bad. Good if the feed is formatted in the standard RSS or ATOM formats, but bad if the provider has extended it.Once more the article content was also available in nice print formatted HTML, however when using C# in Windows 8 you must embed a browser control and the flow is not fluid in landscape mode.  At least, not the way it should intuitively should appear. However in JavaScript you can take the HTML from the print view and set the innerHTML equal to the result and sprinkle some CSS in there and you are set. No fuss. So HTML5 is the choice here.In making the decision there are some features that I really enjoy about the language and the ability to create Windows applications versus XAML. There is a clear separation of concerns between what is Presentation, Styling, and Logic that I think I had taken for granted in my web development projects.  When using C# and XAML I really structure my project with MVVM pattern using MVVM Light, use some naming convention on my files and folder structures to ensure that just by looking at the project I know what does what where.In a JavaScript Windows 8 project it's clear, just in the tooling and file types.  Now make no mistake you can embed all of the CSS and JavaScript right in the HTML and spaghetti it all up just like anything.  However, the templates and the maturity of the tool set and language almost keeps you from doing so.The HTML5 support in Blend is also great, especially when seeing what CSS styles are applied to what HTML elements, and using the tooling to create a new style from an existing style.  I encourage you to view the video on blendinsider.com .Some other items I'll quickly mention that I like about JavaScript projects in Windows 8CSSmultiple background layers and overall styling much easier than XAMLSupporting snapping, full, landscape etc through media queries I found much more intuitiveJQuery SupportWho doesn't like JQuery when it comes to getting to the DOM?Web Essentials! not that this has anything specific to do with WIndows 8, but if you are doing any HTML, CSS, and/or JavaScript development you MUST get this.  I have been using this for a while and it continues to get better and now has its own dedicated site as <a href='http://vswebessentials.com/I'>http://vswebessentials.com/I</a> will still use C# and XAML as it is my first set of tools, but don't forget the others in the box.  There have been some fantastic tools thrown at the developers and some are very quick to poo poo the idea of a new coding language or application of an existing language in a different way.  Pick what best works towards the success of the project.Here are a few resources for HTML5 and JavaScript Development for Windows 8 <a href='https://www.meetmyapp.in/meetmyapp/windows'>https://www.meetmyapp.in/meetmyapp/windows</a><em>8</em>build.aspx - Design Templates!!! Ready to go in XAML or HTML/JS<a href='http://31daysofwindows8.com/'>http://31daysofwindows8.com/</a> - By Clark Sell @csell5 on twitter. <a href='http://dev.windows.comhttp://generationapp.com'>http://dev.windows.comhttp://generationapp.com</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1358264940000,"created_by":1,"updated_at":1359409868817,"updated_by":1,"published_at":1358264940000,"published_by":1},{"id":20,"uuid":"489f4d66-1139-4263-877c-76d3e1826e18","title":"Developer Days at Microsoft Store","slug":"developer_days_at_microsoft_store","markdown":"### Developer Workshops\nJoe Healy ([@devfish](http://twitter.com/devfish))&nbsp;and I have been hosting workshops at the [Microsoft Store in Orlando](http://content.microsoftstore.com/store/store-lookup/zip-32809) at the Florida Mall over the past few Thursdays. The current series has been focusing on Windows Store Apps, including game application development.&nbsp; Joe presented this past week on MonoGame for Windows 8 and another Florida Developer, Bill Reiss ([@billreiss](http://www.twitter.com/billreiss))&nbsp;is doing a blog series on that [same topic here](http://www.billreiss.com/monogame-for-windows-8-step-1-getting-started/), and the turn out was great! Here are the next few topics on deck.\n\n[![](http://4.bp.blogspot.com/-LcQ59mV6AJI/ULy4sP9WIeI/AAAAAAAAAac/P2EYa9JXqtc/s1600/12.06.png)](http://4.bp.blogspot.com/-LcQ59mV6AJI/ULy4sP9WIeI/AAAAAAAAAac/P2EYa9JXqtc/s1600/12.06.png)XAML and C# for Windows 8 Store App\n[https://msevents.microsoft.com/CUI/EventDetail.aspx?EventID=1032532761](https://msevents.microsoft.com/CUI/EventDetail.aspx?EventID=1032532761)\nPresented by: Shayne Boyer [(@spboyer](http://twitter.com/spboyer))\n\nUsing Game Salad for No-Code Game Development on  Windows 8\n[https://msevents.microsoft.com/CUI/EventDetail.aspx?EventID=1032532922](https://msevents.microsoft.com/CUI/EventDetail.aspx?EventID=1032532922)\nPresented by: Shayne Boyer ([@spboyer](http://twitter.com/spboyer))\n\n### Future Events\nWe are planning a two time a month workshop after the New Year with a range of topics covering Windows Store Apps, Windows Phone and much more surrounding these platforms.&nbsp; If you have some subject matter that you are interested in hearing more about please contact me [spboyer@live.com](mailto:spboyer@live.com) or Joe [jhealy@microsoft.com](mailto:jhealy@microsoft.com) \n\nOther Resources\nVisit Generation App at [bit.ly/30tolaunch](http://bit.ly/30tolaunch)&nbsp;, or Joe's site at [devfish.net](http://devfish.net/)&nbsp;and be sure to followus on twitter: [@devfish](http://twitter.com/devfish) and [@spboyer](http://twitter.com/spboyer).","html":"<h3 id=\"developerworkshops\">Developer Workshops</h3>\n\n<p>Joe Healy (<a href=\"http://twitter.com/devfish\">@devfish</a>)&nbsp;and I have been hosting workshops at the <a href=\"http://content.microsoftstore.com/store/store-lookup/zip-32809\">Microsoft Store in Orlando</a> at the Florida Mall over the past few Thursdays. The current series has been focusing on Windows Store Apps, including game application development.&nbsp; Joe presented this past week on MonoGame for Windows 8 and another Florida Developer, Bill Reiss (<a href=\"http://www.twitter.com/billreiss\">@billreiss</a>)&nbsp;is doing a blog series on that <a href=\"http://www.billreiss.com/monogame-for-windows-8-step-1-getting-started/\">same topic here</a>, and the turn out was great! Here are the next few topics on deck.</p>\n\n<p><a href=\"http://4.bp.blogspot.com/-LcQ59mV6AJI/ULy4sP9WIeI/AAAAAAAAAac/P2EYa9JXqtc/s1600/12.06.png\"><img src=\"http://4.bp.blogspot.com/-LcQ59mV6AJI/ULy4sP9WIeI/AAAAAAAAAac/P2EYa9JXqtc/s1600/12.06.png\" alt=\"\" title=\"\" /></a>XAML and C# for Windows 8 Store App\n<a href=\"https://msevents.microsoft.com/CUI/EventDetail.aspx?EventID=1032532761\">https://msevents.microsoft.com/CUI/EventDetail.aspx?EventID=1032532761</a>\nPresented by: Shayne Boyer <a href=\"http://twitter.com/spboyer\">(@spboyer</a>)</p>\n\n<p>Using Game Salad for No-Code Game Development on  Windows 8 <br />\n<a href=\"https://msevents.microsoft.com/CUI/EventDetail.aspx?EventID=1032532922\">https://msevents.microsoft.com/CUI/EventDetail.aspx?EventID=1032532922</a>\nPresented by: Shayne Boyer (<a href=\"http://twitter.com/spboyer\">@spboyer</a>)</p>\n\n<h3 id=\"futureevents\">Future Events</h3>\n\n<p>We are planning a two time a month workshop after the New Year with a range of topics covering Windows Store Apps, Windows Phone and much more surrounding these platforms.&nbsp; If you have some subject matter that you are interested in hearing more about please contact me <a href=\"mailto:spboyer@live.com\">spboyer@live.com</a> or Joe <a href=\"mailto:jhealy@microsoft.com\">jhealy@microsoft.com</a> </p>\n\n<p>Other Resources <br />\nVisit Generation App at <a href=\"http://bit.ly/30tolaunch\">bit.ly/30tolaunch</a>&nbsp;, or Joe's site at <a href=\"http://devfish.net/\">devfish.net</a>&nbsp;and be sure to followus on twitter: <a href=\"http://twitter.com/devfish\">@devfish</a> and <a href=\"http://twitter.com/spboyer\">@spboyer</a>.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1354546380000,"created_by":1,"updated_at":1354546625309,"updated_by":1,"published_at":1354546380000,"published_by":1},{"id":21,"uuid":"08e73975-d17d-4860-8a6f-479f72dc8224","title":"Paparazzi at the Microsoft Store! I'm Famous!","slug":"paparazzi_at_the_microsoft_store_i_m_famous_","markdown":"&nbsp;What's really \"completely&nbsp;embarrassing\" as he so states in his post is the lack of observation. [Original post here...](http://www.ivanmladenovic.com/microsoft-store-genuis-using-apple-macbook-pro-in-the-store/)\nFirst, yes I was and do in fact use a MacBook Pro and run Windows 8 on it. However the the sneaky photo fails to capture the full picture. First, I'm a very cool dude.  So next time at least do it from the XBOX section so you get my good side, and the \"I'm a PC\" shirt that I was wearing.Secondly, do note in the photo that that is my desktop there on the screen, um I believe that's Windows 8 and NOT OSX. I also carry multiple phones at this point I had a Lumia 800 Windows Phone in my pocket but also own Android and iOS devices as well.Furthmermore, if you are in fact the \"social media fanatic\" that the about page states on your blog; please come introduce yourself! I love to chat technology, and ask what I was presenting that evening.  You'd be suprised, or not maybe, that I was talking about Windows 8 UX Design. You should have stuck around, not only would you have gain some serious knowledge from the 1 1/2 presentation  but also had gotten some dang nice swag and a fancy sandwich from Panera Bread in Microsoft.I do not work for Microsoft, and even employees of Microsoft are welcome to carry and use iOS and OSX devices.  Next time introduce yourself, you'd be surprised whose on the front side of that picture.","html":"<p>&nbsp;What's really \"completely&nbsp;embarrassing\" as he so states in his post is the lack of observation. <a href=\"http://www.ivanmladenovic.com/microsoft-store-genuis-using-apple-macbook-pro-in-the-store/\">Original post here...</a>\nFirst, yes I was and do in fact use a MacBook Pro and run Windows 8 on it. However the the sneaky photo fails to capture the full picture. First, I'm a very cool dude.  So next time at least do it from the XBOX section so you get my good side, and the \"I'm a PC\" shirt that I was wearing.Secondly, do note in the photo that that is my desktop there on the screen, um I believe that's Windows 8 and NOT OSX. I also carry multiple phones at this point I had a Lumia 800 Windows Phone in my pocket but also own Android and iOS devices as well.Furthmermore, if you are in fact the \"social media fanatic\" that the about page states on your blog; please come introduce yourself! I love to chat technology, and ask what I was presenting that evening.  You'd be suprised, or not maybe, that I was talking about Windows 8 UX Design. You should have stuck around, not only would you have gain some serious knowledge from the 1 1/2 presentation  but also had gotten some dang nice swag and a fancy sandwich from Panera Bread in Microsoft.I do not work for Microsoft, and even employees of Microsoft are welcome to carry and use iOS and OSX devices.  Next time introduce yourself, you'd be surprised whose on the front side of that picture.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1353111180000,"created_by":1,"updated_at":1353111448789,"updated_by":1,"published_at":1353111180000,"published_by":1},{"id":22,"uuid":"89246b0d-59e7-4793-ab18-dfb312dbc79f","title":"Tampa Code Camp","slug":"tampa_code_camp","markdown":"I will be giving two talks this Saturday at&nbsp;Tampa Code Camp, being held at the University of South Florida in Tampa, Fl.&nbsp; For directions and more information visit[&nbsp;http://www.tampacodecamp.com](http://www.tampacodecamp.com/). Schedule for other sessions&nbsp;[here](http://www.tampacodecamp.com/Agenda.aspx).\n\n### &nbsp;\n\n### My Sessions\n\n#### Introduction to ASP.NET Web API - Why you should be using it.\n9:50 AM in Room 1102This is an introduction to ASP.NET WebAPI and how easy it is to get started and use it in your application development when building RESTful services.\n\n#### Building Windows 8 Apps w/ MVVM Light\n2:20 PM in Room 1301\nMVVM Light is a great toolkit for building Window Phone applications and has been updated for building Windows 8 Modern UI apps. In this session, you will learn how to get the package installed, what is different from Windows Phone development in MVVM Light and how to start your first app in Windows 8.\n\n#### \n\n#### [Telerik Controls for Windows 8.](http://www.telerik.com/products/windows-metro/overview.aspx)\n3:25 PM in Room 115Telerik has just released a set of controls for Windows 8 development. In this session, we'll take a look at the set of controls and see how easy it is to get started using these to make your Windows 8 apps pop.Hope to see you there, should be an exciting event!","html":"<p>I will be giving two talks this Saturday at&nbsp;Tampa Code Camp, being held at the University of South Florida in Tampa, Fl.&nbsp; For directions and more information visit<a href=\"http://www.tampacodecamp.com/\">&nbsp;<a href='http://www.tampacodecamp.com'>http://www.tampacodecamp.com</a></a>. Schedule for other sessions&nbsp;<a href=\"http://www.tampacodecamp.com/Agenda.aspx\">here</a>.</p>\n\n<h3 id=\"nbsp\">&nbsp;</h3>\n\n<h3 id=\"mysessions\">My Sessions</h3>\n\n<h4 id=\"introductiontoaspnetwebapiwhyyoushouldbeusingit\">Introduction to ASP.NET Web API - Why you should be using it.</h4>\n\n<p>9:50 AM in Room 1102This is an introduction to ASP.NET WebAPI and how easy it is to get started and use it in your application development when building RESTful services.</p>\n\n<h4 id=\"buildingwindows8appswmvvmlight\">Building Windows 8 Apps w/ MVVM Light</h4>\n\n<p>2:20 PM in Room 1301 <br />\nMVVM Light is a great toolkit for building Window Phone applications and has been updated for building Windows 8 Modern UI apps. In this session, you will learn how to get the package installed, what is different from Windows Phone development in MVVM Light and how to start your first app in Windows 8.</p>\n\n<h4 id=\"\"> </h4>\n\n<h4 id=\"telerikcontrolsforwindows8httpwwwtelerikcomproductswindowsmetrooverviewaspx\"><a href=\"http://www.telerik.com/products/windows-metro/overview.aspx\">Telerik Controls for Windows 8.</a></h4>\n\n<p>3:25 PM in Room 115Telerik has just released a set of controls for Windows 8 development. In this session, we'll take a look at the set of controls and see how easy it is to get started using these to make your Windows 8 apps pop.Hope to see you there, should be an exciting event!</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1349971380000,"created_by":1,"updated_at":1349971403857,"updated_by":1,"published_at":1349971380000,"published_by":1},{"id":23,"uuid":"d7f052aa-e957-4f4a-962d-f3d4b38d5a2a","title":"TypeScript for Windows 8 Store Apps","slug":"type_script_for_windows_8_store_apps","markdown":"### What is TypeScript?&nbsp;\nSee [http://www.typescriptlang.org](http://www.typescriptlang.org/)\n\nTypeScript was recently released and has become the new hot topic. &nbsp;One of the questions I have asked and heard is can we use this for developing Windows Store Applications with Javascript and have the cool features that have been shown in the videos and examples.\n\nOne of the great features was the split window feature where you can code in TypeScript on the left and upon hitting save, it compiles to Javascript on the left. So I fired up a new Javascript Windows Store project in Visual Studio to give it a shot to see if it all works. &nbsp;Before we get started make sure that you have the following:\n\n*   Windows 8 &amp; VS2012\n*   Download the plugin:&nbsp;[http://go.microsoft.com/fwlink/?LinkID=266563](http://go.microsoft.com/fwlink/?LinkID=266563)\n*   VS 2012 Web Essentials:&nbsp;[http://visualstudiogallery.msdn.microsoft.com/07d54d12-7133-4e15-becb-6f451ea3bea6](http://visualstudiogallery.msdn.microsoft.com/07d54d12-7133-4e15-becb-6f451ea3bea6)\n\n### Create a New Project\nStart by creating a new project. I just went with the \"Blank App\" template for purposes of this post, but any of the installed templates are certainly applicable.Click \"OK\" and you will see that in the Solution Explorer the following structure.  Expand the \"js\" folder to see the javascript files that are there by default.\n\n### Adding the TypeScript Functionality\nThere are a couple of files that are needed to making TypeScript and Windows 8 play nicely together, as well as jQuery.  The best way to describe these is that they are wrappers for the WinJS, WinRT and JQuery or helpers.  There is also lib.d.ts which is a noted in the file as \"ECMA Script APIs\" Click on any of these to see the source.winjs.d.tswinrt.d.tsjquery.d.tslib.d.tsI downloaded all of these and now put them in a folder called tsWin in the project for referencing in my other ts files.In the examples that have been shown online, by simply adding a .ts file to your project and hitting save; Visual Studio will automatically create the .js file and associate it to the TypeScript file and show the compiled javascript in the split window.  However, this is not the case in a Windows Store Application...Yet.But we can still make this all work, here's how.Add a new javascript file to the js folder BUT name it with the extension .ts. I named the file Data.ts.  Next, repeat and name the file Data.js. Your solution explorer should look like this now. Note that I also added the tsWin folder and the mentioned files as well.<table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\">[![](http://2.bp.blogspot.com/-sBsmbG_oEtU/UHRctAAfecI/AAAAAAAAAWo/hxlg24iVHew/s400/AddNewFiles.PNG)](http://2.bp.blogspot.com/-sBsmbG_oEtU/UHRctAAfecI/AAAAAAAAAWo/hxlg24iVHew/s1600/AddNewFiles.PNG)</td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">\n</td></tr></tbody></table>Now you can open the data.ts file and get the split window that has been presented and see that the .js file that is compiled on the right. There is another file here that is important as well called win.ts, it adds a wrapper for setImmediate and references the winrt.d.ts and winjs.d.t.s files.  I reference this file in any of the TypeScript that I am using but put it within the js folder.\n\n### A Quick Example\nSo here is a quick example that will walk through the following concepts:Creating a simple classExtending the class through inheritanceUsing Location ServicesRetrieving a static map from Google Maps APIInserting the image control onto the page.Open the data.ts file.  We will first create the initial Location class and the MyLocation class in TypeScript  and see the output to javascript.TypeScript:///<reference path=\"win.ts\">module Data {    class Location {        longitude: any;        latitude: any;        url: string;    }    class MyLocation extends Location {        retrieved: any;    }};Javascript:var __extends = this.__extends || function (d, b) {    function __() { this.constructor = d; }    __.prototype = b.prototype;    d.prototype = new __();}var Data;(function (Data) {    var Location = (function () {        function Location() { }        return Location;    })();       var MyLocation = (function (_super) {        __extends(MyLocation, _super);        function MyLocation() {            _super.apply(this, arguments);        }        return MyLocation;    })(Location);   })(Data || (Data = {}));; ;Screen shot just to visualize what's show in VS 2012Not sure about you, but I wouldn't want to write the inheritance code for Javscript, TypeScript kills it there! Ok, let's move on. Next I will add the function to get the location from the device, populate the myLoc object and then create and insert the image into the body of the page.Note that the TypeScript and Javacript to do this are one and the same, difference here is that we have type safe code.TypeScript:  var locator = new Windows.Devices.Geolocation.Geolocator();  locator.getGeopositionAsync().then(function (pos) {        var myLoc = new MyLocation();      myLoc.latitude = pos.coordinate.latitude;      myLoc.longitude = pos.coordinate.longitude;      myLoc.retrieved = Date.now;      myLoc.url = \"http://maps.googleapis.com/maps/api/staticmap?center=\"          + myLoc.latitude + \",\" + myLoc.longitude          + \"&zoom=12&size=400x400&sensor=false\";      // add a new img tag to the document      var img = document.createElement(\"img\");      // set the src and style      img.setAttribute(\"src\", myLoc.url);      img.setAttribute(\"style\", \"height:400px;width:400px;\");              // get the paragraph tag we set for the location of the content      var p = document.body.getElementsByTagName(\"p\")[0];      p.appendChild(img);When you hit save you'll notice that on the status bar at the bottom left of Visual Studio it will read \"Compiling TypeScript...\" and then the resulting Javascript will refresh/show on the right pane.  It is important to note that if you have the ,js file open you will get the prompt \"Such and such file is open would you like to reload\".Before you run the application make sure that you enable the Location capabilities in the package manifest file as shown below or you will get a nasty message box letting you know you didn't.Ok, hit F5 and see the results.First you'll get the let me use location services prompt.And then the page is presented with the downloaded map.That's a little get started primer on TypeScript and Windows Store Apps!  Pretty awesome stuff.Tips & Tricks</reference>\n\n#### Content / Package Type\nMake sure that all of the TypeScript (.ts) files are marked as None so they are not distributed unnecessarily with your application. \n\n#### Debugging\nYou can put break points in the generated .js files and have access to the immediate window, watch etc.\n\n#### Dependent Files\nI like to see the dependent files like I'm used to seeing in other project types (see below).  Since this is not built in to the Windows Store functionality with TypeScript yet, here is how to do it.You need to edit the project file.  The best way to do this is to use the Power Commands for Visual Studio extension, or browse to it and open in notepad or some other text editor.<table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\">[![](http://4.bp.blogspot.com/-SyPYCvo47uI/UHRukrMHldI/AAAAAAAAAX8/lmfi9arHPHQ/s400/PowerCommands.PNG)](http://4.bp.blogspot.com/-SyPYCvo47uI/UHRukrMHldI/AAAAAAAAAX8/lmfi9arHPHQ/s1600/PowerCommands.PNG)</td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">PowerCommands for Visual Studio</td></tr></tbody></table>For this solution locate the data.ts reference in the file and change it to the following:    <content include=\"js\\data.js\">      <dependentupon>data.ts</dependentupon>    </content>    <none include=\"js\\data.ts\"></none>Save the file and reload the project and you can now see that the .js file will be shown below the .ts file.ConclusionI have had some real fun getting into this and trying it out with the Store apps.  Coming from a C# / XAML life for the last many years, it will be interesting for me to back to some scripting.  I like the option and I see some really cool opportunities with TypeScript.DOWNLOAD THE CODE FOR THE EXAMPLE","html":"<h3 id=\"whatistypescriptnbsp\">What is TypeScript?&nbsp;</h3>\n\n<p>See <a href=\"http://www.typescriptlang.org/\">http://www.typescriptlang.org</a></p>\n\n<p>TypeScript was recently released and has become the new hot topic. &nbsp;One of the questions I have asked and heard is can we use this for developing Windows Store Applications with Javascript and have the cool features that have been shown in the videos and examples.</p>\n\n<p>One of the great features was the split window feature where you can code in TypeScript on the left and upon hitting save, it compiles to Javascript on the left. So I fired up a new Javascript Windows Store project in Visual Studio to give it a shot to see if it all works. &nbsp;Before we get started make sure that you have the following:</p>\n\n<ul>\n<li>Windows 8 &amp; VS2012</li>\n<li>Download the plugin:&nbsp;<a href=\"http://go.microsoft.com/fwlink/?LinkID=266563\">http://go.microsoft.com/fwlink/?LinkID=266563</a></li>\n<li>VS 2012 Web Essentials:&nbsp;<a href=\"http://visualstudiogallery.msdn.microsoft.com/07d54d12-7133-4e15-becb-6f451ea3bea6\">http://visualstudiogallery.msdn.microsoft.com/07d54d12-7133-4e15-becb-6f451ea3bea6</a></li>\n</ul>\n\n<h3 id=\"createanewproject\">Create a New Project</h3>\n\n<p>Start by creating a new project. I just went with the \"Blank App\" template for purposes of this post, but any of the installed templates are certainly applicable.Click \"OK\" and you will see that in the Solution Explorer the following structure.  Expand the \"js\" folder to see the javascript files that are there by default.</p>\n\n<h3 id=\"addingthetypescriptfunctionality\">Adding the TypeScript Functionality</h3>\n\n<p>There are a couple of files that are needed to making TypeScript and Windows 8 play nicely together, as well as jQuery.  The best way to describe these is that they are wrappers for the WinJS, WinRT and JQuery or helpers.  There is also lib.d.ts which is a noted in the file as \"ECMA Script APIs\" Click on any of these to see the source.winjs.d.tswinrt.d.tsjquery.d.tslib.d.tsI downloaded all of these and now put them in a folder called tsWin in the project for referencing in my other ts files.In the examples that have been shown online, by simply adding a .ts file to your project and hitting save; Visual Studio will automatically create the .js file and associate it to the TypeScript file and show the compiled javascript in the split window.  However, this is not the case in a Windows Store Application...Yet.But we can still make this all work, here's how.Add a new javascript file to the js folder BUT name it with the extension .ts. I named the file Data.ts.  Next, repeat and name the file Data.js. Your solution explorer should look like this now. Note that I also added the tsWin folder and the mentioned files as well.<table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://2.bp.blogspot.com/-sBsmbG_oEtU/UHRctAAfecI/AAAAAAAAAWo/hxlg24iVHew/s1600/AddNewFiles.PNG\"><img src=\"http://2.bp.blogspot.com/-sBsmbG_oEtU/UHRctAAfecI/AAAAAAAAAWo/hxlg24iVHew/s400/AddNewFiles.PNG\" alt=\"\" title=\"\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\"> <br />\n</td></tr></tbody></table>Now you can open the data.ts file and get the split window that has been presented and see that the .js file that is compiled on the right. There is another file here that is important as well called win.ts, it adds a wrapper for setImmediate and references the winrt.d.ts and winjs.d.t.s files.  I reference this file in any of the TypeScript that I am using but put it within the js folder.</p>\n\n<h3 id=\"aquickexample\">A Quick Example</h3>\n\n<p>So here is a quick example that will walk through the following concepts:Creating a simple classExtending the class through inheritanceUsing Location ServicesRetrieving a static map from Google Maps APIInserting the image control onto the page.Open the data.ts file.  We will first create the initial Location class and the MyLocation class in TypeScript  and see the output to javascript.TypeScript:///<reference path=\"win.ts\">module Data {    class Location {        longitude: any;        latitude: any;        url: string;    }    class MyLocation extends Location {        retrieved: any;    }};Javascript:var <strong>extends = this.</strong>extends || function (d, b) {    function <em>_() { this.constructor = d; }    _</em>.prototype = b.prototype;    d.prototype = new <em>_();}var Data;(function (Data) {    var Location = (function () {        function Location() { }        return Location;    })();       var MyLocation = (function (</em>super) {        __extends(MyLocation, _super);        function MyLocation() {            _super.apply(this, arguments);        }        return MyLocation;    })(Location);   })(Data || (Data = {}));; ;Screen shot just to visualize what's show in VS 2012Not sure about you, but I wouldn't want to write the inheritance code for Javscript, TypeScript kills it there! Ok, let's move on. Next I will add the function to get the location from the device, populate the myLoc object and then create and insert the image into the body of the page.Note that the TypeScript and Javacript to do this are one and the same, difference here is that we have type safe code.TypeScript:  var locator = new Windows.Devices.Geolocation.Geolocator();  locator.getGeopositionAsync().then(function (pos) {        var myLoc = new MyLocation();      myLoc.latitude = pos.coordinate.latitude;      myLoc.longitude = pos.coordinate.longitude;      myLoc.retrieved = Date.now;      myLoc.url = \"<a href='http://maps.googleapis.com/maps/api/staticmap?center='>http://maps.googleapis.com/maps/api/staticmap?center=</a>\"          + myLoc.latitude + \",\" + myLoc.longitude          + \"&amp;zoom=12&amp;size=400x400&amp;sensor=false\";      // add a new img tag to the document      var img = document.createElement(\"img\");      // set the src and style      img.setAttribute(\"src\", myLoc.url);      img.setAttribute(\"style\", \"height:400px;width:400px;\");              // get the paragraph tag we set for the location of the content      var p = document.body.getElementsByTagName(\"p\")[0];      p.appendChild(img);When you hit save you'll notice that on the status bar at the bottom left of Visual Studio it will read \"Compiling TypeScript...\" and then the resulting Javascript will refresh/show on the right pane.  It is important to note that if you have the ,js file open you will get the prompt \"Such and such file is open would you like to reload\".Before you run the application make sure that you enable the Location capabilities in the package manifest file as shown below or you will get a nasty message box letting you know you didn't.Ok, hit F5 and see the results.First you'll get the let me use location services prompt.And then the page is presented with the downloaded map.That's a little get started primer on TypeScript and Windows Store Apps!  Pretty awesome stuff.Tips &amp; Tricks</reference></p>\n\n<h4 id=\"contentpackagetype\">Content / Package Type</h4>\n\n<p>Make sure that all of the TypeScript (.ts) files are marked as None so they are not distributed unnecessarily with your application. </p>\n\n<h4 id=\"debugging\">Debugging</h4>\n\n<p>You can put break points in the generated .js files and have access to the immediate window, watch etc.</p>\n\n<h4 id=\"dependentfiles\">Dependent Files</h4>\n\n<p>I like to see the dependent files like I'm used to seeing in other project types (see below).  Since this is not built in to the Windows Store functionality with TypeScript yet, here is how to do it.You need to edit the project file.  The best way to do this is to use the Power Commands for Visual Studio extension, or browse to it and open in notepad or some other text editor.<table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://4.bp.blogspot.com/-SyPYCvo47uI/UHRukrMHldI/AAAAAAAAAX8/lmfi9arHPHQ/s1600/PowerCommands.PNG\"><img src=\"http://4.bp.blogspot.com/-SyPYCvo47uI/UHRukrMHldI/AAAAAAAAAX8/lmfi9arHPHQ/s400/PowerCommands.PNG\" alt=\"\" title=\"\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">PowerCommands for Visual Studio</td></tr></tbody></table>For this solution locate the data.ts reference in the file and change it to the following:    <content include=\"js\\data.js\">      <dependentupon>data.ts</dependentupon>    </content>    <none include=\"js\\data.ts\"></none>Save the file and reload the project and you can now see that the .js file will be shown below the .ts file.ConclusionI have had some real fun getting into this and trying it out with the Store apps.  Coming from a C# / XAML life for the last many years, it will be interesting for me to back to some scripting.  I like the option and I see some really cool opportunities with TypeScript.DOWNLOAD THE CODE FOR THE EXAMPLE</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1349808480001,"created_by":1,"updated_at":1350055518458,"updated_by":1,"published_at":1349808480001,"published_by":1},{"id":24,"uuid":"20c58a09-60ad-47d9-8138-2f8b20bdfd5b","title":"Richmond Code Camp","slug":"richmond_code_camp","markdown":"I will be giving two talks this Saturday at&nbsp;[Richmond Code Camp](http://richmondcodecamp.org/), being held at the University of Richmond in Richmond, Va.&nbsp; For directions and more information visit [http://richmondcodecamp.org/](http://richmondcodecamp.org/)and/or follow @CodeCamp on Twitter. Schedule for other sessions [here](http://confs.com/rcc2012.1/).\n\n### &nbsp;\n\n### My Sessions\n\n#### Building Windows 8 Apps w/ MVVM Light\n 8:45 AM - 10:00 AM in Room 2\nMVVM Light is a great toolkit for building Window Phone applications and has been updated for building Windows 8 Modern UI apps.  In this session, you will learn how to get the package installed, what is different from Windows Phone development in MVVM Light and how to start your first app in Windows 8. \n\n#### Introduction to ASP.NET WebAPI - Why you should be using it. \n12:30 PM - 1:45 PM in Room 1This is an introduction to ASP.NET WebAPI and how easy it is to get started and use it in your application development when building RESTful services.Hope to see  you there, should be an exciting event!","html":"<p>I will be giving two talks this Saturday at&nbsp;<a href=\"http://richmondcodecamp.org/\">Richmond Code Camp</a>, being held at the University of Richmond in Richmond, Va.&nbsp; For directions and more information visit <a href=\"http://richmondcodecamp.org/\">http://richmondcodecamp.org/</a>and/or follow @CodeCamp on Twitter. Schedule for other sessions <a href=\"http://confs.com/rcc2012.1/\">here</a>.</p>\n\n<h3 id=\"nbsp\">&nbsp;</h3>\n\n<h3 id=\"mysessions\">My Sessions</h3>\n\n<h4 id=\"buildingwindows8appswmvvmlight\">Building Windows 8 Apps w/ MVVM Light</h4>\n\n<p>8:45 AM - 10:00 AM in Room 2\nMVVM Light is a great toolkit for building Window Phone applications and has been updated for building Windows 8 Modern UI apps.  In this session, you will learn how to get the package installed, what is different from Windows Phone development in MVVM Light and how to start your first app in Windows 8. </p>\n\n<h4 id=\"introductiontoaspnetwebapiwhyyoushouldbeusingit\">Introduction to ASP.NET WebAPI - Why you should be using it.</h4>\n\n<p>12:30 PM - 1:45 PM in Room 1This is an introduction to ASP.NET WebAPI and how easy it is to get started and use it in your application development when building RESTful services.Hope to see  you there, should be an exciting event!</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1349111580000,"created_by":1,"updated_at":1349111590540,"updated_by":1,"published_at":1349111580000,"published_by":1},{"id":25,"uuid":"7cdff59d-f669-4d16-8a1c-9953eb36efa1","title":"RadCustomHubTile from Telerik for Windows 8 UI","slug":"rad_custom_hub_tile_from_telerik_for_windows_8_ui","markdown":"### Introduction\n[Telerik](http://www.telerik.com/) recently released their [Windows 8 UI Controls](http://www.telerik.com/products/windows-metro/overview.aspx) to RC&nbsp;on September 18th ([see post here](http://blogs.telerik.com/blogs/posts/12-09-18/what-s-new-in-telerik-windows-8-ui-controls-release-candidate.aspx?utm_source=spboyer)), and this is probably on the first in a series of posts I will put out showing them off.\n\nThe first control here is the RadCustomHubTile.&nbsp; I chose this because I am in the process of porting my [Find Amber app from Windows Phone](http://spboyer.me/AboutAmberApp) to Windows&nbsp;8 and I wanted to transition the app without drifting too far from the spirit of the original app.&nbsp; \n\n<table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\">[![](http://1.bp.blogspot.com/-OoJxg94Y9sg/UFtzIhwbmQI/AAAAAAAAAU8/_9KJDXTNF2g/s320/promoimage.png)](http://1.bp.blogspot.com/-OoJxg94Y9sg/UFtzIhwbmQI/AAAAAAAAAU8/_9KJDXTNF2g/s1600/promoimage.png)</td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">RadControls from Telerik used here for\nCurrent List and Search &amp; Stats section</td></tr></tbody></table>You can see from the screen shot&nbsp;that I had already used the [RadControls for Windows Phone](http://www.telerik.com/products/windows-phone.aspx), so now I can bring some of the design through.\n\nThe controls do support both HTML and XAML design, if the current version of the controls do not include either or; I assure you the version you seek is in development and on its way.\n\n### Getting Started\nThe RadCustomHubTile allows **any **user-defined content rather than predefined parts that you may find in a RadHubTile or RadSlideTile, and as in most if not all of the Telerik controls; MVVM as well as code based binding is supported.\n\nPrior to trying this example, please [download the controls from Telerik](http://www.telerik.com/download-trial-file.aspx?pid=981) and note that I am using MVVM Light as the MVVM Framework.&nbsp; You can see how to install MVVM Light via nuget by opening the Package Manager console and running \"Install-Package mvvmlight\".&nbsp; If you have any trouble with that please see [http://mvvmlight.codeplex.com](http://mvvmlight.codeplex.com/)&nbsp;or contact me via [twitter (@spboyer)](http://twitter.com/spboyer)&nbsp;OR see my blog post on [how to get started with Windows 8 and MVVM Light](http://blog.tattoocoder.com/2012/08/getting-started-w-windows-8-mvvm-light.html).\n\nIn the following example you will see:\n\n*   MVVM Binding\n*   Content locally bound\n*   Content bound from an internet URI\n*   Complex front and back content for the tileThis is a moderately simply example.&nbsp; I started with a Blank Solution in Visual Studio 2012 and called it RadCustomHubTile (in retrospect probably should have stuck with App1).\n\nInstall the MVVM Light Framework via nuget (see above), you will have to make a change to the App.xaml file.&nbsp; When installing this, it adds the reference to the namespace in the old way\n\n**_&nbsp; xmlns:vm=\"clr-namespace:RadHubTile.ViewModel\" _**\n****\nyou need to change this to:\n\n**_&nbsp;xmlns:vm=\"using:RadHubTile.ViewModel\" _**\n\n&nbsp;A little house keeping to make it look nice. Yes I care what it looks like even for this. Go ahead and add the following below the &lt;Grid&gt; tag to add the header to the initial page.&nbsp; You can change the title if you like and run (F5).\n\n<pre class=\"brush:xml\">&lt;Grid.RowDefinitions&gt;\n&nbsp;&lt;RowDefinition Height=\"140\"/&gt;\n&nbsp;&lt;RowDefinition Height=\"*\"/&gt;\n&lt;/Grid.RowDefinitions&gt;\n\n&lt;Grid&gt;\n&nbsp;&lt;Grid.ColumnDefinitions&gt;\n&nbsp;&nbsp;&lt;ColumnDefinition Width=\"Auto\"/&gt;\n&nbsp;&nbsp;&lt;ColumnDefinition Width=\"*\"/&gt;\n&nbsp;&lt;/Grid.ColumnDefinitions&gt;\n&nbsp;&lt;Button x:Name=\"backButton\"&nbsp; Style=\"{StaticResource BackButtonStyle}\"/&gt;\n&nbsp;&lt;TextBlock x:Name=\"pageTitle\" Text=\"Rad Custom Hub Tile\" Grid.Column=\"1\" IsHitTestVisible=\"false\" Style=\"{StaticResource PageHeaderTextStyle}\" Foreground=\"#FFADD808\"/&gt;\n&lt;/Grid&gt;\n</pre>\n<table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\">[![](http://3.bp.blogspot.com/-wNthFGNkBGg/UGJrumR5TRI/AAAAAAAAAVc/6ZFQ4gAtxoM/s400/Title_xaml.png)](http://3.bp.blogspot.com/-wNthFGNkBGg/UGJrumR5TRI/AAAAAAAAAVc/6ZFQ4gAtxoM/s1600/Title_xaml.png)</td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Title and Back button</td></tr></tbody></table>\n\nNext, lets add the RadCustomHubTile Control, and the best way to do this is to simply drag it from the toolbox right into the spot within the XAML. This is something you could not do in Windows Phone which is a big step in my opinion.\n\nIt will add the namespace and the references to the project.\n\nTo clean it up a little and make sure that you are using within the design guidelines, wrap the RadHubControl with a Grid with the following settings.\n\n<pre class=\"brush:xml\">&lt;Grid Grid.Row=\"1\" Margin=\"115,0,0,0\"&gt;\n\n&nbsp; &lt;Primitives:RadCustomHubTile /&gt;\n\n&lt;/Grid&gt;</pre>\nIf you are wondering why my RadCustomHubTile is prefixed, it is because I have changed or altered the declaration at the top of the page to be the following (this matches my Phone app stuff).\n\n> xmlns:Primitives=\"using:Telerik.UI.Xaml.Controls.Primitives\"&nbsp;\n\n### Setting Front and Back Content\nThe content for the front and back are defined by setting the content within the <radcustomhubtile.frontcontent> and <radcustomhubtile.backcontent> respectively.  Pretty simple, so here is an example:</radcustomhubtile.backcontent></radcustomhubtile.frontcontent><pre class=\"brush:xml\">&lt;Primitives:RadCustomHubTile Height=\"300\" Width=\"300\"&gt;\n &lt;Primitives:RadCustomHubTile.FrontContent&gt;\n  &lt;Grid&gt;\n   &lt;Image x:Name=\"imgBlogger\" \n        Source=\"{Binding Photo, Mode=TwoWay}\" \n        Height=\"300\" Width=\"300\" \n        Stretch=\"UniformToFill\" Margin=\"0\" \n        HorizontalAlignment=\"Left\" \n        VerticalAlignment=\"Center\" /&gt;\n\n   &lt;Rectangle Height=\"65\" Fill=\"#99000000\" VerticalAlignment=\"Bottom\" /&gt;\n\n   &lt;StackPanel Orientation=\"Horizontal\"&gt;\n    &lt;TextBlock  Text=\"Blogger:\" \n        Foreground=\"White\" Width=\"126\" Height=\"43\" \n        VerticalAlignment=\"Bottom\" \n        Margin=\"10,0,0,14\" Style=\"{StaticResource SubheaderTextStyle}\" \n        HorizontalAlignment=\"Left\" /&gt;\n\n    &lt;TextBlock  Text=\"{Binding UserName}\" \n        Foreground=\"White\" Height=\"43\" \n        VerticalAlignment=\"Bottom\" Margin=\"0,0,0,14\" \n        Style=\"{StaticResource SubheaderTextStyle}\"/&gt;\n   &lt;/StackPanel&gt;\n  &lt;/Grid&gt;\n &lt;/Primitives:RadCustomHubTile.FrontContent&gt;\n\n &lt;Primitives:RadCustomHubTile.BackContent&gt;\n  &lt;Grid&gt;\n   &lt;Image x:Name=\"img\" \n         Source=\"{Binding Thumbnail, Mode=TwoWay}\" \n         Height=\"300\" Width=\"300\" \n         Stretch=\"UniformToFill\" Margin=\"0\" \n         HorizontalAlignment=\"Left\" \n         VerticalAlignment=\"Center\" /&gt;\n\n   &lt;Rectangle Height=\"65\" Fill=\"#99000000\" VerticalAlignment=\"Bottom\" /&gt;\n\n   &lt;TextBlock  Text=\"{Binding Title, Mode=TwoWay}\" \n        Foreground=\"White\" Width=\"270\" Height=\"30\" \n        VerticalAlignment=\"Bottom\"  \n        Margin=\"0,0,0,30\" Style=\"{StaticResource BasicTextStyle}\" /&gt;\n\n   &lt;TextBlock  Text=\"{Binding SubTitle, Mode=TwoWay}\" \n        Foreground=\"White\" Width=\"270\" Height=\"30\" \n        VerticalAlignment=\"Bottom\" Margin=\"0,0,0,5\" \n        Style=\"{StaticResource BasicTextStyle}\"/&gt;\n  &lt;/Grid&gt;\n &lt;/Primitives:RadCustomHubTile.BackContent&gt;\n&lt;/Primitives:RadCustomHubTile&gt;\n\n</pre>\nNote that you will want to wrap your content with the FrontContent / BackContent tags in Grid, StackPanel etc as the designer will give you the \"Content cannot be set more than once error\".\n\nHere is the MainViewModel that is bound. Note that the Blogger image (me), is pulled from an internet source uri and the back image is pulled from the project itself. The string properties are bound simply.\n\n<pre class=\"brush: csharp\">using GalaSoft.MvvmLight;\nusing System;\nusing Windows.UI.Xaml.Media;\nusing Windows.UI.Xaml.Media.Imaging;\n\nnamespace RadHubTile.ViewModel\n{\n    public class MainViewModel : ViewModelBase\n    {\n        /// &lt;summary&gt;\n        /// Initializes a new instance of the MainViewModel class.\n        /// &lt;/summary&gt;\n        public MainViewModel() { }\n\n        public string Photo\n        {\n            get { return \"http://3.bp.blogspot.com/-yBHsXXtsWWo/UCkc916wnfI/AAAAAAAAAN0/FcKOE2P-gGQ/s1600/profilepic.png\"; }\n        }\n\n        public string UserName\n        {\n            get { return \"Shayne Boyer\"; }\n        }\n\n        public ImageSource Thumbnail\n        {\n            get { return new BitmapImage(new System.Uri(new Uri(\"ms-appx:\"), \"/Assets/RadCustomHubTile.png\"));}\n        }\n\n        public string Title\n        {\n            get { return \"Telerik Windows 8 UI Controls\"; }\n        }\n\n        public string SubTitle\n        {\n            get { return \"RadCustomHubTile\"; }\n        }\n    }\n}\n\n</pre>\n\nSo what does it all look like?\n\nFront\n\nBack\n\nOne other item to note is that you can alter the duration of the flip/rotation by setting the UpdateInterval which is a TimeSpan. So setting the value to \"0:0:5\" would be equal to 5 seconds. &nbsp;There is also FlowDirection and many other properties to customize the Tile to your liking. &nbsp;I'd like to see what you can do with it. &nbsp;Download the controls today and let me know what you working on and if you have any questions.","html":"<h3 id=\"introduction\">Introduction</h3>\n\n<p><a href=\"http://www.telerik.com/\">Telerik</a> recently released their <a href=\"http://www.telerik.com/products/windows-metro/overview.aspx\">Windows 8 UI Controls</a> to RC&nbsp;on September 18th (<a href=\"http://blogs.telerik.com/blogs/posts/12-09-18/what-s-new-in-telerik-windows-8-ui-controls-release-candidate.aspx?utm_source=spboyer\">see post here</a>), and this is probably on the first in a series of posts I will put out showing them off.</p>\n\n<p>The first control here is the RadCustomHubTile.&nbsp; I chose this because I am in the process of porting my <a href=\"http://spboyer.me/AboutAmberApp\">Find Amber app from Windows Phone</a> to Windows&nbsp;8 and I wanted to transition the app without drifting too far from the spirit of the original app.&nbsp; </p>\n\n<table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\">[![](http://1.bp.blogspot.com/-OoJxg94Y9sg/UFtzIhwbmQI/AAAAAAAAAU8/_9KJDXTNF2g/s320/promoimage.png)](http://1.bp.blogspot.com/-OoJxg94Y9sg/UFtzIhwbmQI/AAAAAAAAAU8/_9KJDXTNF2g/s1600/promoimage.png)</td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">RadControls from Telerik used here for  \nCurrent List and Search &amp; Stats section</td></tr></tbody></table>You can see from the screen shot&nbsp;that I had already used the [RadControls for Windows Phone](http://www.telerik.com/products/windows-phone.aspx), so now I can bring some of the design through.\n\nThe controls do support both HTML and XAML design, if the current version of the controls do not include either or; I assure you the version you seek is in development and on its way.\n\n### Getting Started\nThe RadCustomHubTile allows **any **user-defined content rather than predefined parts that you may find in a RadHubTile or RadSlideTile, and as in most if not all of the Telerik controls; MVVM as well as code based binding is supported.\n\nPrior to trying this example, please [download the controls from Telerik](http://www.telerik.com/download-trial-file.aspx?pid=981) and note that I am using MVVM Light as the MVVM Framework.&nbsp; You can see how to install MVVM Light via nuget by opening the Package Manager console and running \"Install-Package mvvmlight\".&nbsp; If you have any trouble with that please see [http://mvvmlight.codeplex.com](http://mvvmlight.codeplex.com/)&nbsp;or contact me via [twitter (@spboyer)](http://twitter.com/spboyer)&nbsp;OR see my blog post on [how to get started with Windows 8 and MVVM Light](http://blog.tattoocoder.com/2012/08/getting-started-w-windows-8-mvvm-light.html).\n\nIn the following example you will see:\n\n*   MVVM Binding\n*   Content locally bound\n*   Content bound from an internet URI\n*   Complex front and back content for the tileThis is a moderately simply example.&nbsp; I started with a Blank Solution in Visual Studio 2012 and called it RadCustomHubTile (in retrospect probably should have stuck with App1).\n\nInstall the MVVM Light Framework via nuget (see above), you will have to make a change to the App.xaml file.&nbsp; When installing this, it adds the reference to the namespace in the old way\n\n**_&nbsp; xmlns:vm=\"clr-namespace:RadHubTile.ViewModel\" _**\n****\nyou need to change this to:\n\n**_&nbsp;xmlns:vm=\"using:RadHubTile.ViewModel\" _**\n\n&nbsp;A little house keeping to make it look nice. Yes I care what it looks like even for this. Go ahead and add the following below the &lt;Grid&gt; tag to add the header to the initial page.&nbsp; You can change the title if you like and run (F5).\n\n\n<pre class=\"brush:xml\">&lt;Grid.RowDefinitions&gt;  \n&nbsp;&lt;RowDefinition Height=\"140\"/&gt;\n&nbsp;&lt;RowDefinition Height=\"*\"/&gt;\n&lt;/Grid.RowDefinitions&gt;\n\n&lt;Grid&gt;\n&nbsp;&lt;Grid.ColumnDefinitions&gt;\n&nbsp;&nbsp;&lt;ColumnDefinition Width=\"Auto\"/&gt;\n&nbsp;&nbsp;&lt;ColumnDefinition Width=\"*\"/&gt;\n&nbsp;&lt;/Grid.ColumnDefinitions&gt;\n&nbsp;&lt;Button x:Name=\"backButton\"&nbsp; Style=\"{StaticResource BackButtonStyle}\"/&gt;\n&nbsp;&lt;TextBlock x:Name=\"pageTitle\" Text=\"Rad Custom Hub Tile\" Grid.Column=\"1\" IsHitTestVisible=\"false\" Style=\"{StaticResource PageHeaderTextStyle}\" Foreground=\"#FFADD808\"/&gt;\n&lt;/Grid&gt;\n</pre>  \n\n<table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\">[![](http://3.bp.blogspot.com/-wNthFGNkBGg/UGJrumR5TRI/AAAAAAAAAVc/6ZFQ4gAtxoM/s400/Title_xaml.png)](http://3.bp.blogspot.com/-wNthFGNkBGg/UGJrumR5TRI/AAAAAAAAAVc/6ZFQ4gAtxoM/s1600/Title_xaml.png)</td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Title and Back button</td></tr></tbody></table>\n\n<p>Next, lets add the RadCustomHubTile Control, and the best way to do this is to simply drag it from the toolbox right into the spot within the XAML. This is something you could not do in Windows Phone which is a big step in my opinion.</p>\n\n<p>It will add the namespace and the references to the project.</p>\n\n<p>To clean it up a little and make sure that you are using within the design guidelines, wrap the RadHubControl with a Grid with the following settings.</p>\n\n<pre class=\"brush:xml\">&lt;Grid Grid.Row=\"1\" Margin=\"115,0,0,0\"&gt;\n\n&nbsp; &lt;Primitives:RadCustomHubTile /&gt;\n\n&lt;/Grid&gt;</pre>\nIf you are wondering why my RadCustomHubTile is prefixed, it is because I have changed or altered the declaration at the top of the page to be the following (this matches my Phone app stuff).\n\n> xmlns:Primitives=\"using:Telerik.UI.Xaml.Controls.Primitives\"&nbsp;\n\n### Setting Front and Back Content\nThe content for the front and back are defined by setting the content within the <radcustomhubtile.frontcontent> and <radcustomhubtile.backcontent> respectively.  Pretty simple, so here is an example:</radcustomhubtile.backcontent></radcustomhubtile.frontcontent><pre class=\"brush:xml\">&lt;Primitives:RadCustomHubTile Height=\"300\" Width=\"300\"&gt;  \n &lt;Primitives:RadCustomHubTile.FrontContent&gt;\n  &lt;Grid&gt;\n   &lt;Image x:Name=\"imgBlogger\" \n        Source=\"{Binding Photo, Mode=TwoWay}\" \n        Height=\"300\" Width=\"300\" \n        Stretch=\"UniformToFill\" Margin=\"0\" \n        HorizontalAlignment=\"Left\" \n        VerticalAlignment=\"Center\" /&gt;\n\n   &lt;Rectangle Height=\"65\" Fill=\"#99000000\" VerticalAlignment=\"Bottom\" /&gt;\n\n   &lt;StackPanel Orientation=\"Horizontal\"&gt;\n    &lt;TextBlock  Text=\"Blogger:\" \n        Foreground=\"White\" Width=\"126\" Height=\"43\" \n        VerticalAlignment=\"Bottom\" \n        Margin=\"10,0,0,14\" Style=\"{StaticResource SubheaderTextStyle}\" \n        HorizontalAlignment=\"Left\" /&gt;\n\n    &lt;TextBlock  Text=\"{Binding UserName}\" \n        Foreground=\"White\" Height=\"43\" \n        VerticalAlignment=\"Bottom\" Margin=\"0,0,0,14\" \n        Style=\"{StaticResource SubheaderTextStyle}\"/&gt;\n   &lt;/StackPanel&gt;\n  &lt;/Grid&gt;\n &lt;/Primitives:RadCustomHubTile.FrontContent&gt;\n\n &lt;Primitives:RadCustomHubTile.BackContent&gt;\n  &lt;Grid&gt;\n   &lt;Image x:Name=\"img\" \n         Source=\"{Binding Thumbnail, Mode=TwoWay}\" \n         Height=\"300\" Width=\"300\" \n         Stretch=\"UniformToFill\" Margin=\"0\" \n         HorizontalAlignment=\"Left\" \n         VerticalAlignment=\"Center\" /&gt;\n\n   &lt;Rectangle Height=\"65\" Fill=\"#99000000\" VerticalAlignment=\"Bottom\" /&gt;\n\n   &lt;TextBlock  Text=\"{Binding Title, Mode=TwoWay}\" \n        Foreground=\"White\" Width=\"270\" Height=\"30\" \n        VerticalAlignment=\"Bottom\"  \n        Margin=\"0,0,0,30\" Style=\"{StaticResource BasicTextStyle}\" /&gt;\n\n   &lt;TextBlock  Text=\"{Binding SubTitle, Mode=TwoWay}\" \n        Foreground=\"White\" Width=\"270\" Height=\"30\" \n        VerticalAlignment=\"Bottom\" Margin=\"0,0,0,5\" \n        Style=\"{StaticResource BasicTextStyle}\"/&gt;\n  &lt;/Grid&gt;\n &lt;/Primitives:RadCustomHubTile.BackContent&gt;\n&lt;/Primitives:RadCustomHubTile&gt;\n\n</pre>  \n\n<p>Note that you will want to wrap your content with the FrontContent / BackContent tags in Grid, StackPanel etc as the designer will give you the \"Content cannot be set more than once error\".</p>\n\n<p>Here is the MainViewModel that is bound. Note that the Blogger image (me), is pulled from an internet source uri and the back image is pulled from the project itself. The string properties are bound simply.</p>\n\n<pre class=\"brush: csharp\">using GalaSoft.MvvmLight;  \nusing System;  \nusing Windows.UI.Xaml.Media;  \nusing Windows.UI.Xaml.Media.Imaging;\n\nnamespace RadHubTile.ViewModel  \n{\n    public class MainViewModel : ViewModelBase\n    {\n        /// &lt;summary&gt;\n        /// Initializes a new instance of the MainViewModel class.\n        /// &lt;/summary&gt;\n        public MainViewModel() { }\n\n        public string Photo\n        {\n            get { return \"<a href='http://3.bp.blogspot.com/-yBHsXXtsWWo/UCkc916wnfI/AAAAAAAAAN0/FcKOE2P-gGQ/s1600/profilepic.png'>http://3.bp.blogspot.com/-yBHsXXtsWWo/UCkc916wnfI/AAAAAAAAAN0/FcKOE2P-gGQ/s1600/profilepic.png</a>\"; }\n        }\n\n        public string UserName\n        {\n            get { return \"Shayne Boyer\"; }\n        }\n\n        public ImageSource Thumbnail\n        {\n            get { return new BitmapImage(new System.Uri(new Uri(\"ms-appx:\"), \"/Assets/RadCustomHubTile.png\"));}\n        }\n\n        public string Title\n        {\n            get { return \"Telerik Windows 8 UI Controls\"; }\n        }\n\n        public string SubTitle\n        {\n            get { return \"RadCustomHubTile\"; }\n        }\n    }\n}\n\n</pre>\n\n<p>So what does it all look like?</p>\n\n<p>Front</p>\n\n<p>Back</p>\n\n<p>One other item to note is that you can alter the duration of the flip/rotation by setting the UpdateInterval which is a TimeSpan. So setting the value to \"0:0:5\" would be equal to 5 seconds. &nbsp;There is also FlowDirection and many other properties to customize the Tile to your liking. &nbsp;I'd like to see what you can do with it. &nbsp;Download the controls today and let me know what you working on and if you have any questions.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1348629480000,"created_by":1,"updated_at":1348629840430,"updated_by":1,"published_at":1348629480000,"published_by":1},{"id":26,"uuid":"16260482-80c3-4268-9fac-d5d7189c39a3","title":"User Groups - What do you want from them?","slug":"user_groups_what_do_you_want_from_them_","markdown":"There are many user groups, meetups, developer groups, etc depending on where you live that are available to get involved in.&nbsp; This is one of many ways to meet other developers, see what they are doing, what projects and so fourth are going on in your neck of the woods that you wouldn't necessarily know about.&nbsp; But, one thing that I'll say is that the format is about the same from the 3-5 groups that I participate in the Central Florida Area.&nbsp; I even run a [Windows Phone/8](http://owpug.com/) group here too, and the same could be said.\n\nNow, one thing that I wanted to do was sponsor contests. So I started the [Dark Sky App contest](http://blog.tattoocoder.com/search/label/Contest) to try and put a little something different into the mix, but I wanted to throw the general question out to the world.&nbsp; What do you as a developer, designer, etc. want out of these types of groups?\n\n[![](http://3.bp.blogspot.com/-FYkt0JffdNM/UARtCIRfKGI/AAAAAAAAAGI/ayhSTIsOGTg/s200/403966_267991929973057_869391323_n.jpg)](http://3.bp.blogspot.com/-FYkt0JffdNM/UARtCIRfKGI/AAAAAAAAAGI/ayhSTIsOGTg/s1600/403966_267991929973057_869391323_n.jpg)Typically it's a meeting where on or a few people present on a topic, there is some Q &amp; A and generally some free stuff given away.&nbsp; Now I'm always good for some free nerdy swag or a book, and I will never discount&nbsp;the general social interaction that I get from these groups. Not to mention I have made some pretty good friends and networked with really cool people along the way.&nbsp; Is that all we are looking for?&nbsp; Is there something else you \"need\" from these presentations or gatherings?\n\nPlease comment below and let me know...","html":"<p>There are many user groups, meetups, developer groups, etc depending on where you live that are available to get involved in.&nbsp; This is one of many ways to meet other developers, see what they are doing, what projects and so fourth are going on in your neck of the woods that you wouldn't necessarily know about.&nbsp; But, one thing that I'll say is that the format is about the same from the 3-5 groups that I participate in the Central Florida Area.&nbsp; I even run a <a href=\"http://owpug.com/\">Windows Phone/8</a> group here too, and the same could be said.</p>\n\n<p>Now, one thing that I wanted to do was sponsor contests. So I started the <a href=\"http://blog.tattoocoder.com/search/label/Contest\">Dark Sky App contest</a> to try and put a little something different into the mix, but I wanted to throw the general question out to the world.&nbsp; What do you as a developer, designer, etc. want out of these types of groups?</p>\n\n<p><a href=\"http://3.bp.blogspot.com/-FYkt0JffdNM/UARtCIRfKGI/AAAAAAAAAGI/ayhSTIsOGTg/s1600/403966_267991929973057_869391323_n.jpg\"><img src=\"http://3.bp.blogspot.com/-FYkt0JffdNM/UARtCIRfKGI/AAAAAAAAAGI/ayhSTIsOGTg/s200/403966_267991929973057_869391323_n.jpg\" alt=\"\" title=\"\" /></a>Typically it's a meeting where on or a few people present on a topic, there is some Q &amp; A and generally some free stuff given away.&nbsp; Now I'm always good for some free nerdy swag or a book, and I will never discount&nbsp;the general social interaction that I get from these groups. Not to mention I have made some pretty good friends and networked with really cool people along the way.&nbsp; Is that all we are looking for?&nbsp; Is there something else you \"need\" from these presentations or gatherings?</p>\n\n<p>Please comment below and let me know...</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1348512120000,"created_by":1,"updated_at":1348512154662,"updated_by":1,"published_at":1348512120000,"published_by":1},{"id":27,"uuid":"14ad4fc6-d1f0-442c-bb8d-65056c7d0bb0","title":"Amber Alerts for Windows Phone - Find Amber: I built it!","slug":"amber_alerts_for_windows_phone_find_amber_i_built_it_","markdown":"### [Find Amber Available for Windows Phone](http://www.windowsphone.com/s?appid=05aa4eda-af32-4731-b4b7-a197664a4d88)\n\nFind Amber has finally been approved and is now available in the Windows Phone Store!    This project is close to me, and not in a \"I have lost a child\" way thank God. But I do have children and if something were to happen to any of them I can't imagine what it would be like.\nThere are ways to get this information but generally it is slow to deliver.  Television, Radio, etc. but these delivery mechanisms are allow but allow for detail. In contrast, there is a text message service and/or the road signs that are available which solves the speed of delivery but the content is lacking.  My solution was to give the user both speed of delivery and content. \n\nI decided to combine the latest available technology and tools from Microsoft using [Windows Azure](http://www.windowsazure.com/), [SQL Azure](http://www.windowsazure.com/) and [ASP.NET Web API](http://www.asp.net/) to build a robust system to get the data and deliver it to first the Windows Phone Platform but also create an API that allowed me to expand this to Windows 8 and the other mobility platforms. \n\nThe Windows Azure Services provide the necessary notifications to be sent to the phone when a new Amber Alert has been created. If the user has pinned the application tile to their home screen, they will be notified on the Live Tile if the Amber Alert has occurred in their state or near their location.&nbsp; These notifications are sent within 1 minute of the notification being created at the National Center for Missing &amp; Exploited Children® (NCMEC).\n\nOther features of the application include\n\n*   Most recent or open cases\n*   Cases near you\n*   Statistics\n\n*   Case Type\n*   Month of Year\n*   U.S. Region\n*   Year\n*   Top 10 States*   Cases by State\n*   Case Details\n\n*   Showing all pictures on file\n*   Includes Abductor pictures where applicable\n*   Map of last know location or missing from\n*   Links to Actual Lost Child Poster*   Social and Email Sharing integration\nScreenshots of Find Amber\n<table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\">[![](http://3.bp.blogspot.com/-mCjTxkLwkYk/UFtxYESpFzI/AAAAAAAAAUM/-m3Q5Jxq7c8/s200/1.png)](http://3.bp.blogspot.com/-mCjTxkLwkYk/UFtxYESpFzI/AAAAAAAAAUM/-m3Q5Jxq7c8/s1600/1.png)</td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Current List</td></tr></tbody></table>\n<table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\">[![](http://4.bp.blogspot.com/-G8wG0c4bChY/UFtxYvtgDiI/AAAAAAAAAUU/11rFyQHVmFE/s200/2.png)](http://4.bp.blogspot.com/-G8wG0c4bChY/UFtxYvtgDiI/AAAAAAAAAUU/11rFyQHVmFE/s1600/2.png)</td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Other Options</td></tr></tbody></table>\n<table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\">[![](http://1.bp.blogspot.com/-pTYAYafiqx8/UFtxZ-AfoKI/AAAAAAAAAUk/QmI5bXZHyY4/s200/details.png)](http://1.bp.blogspot.com/-pTYAYafiqx8/UFtxZ-AfoKI/AAAAAAAAAUk/QmI5bXZHyY4/s1600/details.png)</td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Child Details</td></tr></tbody></table>\n<table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\">[![](http://2.bp.blogspot.com/-3mc2TpdXA3Q/UFtxa3WCxtI/AAAAAAAAAUs/iibmu-OzG80/s200/poster.png)](http://2.bp.blogspot.com/-3mc2TpdXA3Q/UFtxa3WCxtI/AAAAAAAAAUs/iibmu-OzG80/s1600/poster.png)</td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Poster View</td></tr></tbody></table>\n<table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\">[![](http://1.bp.blogspot.com/-3Fuatj1hnrw/UFtxbggKinI/AAAAAAAAAU0/HSKLZTPLztY/s200/statistics.png)](http://1.bp.blogspot.com/-3Fuatj1hnrw/UFtxbggKinI/AAAAAAAAAU0/HSKLZTPLztY/s1600/statistics.png)</td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Statistic Graphs</td></tr></tbody></table>\n\nOther credits\n\n[Telerik](http://telerik.com/) - [RadControls for Windows Phone](http://www.telerik.com/products/windows-phone.aspx)\n\n[MVVM Light Toolkit](http://mvvmlight.codeplex.com/)&nbsp;by Laurent Bugnion ([@LBugnion](http://www.twitter.com/LBugnion)) : Great MVVM framework, supports Silverlight, WPF, Windows Phone and now Windows 8.&nbsp; I blog about it and give talks a code camps and user groups.\n\n[PhoneFlipMenu](http://phoneflipmenu.codeplex.com/) by Scott Lovegrove ([@scottisafool](http://www.twitter.com/scottisafool)) : this is officially being moved to [Coding4FunToolkit](http://coding4fun.codeplex.com/).\n ","html":"<h3 id=\"findamberavailableforwindowsphonehttpwwwwindowsphonecomsappid05aa4edaaf324731b4b7a197664a4d88\"><a href=\"http://www.windowsphone.com/s?appid=05aa4eda-af32-4731-b4b7-a197664a4d88\">Find Amber Available for Windows Phone</a></h3>\n\n<p>Find Amber has finally been approved and is now available in the Windows Phone Store!    This project is close to me, and not in a \"I have lost a child\" way thank God. But I do have children and if something were to happen to any of them I can't imagine what it would be like. <br />\nThere are ways to get this information but generally it is slow to deliver.  Television, Radio, etc. but these delivery mechanisms are allow but allow for detail. In contrast, there is a text message service and/or the road signs that are available which solves the speed of delivery but the content is lacking.  My solution was to give the user both speed of delivery and content. </p>\n\n<p>I decided to combine the latest available technology and tools from Microsoft using <a href=\"http://www.windowsazure.com/\">Windows Azure</a>, <a href=\"http://www.windowsazure.com/\">SQL Azure</a> and <a href=\"http://www.asp.net/\">ASP.NET Web API</a> to build a robust system to get the data and deliver it to first the Windows Phone Platform but also create an API that allowed me to expand this to Windows 8 and the other mobility platforms. </p>\n\n<p>The Windows Azure Services provide the necessary notifications to be sent to the phone when a new Amber Alert has been created. If the user has pinned the application tile to their home screen, they will be notified on the Live Tile if the Amber Alert has occurred in their state or near their location.&nbsp; These notifications are sent within 1 minute of the notification being created at the National Center for Missing &amp; Exploited Children® (NCMEC).</p>\n\n<p>Other features of the application include</p>\n\n<ul>\n<li>Most recent or open cases</li>\n<li>Cases near you</li>\n<li><p>Statistics</p></li>\n<li><p>Case Type</p></li>\n<li>Month of Year</li>\n<li>U.S. Region</li>\n<li>Year</li>\n<li>Top 10 States*   Cases by State</li>\n<li><p>Case Details</p></li>\n<li><p>Showing all pictures on file</p></li>\n<li>Includes Abductor pictures where applicable</li>\n<li>Map of last know location or missing from</li>\n<li>Links to Actual Lost Child Poster*   Social and Email Sharing integration\nScreenshots of Find Amber  </li>\n</ul>\n\n<table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\">[![](http://3.bp.blogspot.com/-mCjTxkLwkYk/UFtxYESpFzI/AAAAAAAAAUM/-m3Q5Jxq7c8/s200/1.png)](http://3.bp.blogspot.com/-mCjTxkLwkYk/UFtxYESpFzI/AAAAAAAAAUM/-m3Q5Jxq7c8/s1600/1.png)</td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Current List</td></tr></tbody></table>  \n\n<table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\">[![](http://4.bp.blogspot.com/-G8wG0c4bChY/UFtxYvtgDiI/AAAAAAAAAUU/11rFyQHVmFE/s200/2.png)](http://4.bp.blogspot.com/-G8wG0c4bChY/UFtxYvtgDiI/AAAAAAAAAUU/11rFyQHVmFE/s1600/2.png)</td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Other Options</td></tr></tbody></table>  \n\n<table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\">[![](http://1.bp.blogspot.com/-pTYAYafiqx8/UFtxZ-AfoKI/AAAAAAAAAUk/QmI5bXZHyY4/s200/details.png)](http://1.bp.blogspot.com/-pTYAYafiqx8/UFtxZ-AfoKI/AAAAAAAAAUk/QmI5bXZHyY4/s1600/details.png)</td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Child Details</td></tr></tbody></table>  \n\n<table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\">[![](http://2.bp.blogspot.com/-3mc2TpdXA3Q/UFtxa3WCxtI/AAAAAAAAAUs/iibmu-OzG80/s200/poster.png)](http://2.bp.blogspot.com/-3mc2TpdXA3Q/UFtxa3WCxtI/AAAAAAAAAUs/iibmu-OzG80/s1600/poster.png)</td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Poster View</td></tr></tbody></table>  \n\n<table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\">[![](http://1.bp.blogspot.com/-3Fuatj1hnrw/UFtxbggKinI/AAAAAAAAAU0/HSKLZTPLztY/s200/statistics.png)](http://1.bp.blogspot.com/-3Fuatj1hnrw/UFtxbggKinI/AAAAAAAAAU0/HSKLZTPLztY/s1600/statistics.png)</td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Statistic Graphs</td></tr></tbody></table>\n\n<p>Other credits</p>\n\n<p><a href=\"http://telerik.com/\">Telerik</a> - <a href=\"http://www.telerik.com/products/windows-phone.aspx\">RadControls for Windows Phone</a></p>\n\n<p><a href=\"http://mvvmlight.codeplex.com/\">MVVM Light Toolkit</a>&nbsp;by Laurent Bugnion (<a href=\"http://www.twitter.com/LBugnion\">@LBugnion</a>) : Great MVVM framework, supports Silverlight, WPF, Windows Phone and now Windows 8.&nbsp; I blog about it and give talks a code camps and user groups.</p>\n\n<p><a href=\"http://phoneflipmenu.codeplex.com/\">PhoneFlipMenu</a> by Scott Lovegrove (<a href=\"http://www.twitter.com/scottisafool\">@scottisafool</a>) : this is officially being moved to <a href=\"http://coding4fun.codeplex.com/\">Coding4FunToolkit</a>.\n </p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1348170840000,"created_by":1,"updated_at":1348170854439,"updated_by":1,"published_at":1348170840000,"published_by":1},{"id":28,"uuid":"64a38215-f5e8-41ea-b02d-799c43ed9b4a","title":"SimpleIoc and the Messenger Service in MVVM Light","slug":"simple_ioc_and_the_messenger_service_in_mvvm_light","markdown":"[CodeProject](http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=2961115)\nThe SimpleIoc addition in the most recent version of MVVMLight is a great add and really simplified the ViewModelLocator across all of the platforms supported in this framework.    \n\nIf you are not familiar with MVVM Light or what you types of project platforms it supports please go to [http://mvvmlight.codeplex.com](http://mvvmlight.codeplex.com/) or [www.galasoft.ch/mvvm](http://www.galasoft.ch/mvvm) to learn more.\n\nHowever if you are using the Messenger Service in MVVM Light to perform a set of actions to do the following:\n\n*   User takes an action\n*   Application changes views\n*   Application send message to display or load data\nthen it is important to note that there are some differences in the way that the ViewModels are loaded in comparison to the previous version of MVVM Light.\n\nLets look at the ViewModelLocator in the new version:\n\n<pre class=\"brush: csharp\">\n&nbsp; &nbsp; public class ViewModelLocator\n\n&nbsp; &nbsp; {\n\n&nbsp; &nbsp; &nbsp; &nbsp; static ViewModelLocator()\n\n&nbsp; &nbsp; &nbsp; &nbsp; {\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ServiceLocator.SetLocatorProvider(() =&gt; SimpleIoc.Default);\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (ViewModelBase.IsInDesignModeStatic)\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SimpleIoc.Default.Register&lt;IDataService, Design.DesignDataService&gt;();\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SimpleIoc.Default.Register&lt;IDataService, DataService&gt;();\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SimpleIoc.Default.Register&lt;MainViewModel&gt;(); &nbsp; &nbsp; &nbsp; &nbsp; \n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SimpleIoc.Default.Register&lt;SecondViewModel&gt;();\n\n&nbsp; &nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp; &nbsp; &nbsp; /// &lt;summary&gt;\n\n&nbsp; &nbsp; &nbsp; &nbsp; /// Gets the Main property.\n\n&nbsp; &nbsp; &nbsp; &nbsp; /// &lt;/summary&gt;\n\n&nbsp; &nbsp; &nbsp; &nbsp; [System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\",\n\n&nbsp; &nbsp; &nbsp; &nbsp; \"CA1822:MarkMembersAsStatic\",\n\n&nbsp; &nbsp; &nbsp; &nbsp; Justification = \"This non-static member is needed for data binding purposes.\")]\n\n&nbsp; &nbsp; &nbsp; &nbsp; public MainViewModel Main\n\n&nbsp; &nbsp; &nbsp; &nbsp; {\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; get\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return ServiceLocator.Current.GetInstance&lt;MainViewModel&gt;();\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp;}\n\n</pre>\n\nNotice that in comparison to what you may have seen in the past version, there is a single property to the ViewModel and a simple line in the constructor here to register the ViewModel with the Ioc Container and that is it.\n\nThe property for the ViewModel is Lazy, meaning that it is loaded on demand and is a singleton.&nbsp; You can create multiple instances by passing in a key upon creation, but for this example I'll keep it simple.\n\nGiven the scenario above you will get the result of the secondary view not getting the message sent event though you have registered the message with the Message Service and have an action ready to handle it.&nbsp; BUT the second time through it's fine and operates as it should.&nbsp; What has happened?\n\nVery simply, the examples you have seen in the past very rarely ever cover situations in the real world nor do they ever go far enough to look at the overloads in the constructor etc.\n\nWhat has happened here is that the ViewModel **MUST **exist first in order to take action on the message.&nbsp;Moreover, the Messenger Service in MVVM Light does not operate like a Service Bus or Message Queue where the messages stay there until they are read.&nbsp; It is more similar to Events, a fire and forget model.\n\nIn order to alleviate said problem, simple pass in \"true\" to the Register call in the SimpleIoc to create the instance of the ViewModel immediately and go on with your coding.\n\n<pre class=\"brush: csharp\">&nbsp; SimpleIoc.Default.Register&lt;SecondViewModel&gt;(true);\n\n</pre>\n\nThe previous version of MVVM Light created all of the ViewModels immediately, although not too much of an issue; there are instances where a user may not go to every view in the application and the idea here is to only load what is needed and keep the View and ViewModels loaded in memory when necessary.\n\nIf you have questions please comment and/or contact me on twitter [@spboyer](http://www.twitter.com/spboyer)","html":"<p><a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=2961115\">CodeProject</a>\nThe SimpleIoc addition in the most recent version of MVVMLight is a great add and really simplified the ViewModelLocator across all of the platforms supported in this framework.    </p>\n\n<p>If you are not familiar with MVVM Light or what you types of project platforms it supports please go to <a href=\"http://mvvmlight.codeplex.com/\">http://mvvmlight.codeplex.com</a> or <a href=\"http://www.galasoft.ch/mvvm\">www.galasoft.ch/mvvm</a> to learn more.</p>\n\n<p>However if you are using the Messenger Service in MVVM Light to perform a set of actions to do the following:</p>\n\n<ul>\n<li>User takes an action</li>\n<li>Application changes views</li>\n<li>Application send message to display or load data\nthen it is important to note that there are some differences in the way that the ViewModels are loaded in comparison to the previous version of MVVM Light.</li>\n</ul>\n\n<p>Lets look at the ViewModelLocator in the new version:</p>\n\n<pre class=\"brush: csharp\">  \n&nbsp; &nbsp; public class ViewModelLocator\n\n&nbsp; &nbsp; {\n\n&nbsp; &nbsp; &nbsp; &nbsp; static ViewModelLocator()\n\n&nbsp; &nbsp; &nbsp; &nbsp; {\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ServiceLocator.SetLocatorProvider(() =&gt; SimpleIoc.Default);\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (ViewModelBase.IsInDesignModeStatic)\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SimpleIoc.Default.Register&lt;IDataService, Design.DesignDataService&gt;();\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SimpleIoc.Default.Register&lt;IDataService, DataService&gt;();\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SimpleIoc.Default.Register&lt;MainViewModel&gt;(); &nbsp; &nbsp; &nbsp; &nbsp; \n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SimpleIoc.Default.Register&lt;SecondViewModel&gt;();\n\n&nbsp; &nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp; &nbsp; &nbsp; /// &lt;summary&gt;\n\n&nbsp; &nbsp; &nbsp; &nbsp; /// Gets the Main property.\n\n&nbsp; &nbsp; &nbsp; &nbsp; /// &lt;/summary&gt;\n\n&nbsp; &nbsp; &nbsp; &nbsp; [System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\",\n\n&nbsp; &nbsp; &nbsp; &nbsp; \"CA1822:MarkMembersAsStatic\",\n\n&nbsp; &nbsp; &nbsp; &nbsp; Justification = \"This non-static member is needed for data binding purposes.\")]\n\n&nbsp; &nbsp; &nbsp; &nbsp; public MainViewModel Main\n\n&nbsp; &nbsp; &nbsp; &nbsp; {\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; get\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return ServiceLocator.Current.GetInstance&lt;MainViewModel&gt;();\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp;}\n\n</pre>\n\n<p>Notice that in comparison to what you may have seen in the past version, there is a single property to the ViewModel and a simple line in the constructor here to register the ViewModel with the Ioc Container and that is it.</p>\n\n<p>The property for the ViewModel is Lazy, meaning that it is loaded on demand and is a singleton.&nbsp; You can create multiple instances by passing in a key upon creation, but for this example I'll keep it simple.</p>\n\n<p>Given the scenario above you will get the result of the secondary view not getting the message sent event though you have registered the message with the Message Service and have an action ready to handle it.&nbsp; BUT the second time through it's fine and operates as it should.&nbsp; What has happened?</p>\n\n<p>Very simply, the examples you have seen in the past very rarely ever cover situations in the real world nor do they ever go far enough to look at the overloads in the constructor etc.</p>\n\n<p>What has happened here is that the ViewModel <em>*MUST *</em>exist first in order to take action on the message.&nbsp;Moreover, the Messenger Service in MVVM Light does not operate like a Service Bus or Message Queue where the messages stay there until they are read.&nbsp; It is more similar to Events, a fire and forget model.</p>\n\n<p>In order to alleviate said problem, simple pass in \"true\" to the Register call in the SimpleIoc to create the instance of the ViewModel immediately and go on with your coding.</p>\n\n<pre class=\"brush: csharp\">&nbsp; SimpleIoc.Default.Register&lt;SecondViewModel&gt;(true);\n\n</pre>\n\n<p>The previous version of MVVM Light created all of the ViewModels immediately, although not too much of an issue; there are instances where a user may not go to every view in the application and the idea here is to only load what is needed and keep the View and ViewModels loaded in memory when necessary.</p>\n\n<p>If you have questions please comment and/or contact me on twitter <a href=\"http://www.twitter.com/spboyer\">@spboyer</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1347812160000,"created_by":1,"updated_at":1347850944582,"updated_by":1,"published_at":1347812160000,"published_by":1},{"id":29,"uuid":"b3fb3cbc-cea5-4252-8eaa-b11504bb60ba","title":"What are you looking for as a Mobile Developer in a Blog Post?","slug":"what_are_you_looking_for_as_a_mobile_developer_in_a_blog_post_","markdown":"The mobile development industry has probably the greatest up swing in comparison to the other development paths over the last 5 years.&nbsp; What I mean is that many more developers are focusing on either getting into mobile development (as in native apps), making sure their web apps are responsive and scale or adjust for a mobile viewport (html5) etc.\n\nSo, for those developers who blog like myself I am curious what you are looking for when reading our stuff...\n\n[Check out this survey](http://www.surveymonkey.com/s/YVC66KM) and let me know what you want to get out of article related to mobile development.\n\nThanks.","html":"<p>The mobile development industry has probably the greatest up swing in comparison to the other development paths over the last 5 years.&nbsp; What I mean is that many more developers are focusing on either getting into mobile development (as in native apps), making sure their web apps are responsive and scale or adjust for a mobile viewport (html5) etc.</p>\n\n<p>So, for those developers who blog like myself I am curious what you are looking for when reading our stuff...</p>\n\n<p><a href=\"http://www.surveymonkey.com/s/YVC66KM\">Check out this survey</a> and let me know what you want to get out of article related to mobile development.</p>\n\n<p>Thanks.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1347290400000,"created_by":1,"updated_at":1347290406187,"updated_by":1,"published_at":1347290400000,"published_by":1},{"id":30,"uuid":"35110c2e-0be6-4c37-8b92-73568b17b741","title":"Southwest Florida Code Camp","slug":"southwest_florida_code_camp","markdown":"I will be giving two talks this Saturday at [Southwest  Florida Code Camp](http://codecamp.swfldev.net/Home/Index). If you are interested in hearing about ASP.NET WebAPI and/or MVVM Light, stop by either of my talks.\n\n&nbsp;8:30 - 9:40 AM (Room 128) -&nbsp;**Introduction to ASP.NET WebAPI** - Why you should be using it!\n\n&nbsp;9:40 - 10:40 AM &nbsp;(Room 128)&nbsp;&nbsp;-&nbsp;**Building Windows Phone Apps w/ MVVM Light&nbsp;**\n\nHope to see you there, should be an exciting event!","html":"<p>I will be giving two talks this Saturday at <a href=\"http://codecamp.swfldev.net/Home/Index\">Southwest  Florida Code Camp</a>. If you are interested in hearing about ASP.NET WebAPI and/or MVVM Light, stop by either of my talks.</p>\n\n<p>&nbsp;8:30 - 9:40 AM (Room 128) -&nbsp;<strong>Introduction to ASP.NET WebAPI</strong> - Why you should be using it!</p>\n\n<p>&nbsp;9:40 - 10:40 AM &nbsp;(Room 128)&nbsp;&nbsp;-&nbsp;<strong>Building Windows Phone Apps w/ MVVM Light&nbsp;</strong></p>\n\n<p>Hope to see you there, should be an exciting event!</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1346964780000,"created_by":1,"updated_at":1346964824674,"updated_by":1,"published_at":1346964780000,"published_by":1},{"id":31,"uuid":"a8f8a088-98b0-4bff-b2a9-721ed9c3ad3f","title":"Looking at Windows Azure Mobile Services with Fiddler","slug":"looking_at_windows_azure_mobile_services_with_fiddler","markdown":"[CodeProject](http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=2961115)\nAs usual throughout the day I have MetroTwit open and toast are constantly popping up here and there and I glance over to see what’s what.&nbsp; Then I see. from [@WindowsAzure](http://twitter.com/WindowsAzure) this:\n\nAnd all work stopped for me to check this out.&nbsp; Other than Windows Phone and Windows 8; I really love the new ASP.NET WebAPI and REST Services capabilities it has made so easy (watch for my next post on that), and seeing this I was thinking – awesome but only for Windows 8???&nbsp; So…I immediately responded and got a response:\n[![twitter_conversation](http://lh6.ggpht.com/-R4_IrxpjRIA/UEDKsMNhR-I/AAAAAAAAAQg/T98JNPHYxhQ/twitter_conversation_thumb%25255B1%25255D.png?imgmax=800 \"twitter_conversation\")](http://lh3.ggpht.com/-xfNOm8C9D4A/UEDKrn_oKxI/AAAAAAAAAQY/YHqJy_oL7YI/s1600-h/twitter_conversation%25255B3%25255D.png)\nSpending the last day or so checking into the walk through for Windows 8, check them out [here](https://www.windowsazure.com/en-us/develop/mobile/tutorials/get-started/). I went through the initial walkthrough for a Windows 8 application, and during this I wanted to see the data that was going back and fourth so I opened my favorite tool Fiddler to see the HTTP calls, which then lead me to see that I could easily use these services for Windows Phone 7 now!\nHere is a quick walk through a how to get setup.\n\n### Getting Started\nIn order to start using the preview of the Mobile Services in Azure, you need to have a Windows Azure account or you can sign up for a [trial account](http://www.windowsazure.com/en-us/pricing/free-trial/?WT.mc_id=A73D945CB). After you login, go to your Account Center and select the Preview Features from the top menu.\n[![image](http://lh6.ggpht.com/-m3TLdLwRukE/UEDKs3v2Y7I/AAAAAAAAAQw/uwiC3Pvd2sM/image_thumb%25255B4%25255D.png?imgmax=800 \"image\")](http://lh5.ggpht.com/-mi6vAyCc9mo/UEDKsYmP7SI/AAAAAAAAAQo/R2pmRjowwew/s1600-h/image%25255B8%25255D.png)\nI have already signed up for the Mobile Services, so you will see a “try it now” button and go ahead click that to get started. Once you get transferred to the, unfortunately still called the “Preview” portal, you’ll notice on the left menu that there is a new **Mobile Services **section.\n[![image](http://lh4.ggpht.com/-pd8zlUYN3PY/UEDKt38IMWI/AAAAAAAAARA/zGl2O-GQBmY/image_thumb%25255B6%25255D.png?imgmax=800 \"image\")](http://lh3.ggpht.com/-w9S2neZKOU0/UEDKtX8pjnI/AAAAAAAAAQ4/h4jWsXWGzBw/s1600-h/image%25255B12%25255D.png)\nNext on the bottom portion of the management portal you will see the **+**, which you simply click to add the new Mobile Service.\n[![image](http://lh3.ggpht.com/-x1C1w9nZ0bU/UEDKu4wbDXI/AAAAAAAAARQ/bcLhjKyErMc/image_thumb%25255B8%25255D.png?imgmax=800 \"image\")](http://lh5.ggpht.com/-7LnC0ptxMAE/UEDKunx-M6I/AAAAAAAAARI/O0XwDziUaLI/s1600-h/image%25255B16%25255D.png)\nChoose create and the New Mobile Service dialog is presented; enter the name of your new mobile service, select or create a new SQL Server Database, and finally select the Region for your instance.&nbsp; There are some other options in the “Configure advanced database settings” but we’ll not do that now for simplicity sake.\n*** As a note, if you create a new database; remember the credentials.&nbsp; You will need this information if you choose to add another database to the server later.\nUpon completion of the wizard, the management portal will tell you its creating…, the poof its there. I named mine “testmobileservice”.\n[![image](http://lh5.ggpht.com/-cktK68TGW6k/UEDKvQT7omI/AAAAAAAAARg/joWwTjOqsCg/image_thumb%25255B10%25255D.png?imgmax=800 \"image\")](http://lh6.ggpht.com/-20zcXdKrGtM/UEDKvLuhrmI/AAAAAAAAARY/0vf4iwZOlQY/s1600-h/image%25255B20%25255D.png)\nif you click on the URL, you’ll be presented with the following page…\n[![testpage](http://lh6.ggpht.com/-IiGw_llVS_4/UEDKwMK15mI/AAAAAAAAARw/FO2GuJZLvNo/testpage_thumb%25255B1%25255D.jpg?imgmax=800 \"testpage\")](http://lh6.ggpht.com/-OPzv3qWXNnU/UEDKvlKPT0I/AAAAAAAAARo/BM95fWSAKKw/s1600-h/testpage%25255B3%25255D.jpg)\nThese are just services, or a service endpoint. The closest thing I can really relate this to is in SQL 2005 we were given the ability to expose certain objects as web service endpoints, it was a neat feature but not widely used and still available to my knowledge. Sorry I digress, let’s get back to the management portal and create a Todo table. \nIf you click on the Mobile Service name you see the following screen, and although the initial announcement was for Windows 8 support and the walkthroughs etc. show that, let’s just create a table and I can get to Fiddler and show you how the data looks to and from the REST Service.\n[![image](http://lh3.ggpht.com/-4xaueRFPDSs/UEDKwwgvYeI/AAAAAAAAASA/IT1P5Sl989E/image_thumb%25255B14%25255D.png?imgmax=800 \"image\")](http://lh4.ggpht.com/-P-u6EVq8aWg/UEDKwpQVtUI/AAAAAAAAAR4/pwcPaJN77bk/s1600-h/image%25255B28%25255D.png)\nClick over the the DATA tab, then the **+** on the bottom the add the table. Name the table **ToDoItem** and click the check to create the new table.\n[![image](http://lh5.ggpht.com/-tpl2yJHopbQ/UEDKxzAtg7I/AAAAAAAAASQ/dQF08u8V6xk/image_thumb%25255B12%25255D.png?imgmax=800 \"image\")](http://lh6.ggpht.com/-pkn4SKuDTHg/UEDKxRropBI/AAAAAAAAASI/MY391RFPaPY/s1600-h/image%25255B24%25255D.png)\nPretty simple right?&nbsp; Just created a new table in a database by simply naming a table…DBA’s are freaking out around the world right now.\nOk, so go back to the DASHBOARD and find the MANAGE KEYS icon at the bottom, and we are going to add/create a new Application Key for the Mobile Service.&nbsp; \n[![mananagekeyyes](http://lh5.ggpht.com/-RqpfXnxL3FM/UEDNWt8aa3I/AAAAAAAAASw/nvkv2utj2jE/mananagekeyyes_thumb.jpg?imgmax=800 \"mananagekeyyes\")](http://lh6.ggpht.com/-eenpeEKhU28/UEDNWUmY0QI/AAAAAAAAASo/FwYX1WG19MU/s1600-h/mananagekeyyes%25255B2%25255D.jpg)\nNow there are still some things under the covers here that I am still finding the answers too, but my first guess is this is some iteration/flavor of oAuth. But, go ahead and copy down the Application Key that is generated for you.&nbsp; At this point, there is only one key and if you regenerate post deployment then your app will break so be careful with that little regenerate button of power.\n[![image](http://lh3.ggpht.com/-RnHO6xgWzhQ/UEDKywa7I_I/AAAAAAAAASg/aeOegeY0vv0/image_thumb%25255B17%25255D.png?imgmax=800 \"image\")](http://lh5.ggpht.com/-TsIDRKYIssc/UEDKyRNvQWI/AAAAAAAAASY/PlY4wR-GYAs/s1600-h/image%25255B33%25255D.png)\nClick the check mark and you are ready to start.\n\n### Interacting with the Endpoint via REST\nUsing Fiddler to see your HTTP calls going to and from RESTful endpoint is great, BUT there is also a little tab in there that most developers don’t realize is there.&nbsp; It’s the **Composer** tab.&nbsp; You can either originate a call in there OR drag a previous call from the left side to the composer tab and make changes to it and hit the execute button.&nbsp; Great feature!\n[![image](http://lh5.ggpht.com/-e2q63f_GiIg/UEDTdgDOWRI/AAAAAAAAATI/v8F_YrO6Xus/image_thumb%25255B20%25255D.png?imgmax=800 \"image\")](http://lh6.ggpht.com/-LuDLr1CCgiY/UEDTazLGqsI/AAAAAAAAATA/jeGGVnX5PnQ/s1600-h/image%25255B38%25255D.png)\n\n### What are my EndPoints?\nInteresting how this works… \nThe endpoints are formatted as [https://[your new service address](https://[your%20new%20service%20address/)]/tables/[table name]. So in my case, the RESTful endpoint for the TodoItem table is: [https://testmobileservice.azure-mobile.net/tables/TodoItem](https://testmobileservice.azure-mobile.net/tables/TodoItem \"https://testmobileservice.azure-mobile.net/tables/TodoItem\"). I have inserted a single record already so we can construct a GET call in Fiddler to see what is returned.\nDo this by again, going to the composer tab and inserting the url for the endpoint in the location box and in the Request Headers you will need to add the following:\n> User-Agent: Fiddler     \n> Host: testmobileservice.azure-mobile.net      \n> Accept: application/json      \n> X-ZUMO-APPLICATION: [YOUR APPLICATION KEY HERE]The X-ZUMO-APPLICATION header key/value pair is the secret sauce, I am sure that when the official SDK for these services is released for Windows Phone; there will be some better way to put this all together or maybe not, cause let’s be honest REST is EASY!\nSo Click the Execute button and we get a nice JSON result returned\n> [{\"id\":1,\"ToDoText\":\"Text1\",\"ToDoId\":1}]But wait, can we get XML too? No, it does not appear so.&nbsp; Trying to change the Accept header to “**Accept:application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8**” to get xml does not work. Also it is important note that if the Accept header is not sent, JSON is also returned.&nbsp; \nIt is my assumption that, as you can do in ASP.NET Web API, the services are doing something like \n> HttpConfig.Formatters.Remove(HttpConfig.Formatters.XmlFormatter);in order to force JSON, this is a smaller payload and is the more preferred format for REST based services.\n\n### Inserting /<strike> Updating</strike> Data\nAgain remember that these are simply REST based services, so you can just do the same as above and instead of calling with a GET, do it with a** <strike>PUT</strike> (405 Method Not Allowed)** or POST and pass a payload of type ToDoItem.&nbsp; Here is an example of an insert.\nChange the dropdown in the composer tab of Fiddler from a GET to a POST (INSERT) and in the Request Body add the following text:\n> {&nbsp; \"ToDoText\":\"Text1\" , \"ToDoId\":2}Click the execute button and on the left window you should get a Result of 201 and the response sends back the newly created item in JSON.\n> {\"ToDoText\":\"Text1\",\"ToDoId\":2,\"id\":2}\n**Methods Allowed – GET, POST, DELETE**\n\n### Dynamic Tables\nSo what’s really behind this?&nbsp; Is it SQL Server, a flavor of NoSQL running inside SQL? Is this table storage with some magic?&nbsp; Let’s call a POST method and add some new fields and see what happens here.\nHere is the new JSON payload:\n> {&nbsp; \n>     \"ToDoText\":\"Text1\" ,            \"ToDoId\":3,       \n> &nbsp;&nbsp;&nbsp; \"ToDoWhen\": \"12/01/2012\",      \n> &nbsp;&nbsp;&nbsp; \"ToDoByWho\" : \"Shayne Boyer\"      \n> }The highlighted rows here we already had in our table before, but I am passing in some new data fields. And it works, very cool…\n[![image](http://lh3.ggpht.com/-ZcwtPqARAT0/UEDYCRBJajI/AAAAAAAAATk/HMcmHGIX8xU/image_thumb%25255B23%25255D.png?imgmax=800 \"image\")](http://lh3.ggpht.com/-BFiC1Z5I6hc/UEDYBw3Pl-I/AAAAAAAAATc/hWu18CNE7yw/s1600-h/image%25255B43%25255D.png)\nWhat does a get return now that we have the new fields in one but not in the other?\n[![image](http://lh5.ggpht.com/-lJluBM1rg-c/UEDYDEo02ZI/AAAAAAAAAT0/xyOld3xetAU/image_thumb%25255B26%25255D.png?imgmax=800 \"image\")](http://lh6.ggpht.com/-Y9n_eQzlrPs/UEDYCzCWENI/AAAAAAAAATs/wsS3xD3gteU/s1600-h/image%25255B48%25255D.png)\nI like it! Data Model changes, NoSQL style in Runtime.&nbsp; You see that we now get the fields in the previous records available to us for an update later and they are automatically set to NULL.&nbsp; Now one thing to note that there is no ability to remove a field. You would most like have to delete the table from Azure and start clean.&nbsp; \nSo there it is, if you can hit REST with any of you coding skills you can use this.&nbsp; Doesn’t necessarily have to be Windows 8.&nbsp; It can be Windows Phone, iOS, Android or Raspberry Pi for that matter.&nbsp; It can even be a web page.&nbsp; Look forward to what more is to come from this and Azure in the future!\nLet me know if you have any questions, please comment.&nbsp; ","html":"<p><a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=2961115\">CodeProject</a>\nAs usual throughout the day I have MetroTwit open and toast are constantly popping up here and there and I glance over to see what’s what.&nbsp; Then I see. from <a href=\"http://twitter.com/WindowsAzure\">@WindowsAzure</a> this:</p>\n\n<p>And all work stopped for me to check this out.&nbsp; Other than Windows Phone and Windows 8; I really love the new ASP.NET WebAPI and REST Services capabilities it has made so easy (watch for my next post on that), and seeing this I was thinking – awesome but only for Windows 8???&nbsp; So…I immediately responded and got a response: <br />\n<a href=\"http://lh3.ggpht.com/-xfNOm8C9D4A/UEDKrn_oKxI/AAAAAAAAAQY/YHqJy_oL7YI/s1600-h/twitter_conversation%25255B3%25255D.png\"><img src=\"http://lh6.ggpht.com/-R4_IrxpjRIA/UEDKsMNhR-I/AAAAAAAAAQg/T98JNPHYxhQ/twitter_conversation_thumb%25255B1%25255D.png?imgmax=800\" alt=\"twitter_conversation\" title=\"twitter_conversation\" /></a>\nSpending the last day or so checking into the walk through for Windows 8, check them out <a href=\"https://www.windowsazure.com/en-us/develop/mobile/tutorials/get-started/\">here</a>. I went through the initial walkthrough for a Windows 8 application, and during this I wanted to see the data that was going back and fourth so I opened my favorite tool Fiddler to see the HTTP calls, which then lead me to see that I could easily use these services for Windows Phone 7 now! <br />\nHere is a quick walk through a how to get setup.</p>\n\n<h3 id=\"gettingstarted\">Getting Started</h3>\n\n<p>In order to start using the preview of the Mobile Services in Azure, you need to have a Windows Azure account or you can sign up for a <a href=\"http://www.windowsazure.com/en-us/pricing/free-trial/?WT.mc_id=A73D945CB\">trial account</a>. After you login, go to your Account Center and select the Preview Features from the top menu. <br />\n<a href=\"http://lh5.ggpht.com/-mi6vAyCc9mo/UEDKsYmP7SI/AAAAAAAAAQo/R2pmRjowwew/s1600-h/image%25255B8%25255D.png\"><img src=\"http://lh6.ggpht.com/-m3TLdLwRukE/UEDKs3v2Y7I/AAAAAAAAAQw/uwiC3Pvd2sM/image_thumb%25255B4%25255D.png?imgmax=800\" alt=\"image\" title=\"image\" /></a>\nI have already signed up for the Mobile Services, so you will see a “try it now” button and go ahead click that to get started. Once you get transferred to the, unfortunately still called the “Preview” portal, you’ll notice on the left menu that there is a new <strong>Mobile Services <em>*section. <br />\n<a href=\"http://lh3.ggpht.com/-w9S2neZKOU0/UEDKtX8pjnI/AAAAAAAAAQ4/h4jWsXWGzBw/s1600-h/image%25255B12%25255D.png\"><img src=\"http://lh4.ggpht.com/-pd8zlUYN3PY/UEDKt38IMWI/AAAAAAAAARA/zGl2O-GQBmY/image_thumb%25255B6%25255D.png?imgmax=800\" alt=\"image\" title=\"image\" /></a>\nNext on the bottom portion of the management portal you will see the *</em>+</strong>, which you simply click to add the new Mobile Service. <br />\n<a href=\"http://lh5.ggpht.com/-7LnC0ptxMAE/UEDKunx-M6I/AAAAAAAAARI/O0XwDziUaLI/s1600-h/image%25255B16%25255D.png\"><img src=\"http://lh3.ggpht.com/-x1C1w9nZ0bU/UEDKu4wbDXI/AAAAAAAAARQ/bcLhjKyErMc/image_thumb%25255B8%25255D.png?imgmax=800\" alt=\"image\" title=\"image\" /></a>\nChoose create and the New Mobile Service dialog is presented; enter the name of your new mobile service, select or create a new SQL Server Database, and finally select the Region for your instance.&nbsp; There are some other options in the “Configure advanced database settings” but we’ll not do that now for simplicity sake. <br />\n<strong>* As a note, if you create a new database; remember the credentials.&nbsp; You will need this information if you choose to add another database to the server later.\nUpon completion of the wizard, the management portal will tell you its creating…, the poof its there. I named mine “testmobileservice”. <br />\n<a href=\"http://lh6.ggpht.com/-20zcXdKrGtM/UEDKvLuhrmI/AAAAAAAAARY/0vf4iwZOlQY/s1600-h/image%25255B20%25255D.png\"><img src=\"http://lh5.ggpht.com/-cktK68TGW6k/UEDKvQT7omI/AAAAAAAAARg/joWwTjOqsCg/image_thumb%25255B10%25255D.png?imgmax=800\" alt=\"image\" title=\"image\" /></a>\nif you click on the URL, you’ll be presented with the following page… <br />\n<a href=\"http://lh6.ggpht.com/-OPzv3qWXNnU/UEDKvlKPT0I/AAAAAAAAARo/BM95fWSAKKw/s1600-h/testpage%25255B3%25255D.jpg\"><img src=\"http://lh6.ggpht.com/-IiGw_llVS_4/UEDKwMK15mI/AAAAAAAAARw/FO2GuJZLvNo/testpage_thumb%25255B1%25255D.jpg?imgmax=800\" alt=\"testpage\" title=\"testpage\" /></a>\nThese are just services, or a service endpoint. The closest thing I can really relate this to is in SQL 2005 we were given the ability to expose certain objects as web service endpoints, it was a neat feature but not widely used and still available to my knowledge. Sorry I digress, let’s get back to the management portal and create a Todo table. <br />\nIf you click on the Mobile Service name you see the following screen, and although the initial announcement was for Windows 8 support and the walkthroughs etc. show that, let’s just create a table and I can get to Fiddler and show you how the data looks to and from the REST Service. <br />\n<a href=\"http://lh4.ggpht.com/-P-u6EVq8aWg/UEDKwpQVtUI/AAAAAAAAAR4/pwcPaJN77bk/s1600-h/image%25255B28%25255D.png\"><img src=\"http://lh3.ggpht.com/-4xaueRFPDSs/UEDKwwgvYeI/AAAAAAAAASA/IT1P5Sl989E/image_thumb%25255B14%25255D.png?imgmax=800\" alt=\"image\" title=\"image\" /></a>\nClick over the the DATA tab, then the **+</strong> on the bottom the add the table. Name the table <strong>ToDoItem</strong> and click the check to create the new table. <br />\n<a href=\"http://lh6.ggpht.com/-pkn4SKuDTHg/UEDKxRropBI/AAAAAAAAASI/MY391RFPaPY/s1600-h/image%25255B24%25255D.png\"><img src=\"http://lh5.ggpht.com/-tpl2yJHopbQ/UEDKxzAtg7I/AAAAAAAAASQ/dQF08u8V6xk/image_thumb%25255B12%25255D.png?imgmax=800\" alt=\"image\" title=\"image\" /></a>\nPretty simple right?&nbsp; Just created a new table in a database by simply naming a table…DBA’s are freaking out around the world right now. <br />\nOk, so go back to the DASHBOARD and find the MANAGE KEYS icon at the bottom, and we are going to add/create a new Application Key for the Mobile Service.&nbsp; <br />\n<a href=\"http://lh6.ggpht.com/-eenpeEKhU28/UEDNWUmY0QI/AAAAAAAAASo/FwYX1WG19MU/s1600-h/mananagekeyyes%25255B2%25255D.jpg\"><img src=\"http://lh5.ggpht.com/-RqpfXnxL3FM/UEDNWt8aa3I/AAAAAAAAASw/nvkv2utj2jE/mananagekeyyes_thumb.jpg?imgmax=800\" alt=\"mananagekeyyes\" title=\"mananagekeyyes\" /></a>\nNow there are still some things under the covers here that I am still finding the answers too, but my first guess is this is some iteration/flavor of oAuth. But, go ahead and copy down the Application Key that is generated for you.&nbsp; At this point, there is only one key and if you regenerate post deployment then your app will break so be careful with that little regenerate button of power. <br />\n<a href=\"http://lh5.ggpht.com/-TsIDRKYIssc/UEDKyRNvQWI/AAAAAAAAASY/PlY4wR-GYAs/s1600-h/image%25255B33%25255D.png\"><img src=\"http://lh3.ggpht.com/-RnHO6xgWzhQ/UEDKywa7I_I/AAAAAAAAASg/aeOegeY0vv0/image_thumb%25255B17%25255D.png?imgmax=800\" alt=\"image\" title=\"image\" /></a>\nClick the check mark and you are ready to start.</p>\n\n<h3 id=\"interactingwiththeendpointviarest\">Interacting with the Endpoint via REST</h3>\n\n<p>Using Fiddler to see your HTTP calls going to and from RESTful endpoint is great, BUT there is also a little tab in there that most developers don’t realize is there.&nbsp; It’s the <strong>Composer</strong> tab.&nbsp; You can either originate a call in there OR drag a previous call from the left side to the composer tab and make changes to it and hit the execute button.&nbsp; Great feature! <br />\n<a href=\"http://lh6.ggpht.com/-LuDLr1CCgiY/UEDTazLGqsI/AAAAAAAAATA/jeGGVnX5PnQ/s1600-h/image%25255B38%25255D.png\"><img src=\"http://lh5.ggpht.com/-e2q63f_GiIg/UEDTdgDOWRI/AAAAAAAAATI/v8F_YrO6Xus/image_thumb%25255B20%25255D.png?imgmax=800\" alt=\"image\" title=\"image\" /></a></p>\n\n<h3 id=\"whataremyendpoints\">What are my EndPoints?</h3>\n\n<p>Interesting how this works… <br />\nThe endpoints are formatted as [https://<a href=\"https://[your%20new%20service%20address/\">your new service address</a>]/tables/[table name]. So in my case, the RESTful endpoint for the TodoItem table is: <a href=\"https://testmobileservice.azure-mobile.net/tables/TodoItem\" title=\"https://testmobileservice.azure-mobile.net/tables/TodoItem\">https://testmobileservice.azure-mobile.net/tables/TodoItem</a>. I have inserted a single record already so we can construct a GET call in Fiddler to see what is returned. <br />\nDo this by again, going to the composer tab and inserting the url for the endpoint in the location box and in the Request Headers you will need to add the following:  </p>\n\n<blockquote>\n  <p>User-Agent: Fiddler <br />\n  Host: testmobileservice.azure-mobile.net <br />\n  Accept: application/json <br />\n  X-ZUMO-APPLICATION: [YOUR APPLICATION KEY HERE]The X-ZUMO-APPLICATION header key/value pair is the secret sauce, I am sure that when the official SDK for these services is released for Windows Phone; there will be some better way to put this all together or maybe not, cause let’s be honest REST is EASY!\n  So Click the Execute button and we get a nice JSON result returned <br />\n  [{\"id\":1,\"ToDoText\":\"Text1\",\"ToDoId\":1}]But wait, can we get XML too? No, it does not appear so.&nbsp; Trying to change the Accept header to “<strong>Accept:application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8</strong>” to get xml does not work. Also it is important note that if the Accept header is not sent, JSON is also returned.&nbsp; \n  It is my assumption that, as you can do in ASP.NET Web API, the services are doing something like <br />\n  HttpConfig.Formatters.Remove(HttpConfig.Formatters.XmlFormatter);in order to force JSON, this is a smaller payload and is the more preferred format for REST based services.</p>\n</blockquote>\n\n<h3 id=\"insertingstrikeupdatingstrikedata\">Inserting /<strike> Updating</strike> Data</h3>\n\n<p>Again remember that these are simply REST based services, so you can just do the same as above and instead of calling with a GET, do it with a<em>* <strike>PUT</strike> (405 Method Not Allowed)</em>* or POST and pass a payload of type ToDoItem.&nbsp; Here is an example of an insert. <br />\nChange the dropdown in the composer tab of Fiddler from a GET to a POST (INSERT) and in the Request Body add the following text:  </p>\n\n<blockquote>\n  <p>{&nbsp; \"ToDoText\":\"Text1\" , \"ToDoId\":2}Click the execute button and on the left window you should get a Result of 201 and the response sends back the newly created item in JSON.\n  {\"ToDoText\":\"Text1\",\"ToDoId\":2,\"id\":2}\n  <strong>Methods Allowed – GET, POST, DELETE</strong></p>\n</blockquote>\n\n<h3 id=\"dynamictables\">Dynamic Tables</h3>\n\n<p>So what’s really behind this?&nbsp; Is it SQL Server, a flavor of NoSQL running inside SQL? Is this table storage with some magic?&nbsp; Let’s call a POST method and add some new fields and see what happens here. <br />\nHere is the new JSON payload:  </p>\n\n<blockquote>\n  <p>{&nbsp; \n      \"ToDoText\":\"Text1\" ,            \"ToDoId\":3, <br />\n  &nbsp;&nbsp;&nbsp; \"ToDoWhen\": \"12/01/2012\", <br />\n  &nbsp;&nbsp;&nbsp; \"ToDoByWho\" : \"Shayne Boyer\" <br />\n  }The highlighted rows here we already had in our table before, but I am passing in some new data fields. And it works, very cool…\n  <a href=\"http://lh3.ggpht.com/-BFiC1Z5I6hc/UEDYBw3Pl-I/AAAAAAAAATc/hWu18CNE7yw/s1600-h/image%25255B43%25255D.png\"><img src=\"http://lh3.ggpht.com/-ZcwtPqARAT0/UEDYCRBJajI/AAAAAAAAATk/HMcmHGIX8xU/image_thumb%25255B23%25255D.png?imgmax=800\" alt=\"image\" title=\"image\" /></a>\n  What does a get return now that we have the new fields in one but not in the other? <br />\n  <a href=\"http://lh6.ggpht.com/-Y9n_eQzlrPs/UEDYCzCWENI/AAAAAAAAATs/wsS3xD3gteU/s1600-h/image%25255B48%25255D.png\"><img src=\"http://lh5.ggpht.com/-lJluBM1rg-c/UEDYDEo02ZI/AAAAAAAAAT0/xyOld3xetAU/image_thumb%25255B26%25255D.png?imgmax=800\" alt=\"image\" title=\"image\" /></a>\n  I like it! Data Model changes, NoSQL style in Runtime.&nbsp; You see that we now get the fields in the previous records available to us for an update later and they are automatically set to NULL.&nbsp; Now one thing to note that there is no ability to remove a field. You would most like have to delete the table from Azure and start clean.&nbsp; <br />\n  So there it is, if you can hit REST with any of you coding skills you can use this.&nbsp; Doesn’t necessarily have to be Windows 8.&nbsp; It can be Windows Phone, iOS, Android or Raspberry Pi for that matter.&nbsp; It can even be a web page.&nbsp; Look forward to what more is to come from this and Azure in the future! <br />\n  Let me know if you have any questions, please comment.&nbsp; </p>\n</blockquote>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1346426940001,"created_by":1,"updated_at":1347326747790,"updated_by":1,"published_at":1346426940001,"published_by":1},{"id":32,"uuid":"270d47db-158f-4b53-a564-afcf9253ddf6","title":"Getting Started w/ Windows 8, MVVM Light and EventToCommand","slug":"getting_started_w_windows_8_mvvm_light_and_event_to_command","markdown":"Now that Windows 8 and Visual Studio are in RTM I wanted to put together a quick entry for those Windows Phone developers making the transition to Windows 8 development with their MVVM Light skills.\n\nLaurent Bugnion, is the creator of the MVVM Light toolkit and I, as well as many others, have been using this for Windows Phone development for a while now. &nbsp;I am porting on of my applications to Windows 8 and wanted to take the knowledge of this toolkit to the new platform hoping that there were either some new enhancements and/or not many changes so that I could just go. &nbsp;Well that was the deal.\n\n### MVVM Light Toolkit for Windows 8 RTM\nThe latest installer for the toolkit, \"MVVM Light Toolkit V4 RTM\", is available from CodePlex. According to Laurent's blog it is a side by side install with previous versions:> MVVM Light for Windows 8 is a side-by-side install with the standard MVVM Light V3 or V4 beta. Simply download and run the MSI from Codeplex. As usual, the last step of the installation performs a “/setup” of Visual Studio to actualize the project template cache, and unfortunately this last step can last very long. Please be patient and don’t cancel before the end! The installation process is very similar to that described on the MVVM Light installation page (except that there is no NuGet installer for VS11 yet).The following [link](http://geekswithblogs.net/lbugnion/archive/2011/10/03/mvvm-light-toolkit-for-windows-8-preview-mvvmlight-win8.aspx) states the summary of the ported components from the previous versions, but I'll paraphrase here:\n\n*   **ObservableObject** including all ways to raise PropertyChanged.&nbsp;\n*   **ViewModelBase** including all ways to raise PropertyChanged.&nbsp;\n*   **Messenger** including all message types except DialogMessage (see below).&nbsp;\n*   **RelayCommand** with and without parameter.&nbsp;\n*   **SimpleIoc** which might well be the very first IOC container working on Windows 8.&nbsp;Man do I love the SimpleIoc! Makes adding the new views soooo much easier than in the Windows Phone version.There are a few missing components, one of which is EventToCommand, however thanks to a new friend I have made, Joost van Schaik (see his blog here),  there is a solution to that and it's available as a nuget package with some additional behavior features I encourage you to look into but I'll at least cover the EventToCommand features he offers.Getting StartedMVVM Light Project TemplateAfter installing the toolkit you will see that there is a new project template available in the Visual Studio 2012 New Project DialogNoted as \"Windows Metro Style\"Name the project \"MvvmLight_Walkthrough\" and click Ok.The project template is simple, but add some new features that were not in previous versions of the toolkit. In the Solution Explorer you'll notice a Design folder with a class called DesignDataService. This is a great feature; the default template putting in a design data class repository.Second, as in the past version of the toolkit there is the normal ViewModelLocator class, but in this version there is new feature - SimpleIoc, a container class which if you are like me had everything else in a container for DI with the exception of the ViewModels unless you rolled your own.public class ViewModelLocator    {        static ViewModelLocator()        {            ServiceLocator.SetLocatorProvider(() => SimpleIoc.Default);            if (ViewModelBase.IsInDesignModeStatic)            {                SimpleIoc.Default.Register<idataservice, design.designdataservice=\"\">();            }            else            {                SimpleIoc.Default.Register<idataservice, dataservice=\"\">();            }            SimpleIoc.Default.Register<mainviewmodel>();        }        /// <summary>        /// Gets the Main property.        /// </summary>        [System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\",            \"CA1822:MarkMembersAsStatic\",            Justification = \"This non-static member is needed for data binding purposes.\")]        public MainViewModel Main        {            get            {                return ServiceLocator.Current.GetInstance<mainviewmodel>();            }        }        /// <summary>        /// Cleans up all the resources.        /// </summary>        public static void Cleanup()        {        }And last, in the Model folder, Laurent has been kind enough to also include an IDataService interface and DataService class to show in the example how to use the real time and design time data models. These are all wired up in the ViewModelLocator as show above.Now if we simply run the application you should get the following to make sure it's all good to go!Running in the SimulatorAs you may or may not notice, this is not to dis-similar from the previous project template test from the previous version.MainViewModelThe binding of the ViewModel to the View is the same as it was in the previous model and there are no noticeable changes to the ViewModelTemplate.  On thing to note is that all options for RaisePropertyChanged are included in this release where as in the previous version you would have to get the \"Pre-release\" version from nuget in order to use them. For example, the built in template puts in the following:/// <summary>        /// The <see cref=\"WelcomeTitle\"> property's name.        /// </see></summary>        public const string WelcomeTitlePropertyName = \"WelcomeTitle\";        private string _welcomeTitle = string.Empty;        /// <summary>        /// Gets the WelcomeTitle property.        /// Changes to that property's value raise the PropertyChanged event.        /// </summary>        public string WelcomeTitle        {            get            {                return _welcomeTitle;            }            set            {                if (_welcomeTitle == value)                {                    return;                }                _welcomeTitle = value;                RaisePropertyChanged(WelcomeTitlePropertyName);            }        }Noticeably where RaisePropertyChanged is using a string value, one of the options now available in the release is to remove the  WelcomeTitlePropertyName variable and then changeRaisePropertyChanged(WelcomeTitlePropertyName);to RaisePropertyChanged(() => WelcomeTitle);</mainviewmodel></mainviewmodel></idataservice,></idataservice,>The other nice benefit here is that the template has also put in the wiring for injecting the IDataService into the constructor for the ViewModel.  Some of these little thing we developers either take for granted that someone has gone through the trouble of putting the plumbing in there or call it the boring work that has to be done before we get the real work done.  You can easily put other dependencies in the constructor here and then just add the mappings in the constructor of the ViewModelLocator by simply registering the types with the SimpleIoc container.public MainViewModel(IDataService dataService)        {            _dataService = dataService;            _dataService.GetData(                (item, error) =>                {                    if (error != null)                    {                        // Report error here                        return;                    }                    WelcomeTitle = item.Title;                });        }Now What?.A simple example here is to add some content to the MainPage and see how we navigate to a second view.  I won't bore you with the details of adding in the controls to the page but here's what the page should look like when you're done. <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\">[![](http://3.bp.blogspot.com/-hrp5PMvm5nQ/UDaCqHSTddI/AAAAAAAAAPQ/1n2u7lzJEC8/s400/post+controls.png)](http://3.bp.blogspot.com/-hrp5PMvm5nQ/UDaCqHSTddI/AAAAAAAAAPQ/1n2u7lzJEC8/s1600/post+controls.png)</td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Added a little MvvmLight color for fun</td></tr></tbody></table>\n\n#### EventToCommand\nNow lets just add a prompt to the submit button. But wait, what where's my EventToCommand???  Sure with the button there is a Command property and you can set that to an ICommand in the ViewModel and everything is happy.  But, there are plenty of controls, both baked into WinRT and third party controls that do not have that property. So, for simplicity sake I'm using this control and will get the EventToCommand back in your toolbox, or your Joostbox I should say.\n\n#### Off to Nuget!\nI had this issue where I was looking for the behaviors when porting an app I was working on and could find the dang behaviors in Blend so I went to nuget and did some searching and there wasn't anything that was shaking my fancy. Then I came across Joost van Schaik (see his blog here) and his WinRTBehaviors library and just so happens I hit him in the middle of uploading the nuget package for Win8nl.Now this is a package of Behaviors that was originally a Windows Phone 7 library and It's now growing in its own direction and now contains some Windows 8 specific stuff (according to nuget). So let's get it installed real quick.Install the package by typing the following into the Nuget Package Manager Console or searching for Win8nl in the package explorer.> `PM&gt; Install-Package Win8nl`It will add the library and the necessary dependencies to the project, which include WinRTBehaviors. For more information on the other behaviors there check out Joost's blog.Adding EventToCommand First, lets add the references to the XAML page:<pre class=\"brush: xml\">xmlns:WinRtBehaviors=\"using:WinRtBehaviors\"\n\nxmlns:Win8nl_Behavior=\"using:Win8nl.Behaviors\"\n</pre>Next, locate the button control and add the following inside the button XAML:            <button x:name=\"btnSubmit\" content=\"Submit\"  =\"\"   =\"\" fontfamily=\"{StaticResource MyFont}\" fontsize=\"{StaticResource MyFontSize}\" horizontalalignment=\"Center\" margin=\"0,20,0,0\">                <winrtbehaviors:interaction.behaviors>                    <win8nl_behavior:eventtocommandbehavior event=\"Tapped\"  =\"\" command=\"AreYouSureCommand\"   =\"\" commandparameter=\"{Binding MyName}\">                </win8nl_behavior:eventtocommandbehavior></winrtbehaviors:interaction.behaviors>            </button>Now, open the MainViewModel.cs code and we can add the command for the new behavior here when the button is tapped.As usual the Command property is expecting an ICommand, add the following code to the MainViewModel and return a new instance of RelayCommand to execute whatever behavior you wish.  In this example, I'm just doing a little popup to show whatever the user input into the myName TextBox.public ICommand AreYouSureCommand        {            get            {                return new RelayCommand<string>((p) =>                {                    var msg = new MessageDialog(string.Format(\"Hi there {0}\", p));                                       msg.ShowAsync();                });            }        }See the result here:And that is EventToCommand for MVVMlight for Windows 8!There are many more behaviors in the WinRTBehaviors library that you should take advantage of, for me the most notable ones being FlipViewPanoramaBehavior and NavigationService being ported to Windows 8\\. </string>","html":"<p>Now that Windows 8 and Visual Studio are in RTM I wanted to put together a quick entry for those Windows Phone developers making the transition to Windows 8 development with their MVVM Light skills.</p>\n\n<p>Laurent Bugnion, is the creator of the MVVM Light toolkit and I, as well as many others, have been using this for Windows Phone development for a while now. &nbsp;I am porting on of my applications to Windows 8 and wanted to take the knowledge of this toolkit to the new platform hoping that there were either some new enhancements and/or not many changes so that I could just go. &nbsp;Well that was the deal.</p>\n\n<h3 id=\"mvvmlighttoolkitforwindows8rtm\">MVVM Light Toolkit for Windows 8 RTM</h3>\n\n<p>The latest installer for the toolkit, \"MVVM Light Toolkit V4 RTM\", is available from CodePlex. According to Laurent's blog it is a side by side install with previous versions:> MVVM Light for Windows 8 is a side-by-side install with the standard MVVM Light V3 or V4 beta. Simply download and run the MSI from Codeplex. As usual, the last step of the installation performs a “/setup” of Visual Studio to actualize the project template cache, and unfortunately this last step can last very long. Please be patient and don’t cancel before the end! The installation process is very similar to that described on the MVVM Light installation page (except that there is no NuGet installer for VS11 yet).The following <a href=\"http://geekswithblogs.net/lbugnion/archive/2011/10/03/mvvm-light-toolkit-for-windows-8-preview-mvvmlight-win8.aspx\">link</a> states the summary of the ported components from the previous versions, but I'll paraphrase here:</p>\n\n<ul>\n<li><strong>ObservableObject</strong> including all ways to raise PropertyChanged.&nbsp;</li>\n<li><strong>ViewModelBase</strong> including all ways to raise PropertyChanged.&nbsp;</li>\n<li><strong>Messenger</strong> including all message types except DialogMessage (see below).&nbsp;</li>\n<li><strong>RelayCommand</strong> with and without parameter.&nbsp;</li>\n<li><strong>SimpleIoc</strong> which might well be the very first IOC container working on Windows 8.&nbsp;Man do I love the SimpleIoc! Makes adding the new views soooo much easier than in the Windows Phone version.There are a few missing components, one of which is EventToCommand, however thanks to a new friend I have made, Joost van Schaik (see his blog here),  there is a solution to that and it's available as a nuget package with some additional behavior features I encourage you to look into but I'll at least cover the EventToCommand features he offers.Getting StartedMVVM Light Project TemplateAfter installing the toolkit you will see that there is a new project template available in the Visual Studio 2012 New Project DialogNoted as \"Windows Metro Style\"Name the project \"MvvmLight<em>Walkthrough\" and click Ok.The project template is simple, but add some new features that were not in previous versions of the toolkit. In the Solution Explorer you'll notice a Design folder with a class called DesignDataService. This is a great feature; the default template putting in a design data class repository.Second, as in the past version of the toolkit there is the normal ViewModelLocator class, but in this version there is new feature - SimpleIoc, a container class which if you are like me had everything else in a container for DI with the exception of the ViewModels unless you rolled your own.public class ViewModelLocator    {        static ViewModelLocator()        {            ServiceLocator.SetLocatorProvider(() => SimpleIoc.Default);            if (ViewModelBase.IsInDesignModeStatic)            {                SimpleIoc.Default.Register<idataservice, design.designdataservice=\"\">();            }            else            {                SimpleIoc.Default.Register<idataservice, dataservice=\"\">();            }            SimpleIoc.Default.Register<mainviewmodel>();        }        /// <summary>        /// Gets the Main property.        /// </summary>        [System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\",            \"CA1822:MarkMembersAsStatic\",            Justification = \"This non-static member is needed for data binding purposes.\")]        public MainViewModel Main        {            get            {                return ServiceLocator.Current.GetInstance<mainviewmodel>();            }        }        /// <summary>        /// Cleans up all the resources.        /// </summary>        public static void Cleanup()        {        }And last, in the Model folder, Laurent has been kind enough to also include an IDataService interface and DataService class to show in the example how to use the real time and design time data models. These are all wired up in the ViewModelLocator as show above.Now if we simply run the application you should get the following to make sure it's all good to go!Running in the SimulatorAs you may or may not notice, this is not to dis-similar from the previous project template test from the previous version.MainViewModelThe binding of the ViewModel to the View is the same as it was in the previous model and there are no noticeable changes to the ViewModelTemplate.  On thing to note is that all options for RaisePropertyChanged are included in this release where as in the previous version you would have to get the \"Pre-release\" version from nuget in order to use them. For example, the built in template puts in the following:/// <summary>        /// The <see cref=\"WelcomeTitle\"> property's name.        /// </see></summary>        public const string WelcomeTitlePropertyName = \"WelcomeTitle\";        private string _welcomeTitle = string.Empty;        /// <summary>        /// Gets the WelcomeTitle property.        /// Changes to that property's value raise the PropertyChanged event.        /// </summary>        public string WelcomeTitle        {            get            {                return _welcomeTitle;            }            set            {                if (</em>welcomeTitle == value)                {                    return;                }                _welcomeTitle = value;                RaisePropertyChanged(WelcomeTitlePropertyName);            }        }Noticeably where RaisePropertyChanged is using a string value, one of the options now available in the release is to remove the  WelcomeTitlePropertyName variable and then changeRaisePropertyChanged(WelcomeTitlePropertyName);to RaisePropertyChanged(() => WelcomeTitle);</mainviewmodel></mainviewmodel></idataservice,></idataservice,>The other nice benefit here is that the template has also put in the wiring for injecting the IDataService into the constructor for the ViewModel.  Some of these little thing we developers either take for granted that someone has gone through the trouble of putting the plumbing in there or call it the boring work that has to be done before we get the real work done.  You can easily put other dependencies in the constructor here and then just add the mappings in the constructor of the ViewModelLocator by simply registering the types with the SimpleIoc container.public MainViewModel(IDataService dataService)        {            _dataService = dataService;            _dataService.GetData(                (item, error) =>                {                    if (error != null)                    {                        // Report error here                        return;                    }                    WelcomeTitle = item.Title;                });        }Now What?.A simple example here is to add some content to the MainPage and see how we navigate to a second view.  I won't bore you with the details of adding in the controls to the page but here's what the page should look like when you're done. <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://3.bp.blogspot.com/-hrp5PMvm5nQ/UDaCqHSTddI/AAAAAAAAAPQ/1n2u7lzJEC8/s1600/post+controls.png\"><img src=\"http://3.bp.blogspot.com/-hrp5PMvm5nQ/UDaCqHSTddI/AAAAAAAAAPQ/1n2u7lzJEC8/s400/post+controls.png\" alt=\"\" title=\"\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Added a little MvvmLight color for fun</td></tr></tbody></table></li>\n</ul>\n\n<h4 id=\"eventtocommand\">EventToCommand</h4>\n\n<p>Now lets just add a prompt to the submit button. But wait, what where's my EventToCommand???  Sure with the button there is a Command property and you can set that to an ICommand in the ViewModel and everything is happy.  But, there are plenty of controls, both baked into WinRT and third party controls that do not have that property. So, for simplicity sake I'm using this control and will get the EventToCommand back in your toolbox, or your Joostbox I should say.</p>\n\n<h4 id=\"offtonuget\">Off to Nuget!</h4>\n\n<p>I had this issue where I was looking for the behaviors when porting an app I was working on and could find the dang behaviors in Blend so I went to nuget and did some searching and there wasn't anything that was shaking my fancy. Then I came across Joost van Schaik (see his blog here) and his WinRTBehaviors library and just so happens I hit him in the middle of uploading the nuget package for Win8nl.Now this is a package of Behaviors that was originally a Windows Phone 7 library and It's now growing in its own direction and now contains some Windows 8 specific stuff (according to nuget). So let's get it installed real quick.Install the package by typing the following into the Nuget Package Manager Console or searching for Win8nl in the package explorer.> <code>PM&amp;gt; Install-Package Win8nl</code>It will add the library and the necessary dependencies to the project, which include WinRTBehaviors. For more information on the other behaviors there check out Joost's blog.Adding EventToCommand First, lets add the references to the XAML page:<pre class=\"brush: xml\">xmlns:WinRtBehaviors=\"using:WinRtBehaviors\"</p>\n\n<p>xmlns:Win8nl_Behavior=\"using:Win8nl.Behaviors\" <br />\n</pre>Next, locate the button control and add the following inside the button XAML:            <button x:name=\"btnSubmit\" content=\"Submit\"  =\"\"   =\"\" fontfamily=\"{StaticResource MyFont}\" fontsize=\"{StaticResource MyFontSize}\" horizontalalignment=\"Center\" margin=\"0,20,0,0\">                <winrtbehaviors:interaction.behaviors>                    <win8nl_behavior:eventtocommandbehavior event=\"Tapped\"  =\"\" command=\"AreYouSureCommand\"   =\"\" commandparameter=\"{Binding MyName}\">                </win8nl_behavior:eventtocommandbehavior></winrtbehaviors:interaction.behaviors>            </button>Now, open the MainViewModel.cs code and we can add the command for the new behavior here when the button is tapped.As usual the Command property is expecting an ICommand, add the following code to the MainViewModel and return a new instance of RelayCommand to execute whatever behavior you wish.  In this example, I'm just doing a little popup to show whatever the user input into the myName TextBox.public ICommand AreYouSureCommand        {            get            {                return new RelayCommand<string>((p) =>                {                    var msg = new MessageDialog(string.Format(\"Hi there {0}\", p));                                       msg.ShowAsync();                });            }        }See the result here:And that is EventToCommand for MVVMlight for Windows 8!There are many more behaviors in the WinRTBehaviors library that you should take advantage of, for me the most notable ones being FlipViewPanoramaBehavior and NavigationService being ported to Windows 8. </string></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1345996680001,"created_by":1,"updated_at":1346190487122,"updated_by":1,"published_at":1345996680001,"published_by":1},{"id":33,"uuid":"7767e723-c69f-4763-8244-b324f0580999","title":"I'm a nerd, but I might scare your kids","slug":"i_m_a_nerd_but_i_might_scare_your_kids","markdown":"![](/content/images/2016/02/1024_revenge_nerds_630x420.jpg)\nRemember these guys? This is what the&nbsp;stereotypical&nbsp;view was/is of what a \"nerd\" looks like. Developers today are a much different class of people for sure. I have met some pretty cool people over the past year that certainly do not fit the bill. Fishing enthusiast, cigar aficionados, gear heads and others who love to grab a guitar and rock out. The definition has certainly changed from what your parents might consider a nerd.\n\n<img style=\"float:right; padding:10px\" src=\"/content/images/2016/02/ProfilePic.jpeg\" > A lot of developers have the same story; grew up messing around with a Commodore 64 or something of the sort, tinkered with this or that technology, studied Computer Science in college and then moved into the professional world. And if you read my [Me](http://tattoocoder.com/me) page, my story is not that different.\n\nIt's interesting to talk to the other developers in the community and see what they do in their \"off\" time. Me, enjoy anytime with my wife and a glass of wine, hop on the Harley go for a ride, spend time with the kiddies at the pool, build some legos, visit the guys at the tattoo shop and get some ink, and most recently took a bunch of teenagers to the Flo-rida concert at the Microsoft Store grand opening in Orlando. Not what some would expect from a guy who spends a good portion of his life buried in code.\n\nI'm not what you think of when it comes to a developer. At my first meeting for the Orlando Windows Phone User Group I was taking a picture with the guys who authored \"[Sam's Teach Yourself Windows Phone Application Development in 24 hours](http://www.amazon.com/gp/product/0672335395/ref=as_li_ss_il?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0672335395&amp;linkCode=as2&amp;tag=tattoocoder-20)\" and [Joe Healy](http://devfish.net/) said \"**...make sure the tats show!**\"\n\nWhen people see me, they probably would never guess what I do for a living. That I love gadgets, read technical blogs, spend hours learning new technology, or stay up at night wondering what's the next Windows Phone or Windows 8 app I'm gonna try.\n\nThe best part for me...my kids think what I do is cool! My wife supports me in everything I do and I couldn't ask for more. &nbsp;I have a good thing, I love what I do and they love me.\n\nSo yes I'm a Nerd...but I might scare your kids.\n\nWhat do you do in your off time? I'm curious...\n\n####2016 Update\nAll still true (Except the Windows Phone part)- love it all, it's all changing as fast as you can learn it. Nowadays the talk is **node.js**, **ASP.NET Core**, **Angular 2** and **Docker**.\n","html":"<p><img src=\"/content/images/2016/02/1024_revenge_nerds_630x420.jpg\" alt=\"\" />\nRemember these guys? This is what the&nbsp;stereotypical&nbsp;view was/is of what a \"nerd\" looks like. Developers today are a much different class of people for sure. I have met some pretty cool people over the past year that certainly do not fit the bill. Fishing enthusiast, cigar aficionados, gear heads and others who love to grab a guitar and rock out. The definition has certainly changed from what your parents might consider a nerd.</p>\n\n<p><img style=\"float:right; padding:10px\" src=\"/content/images/2016/02/ProfilePic.jpeg\" > A lot of developers have the same story; grew up messing around with a Commodore 64 or something of the sort, tinkered with this or that technology, studied Computer Science in college and then moved into the professional world. And if you read my <a href=\"http://tattoocoder.com/me\">Me</a> page, my story is not that different.</p>\n\n<p>It's interesting to talk to the other developers in the community and see what they do in their \"off\" time. Me, enjoy anytime with my wife and a glass of wine, hop on the Harley go for a ride, spend time with the kiddies at the pool, build some legos, visit the guys at the tattoo shop and get some ink, and most recently took a bunch of teenagers to the Flo-rida concert at the Microsoft Store grand opening in Orlando. Not what some would expect from a guy who spends a good portion of his life buried in code.</p>\n\n<p>I'm not what you think of when it comes to a developer. At my first meeting for the Orlando Windows Phone User Group I was taking a picture with the guys who authored \"<a href=\"http://www.amazon.com/gp/product/0672335395/ref=as_li_ss_il?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0672335395&amp;linkCode=as2&amp;tag=tattoocoder-20\">Sam's Teach Yourself Windows Phone Application Development in 24 hours</a>\" and <a href=\"http://devfish.net/\">Joe Healy</a> said \"<strong>...make sure the tats show!</strong>\"</p>\n\n<p>When people see me, they probably would never guess what I do for a living. That I love gadgets, read technical blogs, spend hours learning new technology, or stay up at night wondering what's the next Windows Phone or Windows 8 app I'm gonna try.</p>\n\n<p>The best part for me...my kids think what I do is cool! My wife supports me in everything I do and I couldn't ask for more. &nbsp;I have a good thing, I love what I do and they love me.</p>\n\n<p>So yes I'm a Nerd...but I might scare your kids.</p>\n\n<p>What do you do in your off time? I'm curious...</p>\n\n<h4 id=\"2016update\">2016 Update</h4>\n\n<p>All still true (Except the Windows Phone part)- love it all, it's all changing as fast as you can learn it. Nowadays the talk is <strong>node.js</strong>, <strong>ASP.NET Core</strong>, <strong>Angular 2</strong> and <strong>Docker</strong>.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1345730820001,"created_by":1,"updated_at":1456347812586,"updated_by":1,"published_at":1345730820001,"published_by":1},{"id":34,"uuid":"44702c23-5bd1-4bb1-a467-8249ef6c3317","title":"Upgrading from Windows 7 to Windows 8 RTM - Bootcamp","slug":"upgrading_from_windows_7_to_windows_8_rtm_bootcamp","markdown":"So I spent last night leaping into the upgrade process on my MacBook Pro from Windows 7 to Windows 8 Pro.&nbsp; Now, some may call it leaping off, ridicule me for being a .NET guy and having a&nbsp;Mac, but that's a whole other conversation.&nbsp; I wanted&nbsp;to just point&nbsp;out a few tidbits about the experience.\n\n### Things to have on hand\n\n*   BootCamp CD\n\n*   find it, burn it whatever*   USB Mouse\n\n*   if you are using a wireless, Bluetooth mouse your drivers will or may get jacked up when you make the upgrade cause mine did.*   Time!\n\n### Upgrading in place\nThis was a pretty standard process.&nbsp; I downloaded the RTM from MSDN and burned it to DVD, made sure I wrote down the key and slipped in the DVD and hit the go button.\n\nStandard wizard upgrade, nothing to dis-similar from the upgrade process from Vista to Windows 7\\. Screens are quite nice.\n\nThey great thing here was, I only had one or two reboots. BUT! that's when the fun starts.\n\n### Boot Camp Stuff\nOnce you go through the who are you, what wireless / network screens and you get through the logon screen.&nbsp; Please DO NOT reboot!\n\nI did that and lost my keyboard, ugh the pain!&nbsp; If that happens here is the work around.\n\nIn the lower left hand part of the screen there is the usability icon, click on this and enable the \"On Screen Keyboard\".&nbsp; Please be patient as again, depending on your configuration the responsiveness may be latent. Once that appears, either use that or in my case the keyboard was enabled at least for me to login.\n\nNext steps.\n\n1.  Uninstall Boot Camp from Windows.\n\n*   Do not repair. This can install additional copies of the Apple drivers and further send you into frustration. And in the end you will uninstall anyway.2.  Insert your Boot Camp CD and run the installer.Make sure that you select the default boot OS, if that's your thing.&nbsp; Also check the Apple Updates if you are using an original Boot Camp CD.&nbsp; I might suggest creating a new one from the iOS side of the PC since it will download the most recent version.\n\nAnd that's it.&nbsp; I would mention that these are my suggestions based on my experience and I am fully operational on a MacBook Pro 13\" 8GB Ram running Windows 8 Pro and loving it. \n\nBiggest issue for me was getting the trackpad to work, which lead me to uninstall Boot Camp and reinstall.&nbsp; This was a result of having the multiple copies of the drivers as I mentioned above.","html":"<p>So I spent last night leaping into the upgrade process on my MacBook Pro from Windows 7 to Windows 8 Pro.&nbsp; Now, some may call it leaping off, ridicule me for being a .NET guy and having a&nbsp;Mac, but that's a whole other conversation.&nbsp; I wanted&nbsp;to just point&nbsp;out a few tidbits about the experience.</p>\n\n<h3 id=\"thingstohaveonhand\">Things to have on hand</h3>\n\n<ul>\n<li><p>BootCamp CD</p></li>\n<li><p>find it, burn it whatever*   USB Mouse</p></li>\n<li><p>if you are using a wireless, Bluetooth mouse your drivers will or may get jacked up when you make the upgrade cause mine did.*   Time!</p></li>\n</ul>\n\n<h3 id=\"upgradinginplace\">Upgrading in place</h3>\n\n<p>This was a pretty standard process.&nbsp; I downloaded the RTM from MSDN and burned it to DVD, made sure I wrote down the key and slipped in the DVD and hit the go button.</p>\n\n<p>Standard wizard upgrade, nothing to dis-similar from the upgrade process from Vista to Windows 7. Screens are quite nice.</p>\n\n<p>They great thing here was, I only had one or two reboots. BUT! that's when the fun starts.</p>\n\n<h3 id=\"bootcampstuff\">Boot Camp Stuff</h3>\n\n<p>Once you go through the who are you, what wireless / network screens and you get through the logon screen.&nbsp; Please DO NOT reboot!</p>\n\n<p>I did that and lost my keyboard, ugh the pain!&nbsp; If that happens here is the work around.</p>\n\n<p>In the lower left hand part of the screen there is the usability icon, click on this and enable the \"On Screen Keyboard\".&nbsp; Please be patient as again, depending on your configuration the responsiveness may be latent. Once that appears, either use that or in my case the keyboard was enabled at least for me to login.</p>\n\n<p>Next steps.</p>\n\n<ol>\n<li><p>Uninstall Boot Camp from Windows.</p></li>\n<li><p>Do not repair. This can install additional copies of the Apple drivers and further send you into frustration. And in the end you will uninstall anyway.2.  Insert your Boot Camp CD and run the installer.Make sure that you select the default boot OS, if that's your thing.&nbsp; Also check the Apple Updates if you are using an original Boot Camp CD.&nbsp; I might suggest creating a new one from the iOS side of the PC since it will download the most recent version.</p></li>\n</ol>\n\n<p>And that's it.&nbsp; I would mention that these are my suggestions based on my experience and I am fully operational on a MacBook Pro 13\" 8GB Ram running Windows 8 Pro and loving it. </p>\n\n<p>Biggest issue for me was getting the trackpad to work, which lead me to uninstall Boot Camp and reinstall.&nbsp; This was a result of having the multiple copies of the drivers as I mentioned above.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1345132140000,"created_by":1,"updated_at":1346204901810,"updated_by":1,"published_at":1345132140000,"published_by":1},{"id":35,"uuid":"359768d9-5aee-45a9-b92e-4f6b50b4819e","title":"Develop Your First Windows Phone App - Get a Free Nokia Phone","slug":"develop_your_first_windows_phone_app_get_a_free_nokia_phone","markdown":"This past Friday I attended a Windows Phone Developer event put on by Rich Dunbar, who is a Nokia Developer Ambassador, here in Orlando.\nI have exchanged some tweets and emails with Rich in the past and watched some feedback from some of the previous events he had put on in the past; and I'll tell you the reviews had been good.Rich is running a great program.  Develop your first application for Windows Phone and get a free App Hub token ($99 value) and once your application is available in the marketplace, he'll send you a Windows Phone 7 device.  Not too bad right?  Well, I'll tell you it's a legit deal.The event was a starter for sure, but he has some good advice on marketing your application. For instance, the Nokia Developer site has a deep link there for generating a cool little banner ad like this one I did for Baseball Pro 12.So here is the program.1\\. Go to http://richarddunbar.blogspot.com - See the steps and rules.2\\. Follow @RichDunbar and @spboyer (that's me)3\\. Get the tools - see Rich's blog4\\. Develop! Ask Questions!5\\. Follow #wpdev on twitter6\\. Reap the benefitsRich is a great guy, he'll respond to you faster on Twitter than in email, so do that.  Feel free to ask me questions as well. ","html":"<p>This past Friday I attended a Windows Phone Developer event put on by Rich Dunbar, who is a Nokia Developer Ambassador, here in Orlando. <br />\nI have exchanged some tweets and emails with Rich in the past and watched some feedback from some of the previous events he had put on in the past; and I'll tell you the reviews had been good.Rich is running a great program.  Develop your first application for Windows Phone and get a free App Hub token ($99 value) and once your application is available in the marketplace, he'll send you a Windows Phone 7 device.  Not too bad right?  Well, I'll tell you it's a legit deal.The event was a starter for sure, but he has some good advice on marketing your application. For instance, the Nokia Developer site has a deep link there for generating a cool little banner ad like this one I did for Baseball Pro 12.So here is the program.1. Go to <a href='http://richarddunbar.blogspot.com'>http://richarddunbar.blogspot.com</a> - See the steps and rules.2. Follow @RichDunbar and @spboyer (that's me)3. Get the tools - see Rich's blog4. Develop! Ask Questions!5. Follow #wpdev on twitter6. Reap the benefitsRich is a great guy, he'll respond to you faster on Twitter than in email, so do that.  Feel free to ask me questions as well. </p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1344877560000,"created_by":1,"updated_at":1346190283842,"updated_by":1,"published_at":1344877560000,"published_by":1},{"id":36,"uuid":"4d5a6108-8ebb-499a-a7ec-e728396669dc","title":"DarkSky Developer Contest - Dates & Prize Pool","slug":"dark_sky_developer_contest_dates_prize_pool","markdown":"So here we are, the good stuff. When do we have to be done and what the heck do we get if we win?\n\n### Dates\nStart NOW, if you have not signed up please do so here. This is important, I need your valid email address so that I can get you the API developer key for Dark Sky.Next, apps must be submitted in completion no later than 10/1/2012\\.  This give us time to review them, get them loaded on or devices etc.  If you publish them to the Marketplace please send me the links so that we can get them downloaded.  If they are paid applications, please send us the .xap or provide a download link so we may side load the applications.So, prizes.  One grand prize for the best Windows 7 Phone and best Windows 8 Metro application. Each winning team or person will receive the following:NetAdvantage Ultimate  from InfragisticsDark Sky UmbrellaClick for larger imageDarkSky  Custom-printed senz˚ umbrellas — capable of withstanding 80 km/h winds$49.99 XBOX Live Point CardAlso each completed application submitted will also receive a free copy of NetAdvantage for Windows Phone from Infragistics.Other submissions will be awarded various prizes so get to coding!  We are excited to see what's in store.Any questions please contact @spboyer ","html":"<p>So here we are, the good stuff. When do we have to be done and what the heck do we get if we win?</p>\n\n<h3 id=\"dates\">Dates</h3>\n\n<p>Start NOW, if you have not signed up please do so here. This is important, I need your valid email address so that I can get you the API developer key for Dark Sky.Next, apps must be submitted in completion no later than 10/1/2012.  This give us time to review them, get them loaded on or devices etc.  If you publish them to the Marketplace please send me the links so that we can get them downloaded.  If they are paid applications, please send us the .xap or provide a download link so we may side load the applications.So, prizes.  One grand prize for the best Windows 7 Phone and best Windows 8 Metro application. Each winning team or person will receive the following:NetAdvantage Ultimate  from InfragisticsDark Sky UmbrellaClick for larger imageDarkSky  Custom-printed senz˚ umbrellas — capable of withstanding 80 km/h winds$49.99 XBOX Live Point CardAlso each completed application submitted will also receive a free copy of NetAdvantage for Windows Phone from Infragistics.Other submissions will be awarded various prizes so get to coding!  We are excited to see what's in store.Any questions please contact @spboyer </p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1343944380000,"created_by":1,"updated_at":1346190235533,"updated_by":1,"published_at":1343944380000,"published_by":1},{"id":37,"uuid":"173a8114-c8a6-411e-93ec-ac88e3ebae53","title":"Getting started with Windows Phone and MVVM Light - Part 2 of 2","slug":"getting_started_with_windows_phone_and_mvvm_light_part_2_of_2","markdown":"[CodeProject](http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=2961115) \nIn [Part 1](http://bit.ly/OaAdxt), we covered the following: \n\n*   Creating the application*   Connecting the View and the View-Model*   Adding an additional View or PagePart 2 we'll see how to add a button on the first page to navigate to the second page which will cover navigation and messaging to complete the application and although basic, will give a rather decent start to create and publish your first [Rubber Ducky](http://bit.ly/OsQsZD) application.\n\nIf you need the code, you can get it [here](http://sdrv.ms/QxCPes).\n\nLet’s start by opening MainPage.xaml.&nbsp; You should see the following image here:\n\nAdd a button by dragging it on to the design surface or adding the following code, it doesn’t matter where, just somewhere within the content grid.\n\n<pre class=\"brush: xml; highlight: ;\">&lt;TextBlock Text=\"{Binding Welcome}\"\n\t\t\t           Style=\"{StaticResource PhoneTextNormalStyle}\"\n\t\t\t           HorizontalAlignment=\"Center\"\n\t\t\t           VerticalAlignment=\"Center\"\n\t\t\t           FontSize=\"40\" /&gt;\n\n            &lt;Button Content=\"Button\" \n\t\t\t\t\tHeight=\"72\" HorizontalAlignment=\"Left\" \n\t\t\t\t\tMargin=\"154,354,0,0\" Name=\"button1\" \n\t\t\t\t\tVerticalAlignment=\"Top\" Width=\"160\" /&gt;\n</pre>\n\nNext, lets add the messaging capabilities which will work hand in hand with the navigation from one page to the next. Start by adding a new folder to the solution called “**Messages**”.\n\nThen add a new class called **NavigateToPageMessage.cs **which contains the following code.\n\n<pre class=\"brush: csharp; highlight: ;\">public class NavigateToPageMessage\n{\n\tpublic NavigateToPageMessage()\n\t{\n\n\t}\n\n\tpublic string PageName { get; set; }\n}</pre>\nNow we have to register the main page of the application to receive the NavigateToPageMessage and do something once it receives it. Open MainPage.xaml and add a new event handler for the Loaded Event.       Do this by selecting the **PhoneApplicationPage** in the Document Outline Window, go to the Properties Windows and select the Events Tab and double click the **_Loaded_** event to insert the code.\n\n&nbsp;      [![image](http://lh3.ggpht.com/-p3vDgVEggUo/UBqmOLVg_dI/AAAAAAAAAKU/jqXL5vb9VZ4/image_thumb%25255B1%25255D.png?imgmax=800 \"image\")](http://lh3.ggpht.com/-i4rq_yd6g1Y/UBqmNhHy0YI/AAAAAAAAAKM/S5bslzGxNRw/s1600-h/image%25255B3%25255D.png)\n\n&nbsp;Open the MainPage.xaml.cs code and find the newly inserted event handler which should look like the following:    \n\n<pre class=\"brush: csharp; highlight: ;\">private void PhoneApplicationPage_Loaded(object sender, System.Windows.RoutedEventArgs e)\n{\n\n}\n</pre>\nIn order to support messaging from MVVM Light, add the messaging namespace (MvvmLight1.Messages;) to the top of the page.      Next, we will add the code to subscribe to the **NavigateToPageMessage.**   \n\n**\n**\n<pre class=\"brush: csharp; highlight: ;\">private void PhoneApplicationPage_Loaded(object sender, System.Windows.RoutedEventArgs e)\n{\n\tMessenger.Default.Register&lt;NavigateToPageMessage&gt;\n\t\t\t\t(\n\t\t\t\t\tthis,\n\t\t\t\t\t(action) =&gt; ReceiveMessage(action)\n\t\t\t\t);\n}\n</pre>\nReceiveMessage is the delegate that will handle the message object, in this case the NavigateToPageMessage type.     \n\n<pre class=\"brush: csharp; highlight: ;\">private object ReceiveMessage(NavigateToPageMessage action)\n{\n\tvar page = string.Format(\"/Views/{0}View.xaml\", action.PageName);\n\n\tif (action.PageName == \"Main\")\n\t{\n\t\tpage = \"/MainPage.xaml\";\n\t}\n\n\tNavigationService.Navigate(\n\t   new System.Uri(page,\n\t\t\t System.UriKind.Relative));\n\treturn null;\n}\n</pre>\n<style type=\"text/css\">\n\n.csharpcode, .csharpcode pre\n{\n\tfont-size: small;\n\tcolor: black;\n\tfont-family: consolas, \"Courier New\", courier, monospace;\n\tbackground-color: #ffffff;\n\t/*white-space: pre;*/\n}\n.csharpcode pre { margin: 0em; }\n.csharpcode .rem { color: #008000; }\n.csharpcode .kwrd { color: #0000ff; }\n.csharpcode .str { color: #006080; }\n.csharpcode .op { color: #0000c0; }\n.csharpcode .preproc { color: #cc6633; }\n.csharpcode .asp { background-color: #ffff00; }\n.csharpcode .html { color: #800000; }\n.csharpcode .attr { color: #ff0000; }\n.csharpcode .alt \n{\n\tbackground-color: #f4f4f4;\n\twidth: 100%;\n\tmargin: 0em;\n}\n.csharpcode .lnum { color: #606060; }</style>   What we have done here is handled the property **PageName** of the action and to the application to navigate to the appropriate page. Pretty simple right?&nbsp; You’ll notice that I put in a special handler here if the PageName is Main to follow the default structure in the MVVM Light template.&nbsp; As a note, I typically move the MainPage into the Views folder and make the adjustments to all of the wiring so that all of my views are in the place where I like them.&nbsp; Next step is to hook up that button we added earlier to send the **NavigateToPageMessage **when its clicked.      If you have Blend, this portion is drag and drop, otherwise you’ll have to some cut and paste.       Open the project in Blend, then open MainPage.xaml in the designer. Select the Assets Tab and click on the Behaviors in the left panel.&nbsp; You will see a selection called **EventToCommand; **click and drag this item to either the Button on the design surface OR the button in the Object and Timeline and release.\n\n&nbsp;      [![image](http://lh4.ggpht.com/-aavJ5KeD5Rg/UBrKQhivdNI/AAAAAAAAAKo/10HUg1Lo1aU/image_thumb%25255B4%25255D.png?imgmax=800 \"image\")](http://lh4.ggpht.com/-S9KFShwvJy8/UBrKQH3ZYnI/AAAAAAAAAKk/l7v8BxOvM2s/s1600-h/image%25255B8%25255D.png)\n\n&nbsp;Then in the properties tab give the new EventToCommand the name “GoToPage2”, the EventName should already set to _Click_, if it is not change it.\n\n&nbsp;     [![image](http://lh4.ggpht.com/-A1RKfvPXqww/UBrKRa4gpkI/AAAAAAAAAK8/EviA1vLNclI/image_thumb%25255B7%25255D.png?imgmax=800 \"image\")](http://lh4.ggpht.com/-nMXvBu7YfA4/UBrKQzj-h8I/AAAAAAAAAK0/4LGuar3KiN0/s1600-h/image%25255B13%25255D.png)\n\n&nbsp;Save your changes, and if you view the xaml now you should see the following code    \n\n<pre class=\"brush: xml; highlight: ;\">&lt;Button Content=\"Button\" Height=\"72\" HorizontalAlignment=\"Left\" Margin=\"154,354,0,0\" x:Name=\"button1\" VerticalAlignment=\"Top\" Width=\"160\" &gt;\n\t&lt;i:Interaction.Triggers&gt;\n\t\t&lt;i:EventTrigger EventName=\"Click\"&gt;\n\t\t\t&lt;GalaSoft_MvvmLight_Command:EventToCommand x:Name=\"GoToPage2\" Command=\"{Binding GoToSecondPageCommand, Mode=OneWay}\"/&gt;\n\t\t&lt;/i:EventTrigger&gt;\n\t&lt;/i:Interaction.Triggers&gt;\n&lt;/Button&gt;\n</pre>\nNext step, back to Visual Studio to add the last bit of code to the MainViewModel.&nbsp; Add a new RelayCommand which is in the MvvmLight.Command namespace.    \n\n<pre class=\"brush: csharp; highlight: ;\"></pre><pre class=\"brush: csharp; highlight: ;\">public RelayCommand GoToSecondPageCommand\n{\n\tget;\n\tprivate set;\n}\n</pre>\nThen in the constructor in the “else” portion you need to instantiate the RelayCommand and add the handler to send the message. Add the following code    \n\n<pre class=\"brush: csharp; highlight: ;\"></pre><pre class=\"brush: csharp; highlight: ;\">GoToSecondPageCommand = new RelayCommand(() =&gt;\n                {\n                    MessageBox.Show(\"Going to Second Page now\");\n                    Messenger.Default.Send&lt;NavigateToPageMessage&gt;(new NavigateToPageMessage() { PageName = \"SecondPage\" });\n                });\n</pre>\nOne last step here is to tell the EventToCommand that we added in Blend that this is the command to execute when the Click event is fired.&nbsp; we do this by setting the Command property in the xaml to the following:    \n\n<pre class=\"brush: xml; highlight: ;\"></pre><pre class=\"brush: xml; highlight: ;\">&lt;Button Content=\"Button\" Height=\"72\" HorizontalAlignment=\"Left\" Margin=\"154,354,0,0\" x:Name=\"button1\" VerticalAlignment=\"Top\" Width=\"160\" &gt;\n\t&lt;i:Interaction.Triggers&gt;\n\t\t&lt;i:EventTrigger EventName=\"Click\"&gt;\n\t\t\t&lt;GalaSoft_MvvmLight_Command:EventToCommand x:Name=\"GoToPage2\" Command=\"{Binding GoToSecondPageCommand, Mode=OneWay}\"/&gt;\n\t\t&lt;/i:EventTrigger&gt;\n\t&lt;/i:Interaction.Triggers&gt;\n&lt;/Button&gt;\n</pre>\nSave all and run\n\n&nbsp; &nbsp; &nbsp;&nbsp;[![GoingTo2ndPage](http://lh3.ggpht.com/-SKAfdpVNNYk/UBrKRwS1KkI/AAAAAAAAALM/D7SFE3bRhPw/GoingTo2ndPage_thumb%25255B2%25255D.png?imgmax=800 \"GoingTo2ndPage\")](http://lh3.ggpht.com/-2iDa7U0e5rI/UBrKRt2-tLI/AAAAAAAAALE/STSgEkeseVo/s1600-h/GoingTo2ndPage%25255B4%25255D.png)[![2ndPsge](http://lh3.ggpht.com/-4O9k6D-vswE/UBrKTSOz9rI/AAAAAAAAALc/ouQmt8rnogM/2ndPsge_thumb%25255B2%25255D.png?imgmax=800 \"2ndPsge\")](http://lh6.ggpht.com/-LY6NWNZM4fc/UBrKSeqOlxI/AAAAAAAAALU/uPq1kQeHfn4/s1600-h/2ndPsge%25255B4%25255D.png)\n\n&nbsp;Click Ok and next page is presented.\n\n&nbsp;Now go build some apps!  \n\nDownload Code for Part 2 [here](http://sdrv.ms/Mfnlo7)","html":"<p><a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=2961115\">CodeProject</a> \nIn <a href=\"http://bit.ly/OaAdxt\">Part 1</a>, we covered the following: </p>\n\n<ul>\n<li>Creating the application*   Connecting the View and the View-Model*   Adding an additional View or PagePart 2 we'll see how to add a button on the first page to navigate to the second page which will cover navigation and messaging to complete the application and although basic, will give a rather decent start to create and publish your first <a href=\"http://bit.ly/OsQsZD\">Rubber Ducky</a> application.</li>\n</ul>\n\n<p>If you need the code, you can get it <a href=\"http://sdrv.ms/QxCPes\">here</a>.</p>\n\n<p>Let’s start by opening MainPage.xaml.&nbsp; You should see the following image here:</p>\n\n<p>Add a button by dragging it on to the design surface or adding the following code, it doesn’t matter where, just somewhere within the content grid.</p>\n\n<pre class=\"brush: xml; highlight: ;\">&lt;TextBlock Text=\"{Binding Welcome}\"  \n                       Style=\"{StaticResource PhoneTextNormalStyle}\"\n                       HorizontalAlignment=\"Center\"\n                       VerticalAlignment=\"Center\"\n                       FontSize=\"40\" /&gt;\n\n            &lt;Button Content=\"Button\" \n                    Height=\"72\" HorizontalAlignment=\"Left\" \n                    Margin=\"154,354,0,0\" Name=\"button1\" \n                    VerticalAlignment=\"Top\" Width=\"160\" /&gt;\n</pre>\n\n<p>Next, lets add the messaging capabilities which will work hand in hand with the navigation from one page to the next. Start by adding a new folder to the solution called “<strong>Messages</strong>”.</p>\n\n<p>Then add a new class called <em>*NavigateToPageMessage.cs *</em>which contains the following code.</p>\n\n<pre class=\"brush: csharp; highlight: ;\">public class NavigateToPageMessage  \n{\n    public NavigateToPageMessage()\n    {\n\n    }\n\n    public string PageName { get; set; }\n}</pre>\nNow we have to register the main page of the application to receive the NavigateToPageMessage and do something once it receives it. Open MainPage.xaml and add a new event handler for the Loaded Event.       Do this by selecting the **PhoneApplicationPage** in the Document Outline Window, go to the Properties Windows and select the Events Tab and double click the **_Loaded_** event to insert the code.\n\n&nbsp;      [![image](http://lh3.ggpht.com/-p3vDgVEggUo/UBqmOLVg_dI/AAAAAAAAAKU/jqXL5vb9VZ4/image_thumb%25255B1%25255D.png?imgmax=800 \"image\")](http://lh3.ggpht.com/-i4rq_yd6g1Y/UBqmNhHy0YI/AAAAAAAAAKM/S5bslzGxNRw/s1600-h/image%25255B3%25255D.png)\n\n&nbsp;Open the MainPage.xaml.cs code and find the newly inserted event handler which should look like the following:    \n\n<pre class=\"brush: csharp; highlight: ;\">private void PhoneApplicationPage_Loaded(object sender, System.Windows.RoutedEventArgs e)  \n{\n\n}\n</pre>  \n\n<p>In order to support messaging from MVVM Light, add the messaging namespace (MvvmLight1.Messages;) to the top of the page.      Next, we will add the code to subscribe to the <strong>NavigateToPageMessage.</strong>   </p>\n\n<p><em>*\n*</em></p>\n\n<pre class=\"brush: csharp; highlight: ;\">private void PhoneApplicationPage_Loaded(object sender, System.Windows.RoutedEventArgs e)  \n{\n    Messenger.Default.Register&lt;NavigateToPageMessage&gt;\n                (\n                    this,\n                    (action) =&gt; ReceiveMessage(action)\n                );\n}\n</pre>  \n\n<p>ReceiveMessage is the delegate that will handle the message object, in this case the NavigateToPageMessage type.     </p>\n\n<pre class=\"brush: csharp; highlight: ;\">private object ReceiveMessage(NavigateToPageMessage action)  \n{\n    var page = string.Format(\"/Views/{0}View.xaml\", action.PageName);\n\n    if (action.PageName == \"Main\")\n    {\n        page = \"/MainPage.xaml\";\n    }\n\n    NavigationService.Navigate(\n       new System.Uri(page,\n             System.UriKind.Relative));\n    return null;\n}\n</pre>  \n\n<p><style type=\"text/css\"></p>\n\n<p>.csharpcode, .csharpcode pre\n{\n    font-size: small;\n    color: black;\n    font-family: consolas, \"Courier New\", courier, monospace;\n    background-color: #ffffff;\n    /<em>white-space: pre;</em>/\n}\n.csharpcode pre { margin: 0em; }\n.csharpcode .rem { color: #008000; }\n.csharpcode .kwrd { color: #0000ff; }\n.csharpcode .str { color: #006080; }\n.csharpcode .op { color: #0000c0; }\n.csharpcode .preproc { color: #cc6633; }\n.csharpcode .asp { background-color: #ffff00; }\n.csharpcode .html { color: #800000; }\n.csharpcode .attr { color: #ff0000; }\n.csharpcode .alt \n{\n    background-color: #f4f4f4;\n    width: 100%;\n    margin: 0em;\n}\n.csharpcode .lnum { color: #606060; }</style>   What we have done here is handled the property <strong>PageName</strong> of the action and to the application to navigate to the appropriate page. Pretty simple right?&nbsp; You’ll notice that I put in a special handler here if the PageName is Main to follow the default structure in the MVVM Light template.&nbsp; As a note, I typically move the MainPage into the Views folder and make the adjustments to all of the wiring so that all of my views are in the place where I like them.&nbsp; Next step is to hook up that button we added earlier to send the <em>*NavigateToPageMessage *</em>when its clicked.      If you have Blend, this portion is drag and drop, otherwise you’ll have to some cut and paste.       Open the project in Blend, then open MainPage.xaml in the designer. Select the Assets Tab and click on the Behaviors in the left panel.&nbsp; You will see a selection called <em>*EventToCommand; *</em>click and drag this item to either the Button on the design surface OR the button in the Object and Timeline and release.</p>\n\n<p>&nbsp;      <a href=\"http://lh4.ggpht.com/-S9KFShwvJy8/UBrKQH3ZYnI/AAAAAAAAAKk/l7v8BxOvM2s/s1600-h/image%25255B8%25255D.png\"><img src=\"http://lh4.ggpht.com/-aavJ5KeD5Rg/UBrKQhivdNI/AAAAAAAAAKo/10HUg1Lo1aU/image_thumb%25255B4%25255D.png?imgmax=800\" alt=\"image\" title=\"image\" /></a></p>\n\n<p>&nbsp;Then in the properties tab give the new EventToCommand the name “GoToPage2”, the EventName should already set to <em>Click</em>, if it is not change it.</p>\n\n<p>&nbsp;     <a href=\"http://lh4.ggpht.com/-nMXvBu7YfA4/UBrKQzj-h8I/AAAAAAAAAK0/4LGuar3KiN0/s1600-h/image%25255B13%25255D.png\"><img src=\"http://lh4.ggpht.com/-A1RKfvPXqww/UBrKRa4gpkI/AAAAAAAAAK8/EviA1vLNclI/image_thumb%25255B7%25255D.png?imgmax=800\" alt=\"image\" title=\"image\" /></a></p>\n\n<p>&nbsp;Save your changes, and if you view the xaml now you should see the following code    </p>\n\n<pre class=\"brush: xml; highlight: ;\">&lt;Button Content=\"Button\" Height=\"72\" HorizontalAlignment=\"Left\" Margin=\"154,354,0,0\" x:Name=\"button1\" VerticalAlignment=\"Top\" Width=\"160\" &gt;  \n    &lt;i:Interaction.Triggers&gt;\n        &lt;i:EventTrigger EventName=\"Click\"&gt;\n            &lt;GalaSoft_MvvmLight_Command:EventToCommand x:Name=\"GoToPage2\" Command=\"{Binding GoToSecondPageCommand, Mode=OneWay}\"/&gt;\n        &lt;/i:EventTrigger&gt;\n    &lt;/i:Interaction.Triggers&gt;\n&lt;/Button&gt;\n</pre>  \n\n<p>Next step, back to Visual Studio to add the last bit of code to the MainViewModel.&nbsp; Add a new RelayCommand which is in the MvvmLight.Command namespace.    </p>\n\n<pre class=\"brush: csharp; highlight: ;\"></pre><pre class=\"brush: csharp; highlight: ;\">public RelayCommand GoToSecondPageCommand  \n{\n    get;\n    private set;\n}\n</pre>  \n\n<p>Then in the constructor in the “else” portion you need to instantiate the RelayCommand and add the handler to send the message. Add the following code    </p>\n\n<pre class=\"brush: csharp; highlight: ;\"></pre><pre class=\"brush: csharp; highlight: ;\">GoToSecondPageCommand = new RelayCommand(() =&gt;  \n                {\n                    MessageBox.Show(\"Going to Second Page now\");\n                    Messenger.Default.Send&lt;NavigateToPageMessage&gt;(new NavigateToPageMessage() { PageName = \"SecondPage\" });\n                });\n</pre>  \n\n<p>One last step here is to tell the EventToCommand that we added in Blend that this is the command to execute when the Click event is fired.&nbsp; we do this by setting the Command property in the xaml to the following:    </p>\n\n<pre class=\"brush: xml; highlight: ;\"></pre><pre class=\"brush: xml; highlight: ;\">&lt;Button Content=\"Button\" Height=\"72\" HorizontalAlignment=\"Left\" Margin=\"154,354,0,0\" x:Name=\"button1\" VerticalAlignment=\"Top\" Width=\"160\" &gt;  \n    &lt;i:Interaction.Triggers&gt;\n        &lt;i:EventTrigger EventName=\"Click\"&gt;\n            &lt;GalaSoft_MvvmLight_Command:EventToCommand x:Name=\"GoToPage2\" Command=\"{Binding GoToSecondPageCommand, Mode=OneWay}\"/&gt;\n        &lt;/i:EventTrigger&gt;\n    &lt;/i:Interaction.Triggers&gt;\n&lt;/Button&gt;\n</pre>  \n\n<p>Save all and run</p>\n\n<p>&nbsp; &nbsp; &nbsp;&nbsp;<a href=\"http://lh3.ggpht.com/-2iDa7U0e5rI/UBrKRt2-tLI/AAAAAAAAALE/STSgEkeseVo/s1600-h/GoingTo2ndPage%25255B4%25255D.png\"><img src=\"http://lh3.ggpht.com/-SKAfdpVNNYk/UBrKRwS1KkI/AAAAAAAAALM/D7SFE3bRhPw/GoingTo2ndPage_thumb%25255B2%25255D.png?imgmax=800\" alt=\"GoingTo2ndPage\" title=\"GoingTo2ndPage\" /></a><a href=\"http://lh6.ggpht.com/-LY6NWNZM4fc/UBrKSeqOlxI/AAAAAAAAALU/uPq1kQeHfn4/s1600-h/2ndPsge%25255B4%25255D.png\"><img src=\"http://lh3.ggpht.com/-4O9k6D-vswE/UBrKTSOz9rI/AAAAAAAAALc/ouQmt8rnogM/2ndPsge_thumb%25255B2%25255D.png?imgmax=800\" alt=\"2ndPsge\" title=\"2ndPsge\" /></a></p>\n\n<p>&nbsp;Click Ok and next page is presented.</p>\n\n<p>&nbsp;Now go build some apps!  </p>\n\n<p>Download Code for Part 2 <a href=\"http://sdrv.ms/Mfnlo7\">here</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1343934600001,"created_by":1,"updated_at":1347326660170,"updated_by":1,"published_at":1343934600001,"published_by":1},{"id":38,"uuid":"17304e5e-f9de-42c2-88e7-be74008d805f","title":"Orlando Windows Phone & Metro User Group Announces - Dark Sky API Developer App Contest!","slug":"orlando_windows_phone_metro_user_group_announces_dark_sky_api_developer_app_contest_","markdown":"Orlando Windows Phone & Metro User Group Announces - Dark Sky API Developer App Contest!  Are you a Florida based developer?\n\nHave some  skills you're dying to show off?\n\nWell now is the time!\n\n&nbsp;In support of the Florida .NET Development Community OrlandoWPUG is sponsoring a friendly contest of our development talent to find the best Windows Phone 7 and Windows 8 application using the Dark Sky API.\n\n[Dark Sky](http://darkskyapp.com/) is a new kind of weather app. It uses state-of-the-art weather forecasting to predict when it will rain or snow — down to the minute — at your exact location, and presents it to you alongside the most beautiful radar visualizations you’ve ever seen. \n\nJoel Martinez ([@joelmartinez](http://www.twitter.com/joelmartinez)), founder of the Orlando .NET User Group ([@ONETUG](http://www.twitter.com/onetug)), has created the [C# wrapper for the Dark Sky API](https://github.com/joelmartinez/darksky-csharp) - see the details on [Github](https://github.com/joelmartinez/darksky-csharp).  Prizes - they are going to be good!  There will be one grand prize for the \"Best Windows Phone 7 Application\" and one for the \"Best Windows 8 Metro Application\"\n\n&nbsp;Watch for more details - [Sign up](http://eepurl.com/nZXnH), follow Shayne Boyer aka TattooCoder, OrlandoWPUG Founder ([@spboyer](http://www.twitter.com/spboyer)) and [@OrlandoWPUG](http://www.twitter.com/orlandowpug) for announcements of start dates and further details....\n\nResources\n\n*   Register Form -&nbsp;[http://eepurl.com/nZXnH](http://eepurl.com/nZXnH)\n*   Dark Sky C# API Wrapper - [https://github.com/joelmartinez/darksky-csharp](https://github.com/joelmartinez/darksky-csharp)","html":"<p>Orlando Windows Phone &amp; Metro User Group Announces - Dark Sky API Developer App Contest!  Are you a Florida based developer?</p>\n\n<p>Have some  skills you're dying to show off?</p>\n\n<p>Well now is the time!</p>\n\n<p>&nbsp;In support of the Florida .NET Development Community OrlandoWPUG is sponsoring a friendly contest of our development talent to find the best Windows Phone 7 and Windows 8 application using the Dark Sky API.</p>\n\n<p><a href=\"http://darkskyapp.com/\">Dark Sky</a> is a new kind of weather app. It uses state-of-the-art weather forecasting to predict when it will rain or snow — down to the minute — at your exact location, and presents it to you alongside the most beautiful radar visualizations you’ve ever seen. </p>\n\n<p>Joel Martinez (<a href=\"http://www.twitter.com/joelmartinez\">@joelmartinez</a>), founder of the Orlando .NET User Group (<a href=\"http://www.twitter.com/onetug\">@ONETUG</a>), has created the <a href=\"https://github.com/joelmartinez/darksky-csharp\">C# wrapper for the Dark Sky API</a> - see the details on <a href=\"https://github.com/joelmartinez/darksky-csharp\">Github</a>.  Prizes - they are going to be good!  There will be one grand prize for the \"Best Windows Phone 7 Application\" and one for the \"Best Windows 8 Metro Application\"</p>\n\n<p>&nbsp;Watch for more details - <a href=\"http://eepurl.com/nZXnH\">Sign up</a>, follow Shayne Boyer aka TattooCoder, OrlandoWPUG Founder (<a href=\"http://www.twitter.com/spboyer\">@spboyer</a>) and <a href=\"http://www.twitter.com/orlandowpug\">@OrlandoWPUG</a> for announcements of start dates and further details....</p>\n\n<p>Resources</p>\n\n<ul>\n<li>Register Form -&nbsp;<a href=\"http://eepurl.com/nZXnH\">http://eepurl.com/nZXnH</a></li>\n<li>Dark Sky C# API Wrapper - <a href=\"https://github.com/joelmartinez/darksky-csharp\">https://github.com/joelmartinez/darksky-csharp</a></li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1343319300000,"created_by":1,"updated_at":1343319389852,"updated_by":1,"published_at":1343319300000,"published_by":1},{"id":39,"uuid":"9a88409e-912c-4b93-b4dd-f50e54e974fe","title":"Getting started with Windows Phone and MVVM Light - Part 1 of 2","slug":"getting_started_with_windows_phone_and_mvvm_light_part_1_of_2","markdown":"[CodeProject](http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=2961115)\nA few days ago, Rich Dunbar wrote a [post](http://richarddunbar.blogspot.co.uk/2012/06/how-to-get-started-with-windows-phone.html)&nbsp;about how to get started with with Windows Phone Development and the post went freaking viral.  Now the reason here is that Rich, in his spare time, sponsors and host events for Nokia in order to promote Windows Phone Development and as a a reward will get you a Nokia Device and App Hub Token. A pretty nice prize for learning how to write apps for Windows Phone.\n\n&nbsp;The post is a pretty good resource on where to get what you need to get started and how to get the prize. Here is an excert...\n\n> _Every time I tweet about new Windows Phone developers being able to receive a free Microsoft App Hub registration token (a $99 value) and a sweet Nokia Lumia dev device (currently I have Lumia 800's), I get a lot of \"I sure wish I could make an app\" responses. So I am writing this post to help you know just where to start and what tools are available to help you be successful in a hurry.\n> Step 1: Download and install the necessary SDK, SDK update and Silverlight tool kit for Windows Phone development.\n> WP7 SDK 7.1: [http://www.microsoft.com/en-us/download/details.aspx?displaylang=en&amp;id=27570&nbsp;](http://www.microsoft.com/en-us/download/details.aspx?displaylang=en&amp;id=27570)\n> WP7 SDK 7.1.1 Update: [http://www.microsoft.com/en-us/download/details.aspx?id=29233](http://www.microsoft.com/en-us/download/details.aspx?id=29233)\n> Silverlight for Windows Phone Toolkit: [&nbsp;http://silverlight.codeplex.com/releases/view/75888](http://silverlight.codeplex.com/releases/view/75888)\n> Step 2: Bookmark or favorite the following sites for resources, code samples, tutorials, templates, icons and many other things to help you get started and continue developing.&nbsp;_> [_...Read more_](http://richarddunbar.blogspot.co.uk/2012/06/how-to-get-started-with-windows-phone.html)\nIn Orlando on the 10th of August, he is hosting an event that covers a lot if not all of the post step by step. &nbsp;Sign up here if you're in that area:&nbsp;Nokia Meetup - Orlando, FL | Aug 10, 2012 - Meetup [http://bit.ly/NHchzF](http://bit.ly/NHchzF)&nbsp;.\n\nWhat I wanted to do with this post is give you what I think is another need to know when developing Windows Phone Applications and that's the MVVM design pattern using [MVVM Light](http://mvvmlight.codeplex.com/)&nbsp;by&nbsp;Laurent Bugnion. So, here goes.\n\nThere are a few other MVVM Frameworks available, but this by far is my favorite and in fact was also used by Amazon in their Kindle for Windows Phone application.\n\nStart by going [here](http://mvvmlight.codeplex.com/) and installing the latest version, this will install the templates within Visual Studio and what you'll need to complete the steps in this walk through as well as future applications I look forward to seeing.\n\n###        Creating the Application\n\nOpen Visual Studio (I'm using 2010 for this), select New Project and in the Installed Templates you'll see MVVMLight(WP71).\n\n<table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\">[![](http://1.bp.blogspot.com/-24_Pe0F4OCI/UAbCOvZ8rCI/AAAAAAAAAGk/fBLmBOl3b88/s400/7-18-2012+9-58-40+AM.png)](http://1.bp.blogspot.com/-24_Pe0F4OCI/UAbCOvZ8rCI/AAAAAAAAAGk/fBLmBOl3b88/s1600/7-18-2012+9-58-40+AM.png)</td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">You'll notice that MVVM Light supports WP7 and WP7.1, it also supports Windows 8 too!</td></tr></tbody></table>I left the name of the project **_MVVMLight1_** just for example purposes. &nbsp;Go ahead and click **OK **and create the project. Before we write an additional code let's just hit F5 and make sure that the project compiles and the \"test\" initial page fires up. &nbsp;This ensures that the template / framework and all of the pieces and parts of MVVM Light are operational. &nbsp;If so, you should see the following:\n\n###        Connecting the View and the View-Model\n\nFirst let's look at the View. Open **MainPage.xaml**, and take a look at line 17\\. &nbsp;The most important piece of MVVM is setting the DataContext of the View. &nbsp;This allows the View to know where to look for its data or bindings.\n\n<pre class=\"brush: xml; highlight: [17];\" style=\"width: 500 px;\">&lt;phone:PhoneApplicationPage x:Class=\"MvvmLight1.MainPage\"\n                            xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n                            xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n                            xmlns:phone=\"clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone\"\n                            xmlns:shell=\"clr-namespace:Microsoft.Phone.Shell;assembly=Microsoft.Phone\"\n                            xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n                            xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n                            FontFamily=\"{StaticResource PhoneFontFamilyNormal}\"\n                            FontSize=\"{StaticResource PhoneFontSizeNormal}\"\n                            Foreground=\"{StaticResource PhoneForegroundBrush}\"\n                            SupportedOrientations=\"Portrait\"\n                            Orientation=\"Portrait\"\n                            mc:Ignorable=\"d\"\n                            d:DesignWidth=\"480\"\n                            d:DesignHeight=\"768\"\n                            shell:SystemTray.IsVisible=\"True\"\n                            DataContext=\"{Binding Main, Source={StaticResource Locator}}\"&gt;</pre>\nYou'll notice that instead of binding to an object directly, the DataContext is set to a StaticResource Property called **_Main _**within _Locator_. We'll put that aside for now until we cover the rest of the information here in the view.\n\nNext, if you move down to line 32, you'll see where the view is binding to properties in the View-Model.\n\n<pre class=\"brush: xml; highlight: [5,8,16];\">&lt;StackPanel x:Name=\"TitlePanel\"\n            Grid.Row=\"0\"\n            Margin=\"24,24,0,12\"&gt;\n    &lt;TextBlock x:Name=\"ApplicationTitle\"\n               Text=\"{Binding ApplicationTitle}\"\n               Style=\"{StaticResource PhoneTextNormalStyle}\" /&gt;\n    &lt;TextBlock x:Name=\"PageTitle\"\n               Text=\"{Binding PageName}\"\n               Margin=\"-3,-8,0,0\"\n               Style=\"{StaticResource PhoneTextTitle1Style}\" /&gt;\n&lt;/StackPanel&gt;\n\n&lt;Grid x:Name=\"ContentGrid\"\n      Grid.Row=\"1\"&gt;\n\n    &lt;TextBlock Text=\"{Binding Welcome}\"\n               Style=\"{StaticResource PhoneTextNormalStyle}\"\n               HorizontalAlignment=\"Center\"\n               VerticalAlignment=\"Center\"\n               FontSize=\"40\" /&gt;\n&lt;/Grid&gt;</pre>\nBy setting the **Text**&nbsp;property equal to {Binding Welcome} for example it is telling the view to get the value from the View-Model which is subsequently set in the DataContext of the View as stated above. So in looking at ViewModel/MainViewModel.cs in the solution explorer you'll see that that value is set to_&nbsp;\"Welcome to MVVM Light\"_.\n\n<pre class=\"brush: csharp; highlight: [5];\">public string Welcome\n        {\n            get\n            {\n                return \"Welcome to MVVM Light\";\n            }\n        }\n</pre>\n\n###        ViewModelLocator\nOk, so back to the ViewModelLocator. This class is the air traffic controller, if you will, of linking up your views with the view models, well that's how I look at it anyway.  It's responsible for creating and disposing of all of your View-Models, and although it is not the only way to do this; it is the way MVVM Light does it.One thing that I'll state is that other than adding additional views, I almost never touch the ViewModelLocator code, it's thoughtless when it comes to the core app development.\nThe application sets a resource in App.xaml as shown below: <application.resources>     <vm:viewmodellocator x:key=\"Locator\" d:isdatasource=\"True\"> </vm:viewmodellocator></application.resources>Seems pretty cut and dry. BUT where a majority of the examples I have seen concerning MVVM Light stop is right here. Other that some specific how to do this or that, I think they fall short for the beginner.  So, the next step is adding an additional page. So let's move on...     Adding a Second PageFor the sake of organization and keeping a little sanity when getting into large applications let's add a new folder called \"View\".  Next, right click and select Add -> New Item. You'll see now that within the Add Item Dialog you have a few options for MVVM Light as well as the traditional add items.Select MvvmView (WP7) and name it SecondPageView.xaml and click ok.  You'll notice that the structure, DataContext, etc is exactly the same of MainPage.xaml, essentially it's a template and easy to change.Next, we will add a new View-Model. So, right click the ViewModel folder and select Add->New Item->MvvmViewModel (WP7), name the View-Model \"SecondPageViewModel.cs\" and click Add.In order to wire up the new View and View-Model we must open up the ViewModelLocator.cs class and take advantage of the snippets that MVVM Light gives us to do so and then do a little clean up.Go to just above the constructor and type in the following and hit enter -> _mvvmlocatorproperty_What this snippet does is add the following items to the class.<pre class=\"brush: csharp\">private static ViewModelType _viewModelPropertyName;\n\n        /// <summary>\n        /// Gets the ViewModelPropertyName property.\n        /// </summary>\n        public static ViewModelType ViewModelPropertyNameStatic\n        {\n            get\n            {\n                if (_viewModelPropertyName == null)\n                {\n                    CreateViewModelPropertyName();\n                }\n\n                return _viewModelPropertyName;\n            }\n        }\n</pre>\nNow the snippet will highlight the **ViewModelType **identifier first and you will want to change this to **SecondPageViewModel**, then hit tab. Second, change the **_viewModelPropetyName **to **_viewModelSecondPage **and hit tab. Finally, you will be navigated to the comment portion for the **ViewModelPropertyName **and change this to **SecondPageViewModel**.  When you are done it should look like this... \n\n<pre class=\"brush: csharp\">private static SecondPageViewModel _viewModelSecondPage;\n\n        /// <summary>\n        /// Gets the ViewModelSecondPage property.\n        /// </summary>\n        public static SecondPageViewModel ViewModelSecondPageStatic\n        {\n            get\n            {\n                if (_viewModelSecondPage == null)       \n                {\n                    CreateViewModelSecondPage();\n                }\n\n                return _viewModelSecondPage;\n            }\n        }\n</pre>\nOk, now a little work to do to make this addition complete. &nbsp;Need to add \"&nbsp;CreateViewModelSecondPage();\" to the constructor just under \"CreateMain();\". &nbsp;This ensures that the instance of the new View-Model is created.\n\nNext, one draw back is that the snippet creates a duplicate of \"Cleanup()\", so if you get the following error:\n\n> Type 'MvvmLight1.ViewModel.ViewModelLocator' already defines a member called 'Cleanup' with the same parameter typesYou'll need to also move the contents of the duplicated method to the existing Cleanup method. In our case, the contents are \" ClearViewModelSecondPage();\".Last step, go to the SecondPageView.xaml and change the value in the DataContext to the new ViewModel.from:DataContext=\"{Binding ViewModelName, Source={StaticResource Locator}}\">to:DataContext=\"{Binding SecondPageViewModel, Source={StaticResource Locator}}\">Part 2 we'll see how to add a button on the first page to navigate to the second page which will cover navigation and messaging. Download code for Part 1 here","html":"<p><a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=2961115\">CodeProject</a>\nA few days ago, Rich Dunbar wrote a <a href=\"http://richarddunbar.blogspot.co.uk/2012/06/how-to-get-started-with-windows-phone.html\">post</a>&nbsp;about how to get started with with Windows Phone Development and the post went freaking viral.  Now the reason here is that Rich, in his spare time, sponsors and host events for Nokia in order to promote Windows Phone Development and as a a reward will get you a Nokia Device and App Hub Token. A pretty nice prize for learning how to write apps for Windows Phone.</p>\n\n<p>&nbsp;The post is a pretty good resource on where to get what you need to get started and how to get the prize. Here is an excert...</p>\n\n<blockquote>\n  <p><em>Every time I tweet about new Windows Phone developers being able to receive a free Microsoft App Hub registration token (a $99 value) and a sweet Nokia Lumia dev device (currently I have Lumia 800's), I get a lot of \"I sure wish I could make an app\" responses. So I am writing this post to help you know just where to start and what tools are available to help you be successful in a hurry.\n  Step 1: Download and install the necessary SDK, SDK update and Silverlight tool kit for Windows Phone development.\n  WP7 SDK 7.1: <a href=\"http://www.microsoft.com/en-us/download/details.aspx?displaylang=en&amp;id=27570\">http://www.microsoft.com/en-us/download/details.aspx?displaylang=en&amp;id=27570&nbsp;</a>\n  WP7 SDK 7.1.1 Update: <a href=\"http://www.microsoft.com/en-us/download/details.aspx?id=29233\">http://www.microsoft.com/en-us/download/details.aspx?id=29233</a>\n  Silverlight for Windows Phone Toolkit: <a href=\"http://silverlight.codeplex.com/releases/view/75888\">&nbsp;<a href='http://silverlight.codeplex.com/releases/view/75888'>http://silverlight.codeplex.com/releases/view/75888</a></a>\n  Step 2: Bookmark or favorite the following sites for resources, code samples, tutorials, templates, icons and many other things to help you get started and continue developing.&nbsp;</em>> <a href=\"http://richarddunbar.blogspot.co.uk/2012/06/how-to-get-started-with-windows-phone.html\"><em>...Read more</em></a>\n  In Orlando on the 10th of August, he is hosting an event that covers a lot if not all of the post step by step. &nbsp;Sign up here if you're in that area:&nbsp;Nokia Meetup - Orlando, FL | Aug 10, 2012 - Meetup <a href=\"http://bit.ly/NHchzF\">http://bit.ly/NHchzF</a>&nbsp;.</p>\n</blockquote>\n\n<p>What I wanted to do with this post is give you what I think is another need to know when developing Windows Phone Applications and that's the MVVM design pattern using <a href=\"http://mvvmlight.codeplex.com/\">MVVM Light</a>&nbsp;by&nbsp;Laurent Bugnion. So, here goes.</p>\n\n<p>There are a few other MVVM Frameworks available, but this by far is my favorite and in fact was also used by Amazon in their Kindle for Windows Phone application.</p>\n\n<p>Start by going <a href=\"http://mvvmlight.codeplex.com/\">here</a> and installing the latest version, this will install the templates within Visual Studio and what you'll need to complete the steps in this walk through as well as future applications I look forward to seeing.</p>\n\n<h3 id=\"creatingtheapplication\">Creating the Application</h3>\n\n<p>Open Visual Studio (I'm using 2010 for this), select New Project and in the Installed Templates you'll see MVVMLight(WP71).</p>\n\n<p><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://1.bp.blogspot.com/-24_Pe0F4OCI/UAbCOvZ8rCI/AAAAAAAAAGk/fBLmBOl3b88/s1600/7-18-2012+9-58-40+AM.png\"><img src=\"http://1.bp.blogspot.com/-24_Pe0F4OCI/UAbCOvZ8rCI/AAAAAAAAAGk/fBLmBOl3b88/s400/7-18-2012+9-58-40+AM.png\" alt=\"\" title=\"\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">You'll notice that MVVM Light supports WP7 and WP7.1, it also supports Windows 8 too!</td></tr></tbody></table>I left the name of the project <strong><em>MVVMLight1</em></strong> just for example purposes. &nbsp;Go ahead and click <em>*OK *</em>and create the project. Before we write an additional code let's just hit F5 and make sure that the project compiles and the \"test\" initial page fires up. &nbsp;This ensures that the template / framework and all of the pieces and parts of MVVM Light are operational. &nbsp;If so, you should see the following:</p>\n\n<h3 id=\"connectingtheviewandtheviewmodel\">Connecting the View and the View-Model</h3>\n\n<p>First let's look at the View. Open <strong>MainPage.xaml</strong>, and take a look at line 17. &nbsp;The most important piece of MVVM is setting the DataContext of the View. &nbsp;This allows the View to know where to look for its data or bindings.</p>\n\n<pre class=\"brush: xml; highlight: [17];\" style=\"width: 500 px;\">&lt;phone:PhoneApplicationPage x:Class=\"MvvmLight1.MainPage\"  \n                            xmlns=\"<a href='http://schemas.microsoft.com/winfx/2006/xaml/presentation'>http://schemas.microsoft.com/winfx/2006/xaml/presentation</a>\"\n                            xmlns:x=\"<a href='http://schemas.microsoft.com/winfx/2006/xaml'>http://schemas.microsoft.com/winfx/2006/xaml</a>\"\n                            xmlns:phone=\"clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone\"\n                            xmlns:shell=\"clr-namespace:Microsoft.Phone.Shell;assembly=Microsoft.Phone\"\n                            xmlns:d=\"<a href='http://schemas.microsoft.com/expression/blend/2008'>http://schemas.microsoft.com/expression/blend/2008</a>\"\n                            xmlns:mc=\"<a href='http://schemas.openxmlformats.org/markup-compatibility/2006'>http://schemas.openxmlformats.org/markup-compatibility/2006</a>\"\n                            FontFamily=\"{StaticResource PhoneFontFamilyNormal}\"\n                            FontSize=\"{StaticResource PhoneFontSizeNormal}\"\n                            Foreground=\"{StaticResource PhoneForegroundBrush}\"\n                            SupportedOrientations=\"Portrait\"\n                            Orientation=\"Portrait\"\n                            mc:Ignorable=\"d\"\n                            d:DesignWidth=\"480\"\n                            d:DesignHeight=\"768\"\n                            shell:SystemTray.IsVisible=\"True\"\n                            DataContext=\"{Binding Main, Source={StaticResource Locator}}\"&gt;</pre>\nYou'll notice that instead of binding to an object directly, the DataContext is set to a StaticResource Property called **_Main _**within _Locator_. We'll put that aside for now until we cover the rest of the information here in the view.\n\nNext, if you move down to line 32, you'll see where the view is binding to properties in the View-Model.\n\n<pre class=\"brush: xml; highlight: [5,8,16];\">&lt;StackPanel x:Name=\"TitlePanel\"  \n            Grid.Row=\"0\"\n            Margin=\"24,24,0,12\"&gt;\n    &lt;TextBlock x:Name=\"ApplicationTitle\"\n               Text=\"{Binding ApplicationTitle}\"\n               Style=\"{StaticResource PhoneTextNormalStyle}\" /&gt;\n    &lt;TextBlock x:Name=\"PageTitle\"\n               Text=\"{Binding PageName}\"\n               Margin=\"-3,-8,0,0\"\n               Style=\"{StaticResource PhoneTextTitle1Style}\" /&gt;\n&lt;/StackPanel&gt;\n\n&lt;Grid x:Name=\"ContentGrid\"\n      Grid.Row=\"1\"&gt;\n\n    &lt;TextBlock Text=\"{Binding Welcome}\"\n               Style=\"{StaticResource PhoneTextNormalStyle}\"\n               HorizontalAlignment=\"Center\"\n               VerticalAlignment=\"Center\"\n               FontSize=\"40\" /&gt;\n&lt;/Grid&gt;</pre>\nBy setting the **Text**&nbsp;property equal to {Binding Welcome} for example it is telling the view to get the value from the View-Model which is subsequently set in the DataContext of the View as stated above. So in looking at ViewModel/MainViewModel.cs in the solution explorer you'll see that that value is set to_&nbsp;\"Welcome to MVVM Light\"_.\n\n<pre class=\"brush: csharp; highlight: [5];\">public string Welcome  \n        {\n            get\n            {\n                return \"Welcome to MVVM Light\";\n            }\n        }\n</pre>\n\n<h3 id=\"viewmodellocator\">ViewModelLocator</h3>\n\n<p>Ok, so back to the ViewModelLocator. This class is the air traffic controller, if you will, of linking up your views with the view models, well that's how I look at it anyway.  It's responsible for creating and disposing of all of your View-Models, and although it is not the only way to do this; it is the way MVVM Light does it.One thing that I'll state is that other than adding additional views, I almost never touch the ViewModelLocator code, it's thoughtless when it comes to the core app development. <br />\nThe application sets a resource in App.xaml as shown below: <application.resources>     <vm:viewmodellocator x:key=\"Locator\" d:isdatasource=\"True\"> </vm:viewmodellocator></application.resources>Seems pretty cut and dry. BUT where a majority of the examples I have seen concerning MVVM Light stop is right here. Other that some specific how to do this or that, I think they fall short for the beginner.  So, the next step is adding an additional page. So let's move on...     Adding a Second PageFor the sake of organization and keeping a little sanity when getting into large applications let's add a new folder called \"View\".  Next, right click and select Add -> New Item. You'll see now that within the Add Item Dialog you have a few options for MVVM Light as well as the traditional add items.Select MvvmView (WP7) and name it SecondPageView.xaml and click ok.  You'll notice that the structure, DataContext, etc is exactly the same of MainPage.xaml, essentially it's a template and easy to change.Next, we will add a new View-Model. So, right click the ViewModel folder and select Add->New Item->MvvmViewModel (WP7), name the View-Model \"SecondPageViewModel.cs\" and click Add.In order to wire up the new View and View-Model we must open up the ViewModelLocator.cs class and take advantage of the snippets that MVVM Light gives us to do so and then do a little clean up.Go to just above the constructor and type in the following and hit enter -> <em>mvvmlocatorproperty</em>What this snippet does is add the following items to the class.<pre class=\"brush: csharp\">private static ViewModelType _viewModelPropertyName;</p>\n\n<pre><code>    /// &lt;summary&gt;\n    /// Gets the ViewModelPropertyName property.\n    /// &lt;/summary&gt;\n    public static ViewModelType ViewModelPropertyNameStatic\n    {\n        get\n        {\n            if (_viewModelPropertyName == null)\n            {\n                CreateViewModelPropertyName();\n            }\n\n            return _viewModelPropertyName;\n        }\n    }\n</code></pre>\n\n<p></pre> <br />\nNow the snippet will highlight the <strong>ViewModelType <em>*identifier first and you will want to change this to *</em>SecondPageViewModel</strong>, then hit tab. Second, change the <strong><em>viewModelPropetyName **to **</em>viewModelSecondPage <em>*and hit tab. Finally, you will be navigated to the comment portion for the *</em>ViewModelPropertyName <em>*and change this to *</em>SecondPageViewModel</strong>.  When you are done it should look like this... </p>\n\n<pre class=\"brush: csharp\">private static SecondPageViewModel _viewModelSecondPage;\n\n        /// <summary>\n        /// Gets the ViewModelSecondPage property.\n        /// </summary>\n        public static SecondPageViewModel ViewModelSecondPageStatic\n        {\n            get\n            {\n                if (_viewModelSecondPage == null)       \n                {\n                    CreateViewModelSecondPage();\n                }\n\n                return _viewModelSecondPage;\n            }\n        }\n</pre>  \n\n<p>Ok, now a little work to do to make this addition complete. &nbsp;Need to add \"&nbsp;CreateViewModelSecondPage();\" to the constructor just under \"CreateMain();\". &nbsp;This ensures that the instance of the new View-Model is created.</p>\n\n<p>Next, one draw back is that the snippet creates a duplicate of \"Cleanup()\", so if you get the following error:</p>\n\n<blockquote>\n  <p>Type 'MvvmLight1.ViewModel.ViewModelLocator' already defines a member called 'Cleanup' with the same parameter typesYou'll need to also move the contents of the duplicated method to the existing Cleanup method. In our case, the contents are \" ClearViewModelSecondPage();\".Last step, go to the SecondPageView.xaml and change the value in the DataContext to the new ViewModel.from:DataContext=\"{Binding ViewModelName, Source={StaticResource Locator}}\">to:DataContext=\"{Binding SecondPageViewModel, Source={StaticResource Locator}}\">Part 2 we'll see how to add a button on the first page to navigate to the second page which will cover navigation and messaging. Download code for Part 1 here</p>\n</blockquote>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1342636440001,"created_by":1,"updated_at":1347326700309,"updated_by":1,"published_at":1342636440001,"published_by":1},{"id":40,"uuid":"20ff2040-0b8f-49b3-be08-4d44b3404670","title":"Orlando Windows Phone User Group - Kickoff Meeting","slug":"orlando_windows_phone_user_group_kickoff_meeting","markdown":"<table cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: left; margin-right: 1em; text-align: left;\"><tbody><tr><td style=\"text-align: center;\">[![](http://4.bp.blogspot.com/-Jy3jhSyRxC8/UAQk7AELoEI/AAAAAAAAAFs/05On55UJ26E/s200/owpug-logo-new.png)](http://4.bp.blogspot.com/-Jy3jhSyRxC8/UAQk7AELoEI/AAAAAAAAAFs/05On55UJ26E/s1600/owpug-logo-new.png)</td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">[owpug.tattoocoder.com](http://owpug.tattoocoder.com/)</td></tr></tbody></table>[](http://www.blogger.com/)Wow what a great start to the new group in Orlando!\n\nFirst, let me start by thanking [Voxeo ](http://www.blogger.com/http//:www.voxeo.com)&nbsp;([@voxeo](http://twitter.com/voxeo))&nbsp;for hosting the event. &nbsp;What a great room, theater seating, barista on staff, great office space...very tech! &nbsp;They do offer co-lo office space so hit them up if you are a startup and you need some space. &nbsp;Almost every wall in this place is a whiteboard.\n\n<table cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: right; margin-left: 1em; text-align: right;\"><tbody><tr><td style=\"text-align: center;\">[![](http://4.bp.blogspot.com/-EJasR9ATO54/UAQihpLJVWI/AAAAAAAAAFc/5NjEhIt1vYY/s200/WP_000092.jpg)](http://4.bp.blogspot.com/-EJasR9ATO54/UAQihpLJVWI/AAAAAAAAAFc/5NjEhIt1vYY/s1600/WP_000092.jpg)</td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Those chairs were awesome!</td></tr></tbody></table>Attendees&nbsp;included Windows Phone MVPs, authors, [ComponentOne](http://www.componentone.com/), Windows Phone Marketplace champs, newbies and even non Windows Phone [](http://www.blogger.com/)devs; exactly what I was looking for when starting this group. A really exciting group to engage in and the conversation and interaction was more than I expected.\n\nAs I said at the beginning, it's a very exciting time to be a developer in the Microsoft .NET stack of technology. If you're not, you either doing the wrong thing or you're dead! \n\nWith the recent announcements of Windows Phone 8 and Surface, I can't think of a better time to sharpen your skills or pick a new path in your development career.\n\n<table cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: left; margin-right: 1em; text-align: left;\"><tbody><tr><td style=\"text-align: center;\">[![](http://2.bp.blogspot.com/-Y978QJsILww/UAQherApK4I/AAAAAAAAAFU/vxvCVGNnW5U/s200/WP_000091.jpg)](http://2.bp.blogspot.com/-Y978QJsILww/UAQherApK4I/AAAAAAAAAFU/vxvCVGNnW5U/s1600/WP_000091.jpg)</td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Luis and Alex telling us the tricks.</td></tr></tbody></table>Next up, we had Alex ([@Aapg1102](http://twitter.com/Aapg1102)) and Luis Perez ([@LuisNeuralnet](http://www.twitter.com/LuisNeuralnet)) from [Neuralnet Systems](http://neuralnetsystems.com/) present their take on tips and tricks, the unspoken rules.\n\nNow these guys have the goods! &nbsp;They have 42 applications in the Marketplace and have gone through the paces when it comes to marketing, updates, when to what how, and what NOT to do. For those of you who attended, the [slide deck is available here](http://sdrv.ms/O0OvSU) to refresh your memory as I am sure it was more information then you could retain in the hour long presentation.\nHighlights&nbsp;for me were:\n\n*   How does the PubCenter really works\n\n*   eCPM experiences\n*   Why 10,000 impressions aren't 10,000 impressions*   Aftermath of an applicationThe group was full of questions and even the experienced developers in the crowd walked away with some info they felt was rewarding.As a sponsor of the group Russ (@russcamtv) and ComponentOne dished out ComponentOne Studio for Windows Phone for all in attendance, huge thanks to them!  I look forward to seeing some great apps using these controls.ComponentOne offers great developer controls for Windows Phone, Windows 8, as well as other .NET platform development tools.Next meeting will be hosted at the brand new Microsoft Store in the Florida Mall on August the 17th at 6:30 PM.  This is there official opening week, and we have been asked to be there the day after they open to use their fantastic theater.  Checkout the Meetup page for the store. for details on the location and theatre spec sheet.  I will be sending out more information as soon as we secure the speakers and agenda. And finally, please pickup Joe Healy (@devfish) and Kevin Wolf's (@ByteMaster) book; Sam's Teach Yourself Windows Phone 7 Application Dev in 24 Hours.  Both were in attendance, signing copies and contributing much knowledge about current and future state of Windows Phone and Windows 8 development.  Thanks to both of you!Pictures courtesy of RussCam!Luis and AlexGood crowd, filled with talent.TattooCoderShayne, Alex, Luis and RussShayne and the Guys from Neuralnet","html":"<p><table cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: left; margin-right: 1em; text-align: left;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://4.bp.blogspot.com/-Jy3jhSyRxC8/UAQk7AELoEI/AAAAAAAAAFs/05On55UJ26E/s1600/owpug-logo-new.png\"><img src=\"http://4.bp.blogspot.com/-Jy3jhSyRxC8/UAQk7AELoEI/AAAAAAAAAFs/05On55UJ26E/s200/owpug-logo-new.png\" alt=\"\" title=\"\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\"><a href=\"http://owpug.tattoocoder.com/\">owpug.tattoocoder.com</a></td></tr></tbody></table><a href=\"http://www.blogger.com/\"></a>Wow what a great start to the new group in Orlando!</p>\n\n<p>First, let me start by thanking <a href=\"http://www.blogger.com/http//:www.voxeo.com\">Voxeo </a>&nbsp;(<a href=\"http://twitter.com/voxeo\">@voxeo</a>)&nbsp;for hosting the event. &nbsp;What a great room, theater seating, barista on staff, great office space...very tech! &nbsp;They do offer co-lo office space so hit them up if you are a startup and you need some space. &nbsp;Almost every wall in this place is a whiteboard.</p>\n\n<p><table cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: right; margin-left: 1em; text-align: right;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://4.bp.blogspot.com/-EJasR9ATO54/UAQihpLJVWI/AAAAAAAAAFc/5NjEhIt1vYY/s1600/WP_000092.jpg\"><img src=\"http://4.bp.blogspot.com/-EJasR9ATO54/UAQihpLJVWI/AAAAAAAAAFc/5NjEhIt1vYY/s200/WP_000092.jpg\" alt=\"\" title=\"\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Those chairs were awesome!</td></tr></tbody></table>Attendees&nbsp;included Windows Phone MVPs, authors, <a href=\"http://www.componentone.com/\">ComponentOne</a>, Windows Phone Marketplace champs, newbies and even non Windows Phone <a href=\"http://www.blogger.com/\"></a>devs; exactly what I was looking for when starting this group. A really exciting group to engage in and the conversation and interaction was more than I expected.</p>\n\n<p>As I said at the beginning, it's a very exciting time to be a developer in the Microsoft .NET stack of technology. If you're not, you either doing the wrong thing or you're dead! </p>\n\n<p>With the recent announcements of Windows Phone 8 and Surface, I can't think of a better time to sharpen your skills or pick a new path in your development career.</p>\n\n<p><table cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: left; margin-right: 1em; text-align: left;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://2.bp.blogspot.com/-Y978QJsILww/UAQherApK4I/AAAAAAAAAFU/vxvCVGNnW5U/s1600/WP_000091.jpg\"><img src=\"http://2.bp.blogspot.com/-Y978QJsILww/UAQherApK4I/AAAAAAAAAFU/vxvCVGNnW5U/s200/WP_000091.jpg\" alt=\"\" title=\"\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Luis and Alex telling us the tricks.</td></tr></tbody></table>Next up, we had Alex (<a href=\"http://twitter.com/Aapg1102\">@Aapg1102</a>) and Luis Perez (<a href=\"http://www.twitter.com/LuisNeuralnet\">@LuisNeuralnet</a>) from <a href=\"http://neuralnetsystems.com/\">Neuralnet Systems</a> present their take on tips and tricks, the unspoken rules.</p>\n\n<p>Now these guys have the goods! &nbsp;They have 42 applications in the Marketplace and have gone through the paces when it comes to marketing, updates, when to what how, and what NOT to do. For those of you who attended, the <a href=\"http://sdrv.ms/O0OvSU\">slide deck is available here</a> to refresh your memory as I am sure it was more information then you could retain in the hour long presentation. <br />\nHighlights&nbsp;for me were:</p>\n\n<ul>\n<li><p>How does the PubCenter really works</p></li>\n<li><p>eCPM experiences</p></li>\n<li>Why 10,000 impressions aren't 10,000 impressions*   Aftermath of an applicationThe group was full of questions and even the experienced developers in the crowd walked away with some info they felt was rewarding.As a sponsor of the group Russ (@russcamtv) and ComponentOne dished out ComponentOne Studio for Windows Phone for all in attendance, huge thanks to them!  I look forward to seeing some great apps using these controls.ComponentOne offers great developer controls for Windows Phone, Windows 8, as well as other .NET platform development tools.Next meeting will be hosted at the brand new Microsoft Store in the Florida Mall on August the 17th at 6:30 PM.  This is there official opening week, and we have been asked to be there the day after they open to use their fantastic theater.  Checkout the Meetup page for the store. for details on the location and theatre spec sheet.  I will be sending out more information as soon as we secure the speakers and agenda. And finally, please pickup Joe Healy (@devfish) and Kevin Wolf's (@ByteMaster) book; Sam's Teach Yourself Windows Phone 7 Application Dev in 24 Hours.  Both were in attendance, signing copies and contributing much knowledge about current and future state of Windows Phone and Windows 8 development.  Thanks to both of you!Pictures courtesy of RussCam!Luis and AlexGood crowd, filled with talent.TattooCoderShayne, Alex, Luis and RussShayne and the Guys from Neuralnet</li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1342449900001,"created_by":1,"updated_at":1342467431103,"updated_by":1,"published_at":1342449900001,"published_by":1},{"id":41,"uuid":"7a323035-8ea9-4dda-9578-d956522723ed","title":"My Response to CNET: Is AT&T's sales force prepared to sell the Nokia Lumia 900?","slug":"my_response_to_cnet_is_at_t_s_sales_force_prepared_to_sell_the_nokia_lumia_900_","markdown":"Mary Jo Foley (@maryjofoley) tweeted that this article was depressing and I felt compelled to write an opinion. \n\nNow, let me first state that I am not a journalist or a professional blogger, yet a passionate developer who lives Windows Phone and has been an iPhone user for the last 3 or so years.\n\nOne thing that we all must remember when answering the posted question above, is that we are talking about people, with opinions and passions and habits. &nbsp;These things are hard to break.\n\nThere are a great deal of AT&amp;T employees that have been carrying around an iPhone for the better part of five years living most of their lives looking into that screen as if every bit of information and experience they could ever find would only come through the 3.5 inch display. &nbsp;Not to mention there are plenty of non AT&amp;T employees that walk around the same way.\n\nRemember the approach that Apple took when they premiered the iPhone? &nbsp;They told the free world it was Amazing! The focused on the users first, showing them how awesome it was, how it connected to iTunes and they could put their music on it so on and so forth. &nbsp;Me as a developer, I had no idea I could right apps for this thing and I stay pretty dang connected on whats new out there regardless of the OS or vendor. &nbsp;Found that out later.\n\nMicrosoft's approach, in my opinion is from the other side. Make the developers love Windows Phone, and we do. Show us how quick and easy it is to create apps for it and how awesome Visual Studio and Blend is for creating these applications, and it is. &nbsp;Let the developers do the talking, until recently the Nokia Lumia 900, Nokia/AT&amp;T/Microsoft marketing campaign to get this beautiful device out there into the everyday persons' hands.\n\nOf course, what is the first thing most analyst say &nbsp;\"It's a great OS / device...but there are no apps\". &nbsp;Well Android had the same issue and it seems to be doing just fine now. &nbsp;I would like to see some group do a true analysis on the \"quality\" (I know, it's subjective) apps out there for each of the platforms taking these few points into consideration:\n\n*   # of applications actually installed on devices\n*   Fart apps don't count\n*   # of trial apps installed on devices - users never thoughts it was good enough to pay for the full oneI'm sure there are other things that would narrow down the list of apps, and sure iTunes would probably still be ahead no doubt.  However, it would give us a better measure of the playing field.Sorry if I got off here...but I have shown my Lumia 900 to many iPhone users and Android users. Their first comment 8 of 10 times is \"Damn that's fast!\".So, what we as developers, Windows Phone lovers, Microsoft and Nokia must do is now focus on the people who use their smartphones everyday.  Tell them WHY they will love, not necessarily why its better than the iPhone or what apps they can install to replace the ones they had so they can get close the same one. But again make them see why it so great.","html":"<p>Mary Jo Foley (@maryjofoley) tweeted that this article was depressing and I felt compelled to write an opinion. </p>\n\n<p>Now, let me first state that I am not a journalist or a professional blogger, yet a passionate developer who lives Windows Phone and has been an iPhone user for the last 3 or so years.</p>\n\n<p>One thing that we all must remember when answering the posted question above, is that we are talking about people, with opinions and passions and habits. &nbsp;These things are hard to break.</p>\n\n<p>There are a great deal of AT&amp;T employees that have been carrying around an iPhone for the better part of five years living most of their lives looking into that screen as if every bit of information and experience they could ever find would only come through the 3.5 inch display. &nbsp;Not to mention there are plenty of non AT&amp;T employees that walk around the same way.</p>\n\n<p>Remember the approach that Apple took when they premiered the iPhone? &nbsp;They told the free world it was Amazing! The focused on the users first, showing them how awesome it was, how it connected to iTunes and they could put their music on it so on and so forth. &nbsp;Me as a developer, I had no idea I could right apps for this thing and I stay pretty dang connected on whats new out there regardless of the OS or vendor. &nbsp;Found that out later.</p>\n\n<p>Microsoft's approach, in my opinion is from the other side. Make the developers love Windows Phone, and we do. Show us how quick and easy it is to create apps for it and how awesome Visual Studio and Blend is for creating these applications, and it is. &nbsp;Let the developers do the talking, until recently the Nokia Lumia 900, Nokia/AT&amp;T/Microsoft marketing campaign to get this beautiful device out there into the everyday persons' hands.</p>\n\n<p>Of course, what is the first thing most analyst say &nbsp;\"It's a great OS / device...but there are no apps\". &nbsp;Well Android had the same issue and it seems to be doing just fine now. &nbsp;I would like to see some group do a true analysis on the \"quality\" (I know, it's subjective) apps out there for each of the platforms taking these few points into consideration:</p>\n\n<ul>\n<li># of applications actually installed on devices</li>\n<li>Fart apps don't count</li>\n<li># of trial apps installed on devices - users never thoughts it was good enough to pay for the full oneI'm sure there are other things that would narrow down the list of apps, and sure iTunes would probably still be ahead no doubt.  However, it would give us a better measure of the playing field.Sorry if I got off here...but I have shown my Lumia 900 to many iPhone users and Android users. Their first comment 8 of 10 times is \"Damn that's fast!\".So, what we as developers, Windows Phone lovers, Microsoft and Nokia must do is now focus on the people who use their smartphones everyday.  Tell them WHY they will love, not necessarily why its better than the iPhone or what apps they can install to replace the ones they had so they can get close the same one. But again make them see why it so great.</li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1334252400000,"created_by":1,"updated_at":1334252404060,"updated_by":1,"published_at":1334252400000,"published_by":1},{"id":42,"uuid":"3bc59b79-91d6-43b1-b903-09e05c6d0fa8","title":"48 hrs with My Lumia 900 Windows Phone","slug":"48_hrs_with_my_lumia_900_windows_phone","markdown":"So its been 2 full days with the Windows Phone, jumping out of the iOS world using the Nokia Lumia 900 as my everyday device. &nbsp;I have to say I'm still swimming in the pool doing the backstroke. &nbsp;I love it!\n\nBattery life is great and I use the hell out of my phone. Email , Twitter, News, Checking In, Photos and browsing constantly while running around with the family doing our very filled life things.\n\nCouple of observations I wanted to point out. &nbsp;I had the strangest thing happen to me while walking around the store...it locked up. Now, before anyone starts with \"Well guess your new fancy phone isn't so fancy (as my daughter would say)\". &nbsp;My dang iPhone would lock up constantly, as would my Android and Blackberry etc etc. &nbsp;So it's not uncommon. &nbsp;The issue was I had no freaking idea how to unlock it.\n\nI was holding down the power button and getting the normal \"slide down to power off\" screen, but the screen wouldn't respond. &nbsp;Camera worked though?? &nbsp;And the battery symbol had a \"?\" on it. I was lost and thought crap\" Now what.\n\nSolution: Hold down the power button for about 15 seconds, hard reboot all is well.\n\nNow since I practically live on my phone after a few days I wanted to see what I really missed as far as apps and other functionality I used constantly. &nbsp;Here is a list so far:\n\n**<u>Apps</u>**\n**<u>\n</u>**\n\n**Flipboard - (@flipboard) [http://flipboard.com](http://flipboard.com/)**\n\nIf you haven't used this application on your iPad or iPhone your missing the best news, social&nbsp;aggregation&nbsp;application out there. &nbsp;Funny thing is when I first saw it, I thought, \"Man this looks like a Windows Phone App!\". When I installed it, i uninstalled about 6 other applications.Banking ApplicationsI know they are coming, but I use SunTrust and Chase and the Chase application on iOS is great.  Depositing checks via pic upload is fantastic.  Now I tweeted over the weekend about Suntrust and today got a reply from them unprovoked.  I do just simply browse to their sites, but there are some baked n OS functionality i do miss.FunctionalityScreenshotUnless I've missed it, but I did search online and found nothing.  In iOS use can press the \"home\" button and the \"power\" button at the same time to capture the current screen regardless of what your doing on the device and it snags the screen an puts it in your pictures.This is great when watching screencasts, doing research on apps, so on and so forth.Other than that, so far, I don't miss it.  And looking at the iPhones in my house, there are a bunch both 3GS and 4s, they look so tiny and dated compared to the Windows Phone. Till next time...","html":"<p>So its been 2 full days with the Windows Phone, jumping out of the iOS world using the Nokia Lumia 900 as my everyday device. &nbsp;I have to say I'm still swimming in the pool doing the backstroke. &nbsp;I love it!</p>\n\n<p>Battery life is great and I use the hell out of my phone. Email , Twitter, News, Checking In, Photos and browsing constantly while running around with the family doing our very filled life things.</p>\n\n<p>Couple of observations I wanted to point out. &nbsp;I had the strangest thing happen to me while walking around the store...it locked up. Now, before anyone starts with \"Well guess your new fancy phone isn't so fancy (as my daughter would say)\". &nbsp;My dang iPhone would lock up constantly, as would my Android and Blackberry etc etc. &nbsp;So it's not uncommon. &nbsp;The issue was I had no freaking idea how to unlock it.</p>\n\n<p>I was holding down the power button and getting the normal \"slide down to power off\" screen, but the screen wouldn't respond. &nbsp;Camera worked though?? &nbsp;And the battery symbol had a \"?\" on it. I was lost and thought crap\" Now what.</p>\n\n<p>Solution: Hold down the power button for about 15 seconds, hard reboot all is well.</p>\n\n<p>Now since I practically live on my phone after a few days I wanted to see what I really missed as far as apps and other functionality I used constantly. &nbsp;Here is a list so far:</p>\n\n<p><strong><u>Apps</u></strong>\n<strong><u>\n</u></strong></p>\n\n<p><strong>Flipboard - (@flipboard) <a href=\"http://flipboard.com/\">http://flipboard.com</a></strong></p>\n\n<p>If you haven't used this application on your iPad or iPhone your missing the best news, social&nbsp;aggregation&nbsp;application out there. &nbsp;Funny thing is when I first saw it, I thought, \"Man this looks like a Windows Phone App!\". When I installed it, i uninstalled about 6 other applications.Banking ApplicationsI know they are coming, but I use SunTrust and Chase and the Chase application on iOS is great.  Depositing checks via pic upload is fantastic.  Now I tweeted over the weekend about Suntrust and today got a reply from them unprovoked.  I do just simply browse to their sites, but there are some baked n OS functionality i do miss.FunctionalityScreenshotUnless I've missed it, but I did search online and found nothing.  In iOS use can press the \"home\" button and the \"power\" button at the same time to capture the current screen regardless of what your doing on the device and it snags the screen an puts it in your pictures.This is great when watching screencasts, doing research on apps, so on and so forth.Other than that, so far, I don't miss it.  And looking at the iPhones in my house, there are a bunch both 3GS and 4s, they look so tiny and dated compared to the Windows Phone. Till next time...</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1333980480000,"created_by":1,"updated_at":1333980497190,"updated_by":1,"published_at":1333980480000,"published_by":1},{"id":43,"uuid":"952bc5f1-3aa8-4db8-ae2a-36f06e0fbf4e","title":"My Nokia Lumia 900 Has Arrived - It Killed My iPhone!","slug":"my_nokia_lumia_900_has_arrived_it_killed_my_i_phone_","markdown":"<table cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: left; margin-right: 1em; text-align: left;\"><tbody><tr><td style=\"text-align: center;\">[![](http://2.bp.blogspot.com/-tqE8VSJQiWs/T3-T5Bhc3KI/AAAAAAAAAD8/ynqmWp4PMHU/s200/Nokia900.png)](http://2.bp.blogspot.com/-tqE8VSJQiWs/T3-T5Bhc3KI/AAAAAAAAAD8/ynqmWp4PMHU/s1600/Nokia900.png)</td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Nokia Lumia 900</td></tr></tbody></table>The newest Windows Phone 7 device has arrived and I have to say I can't put it down!\n\nNo seriously I can't! First, because ever since I told my 4 yr old that \"...on Daddy's new phone you can play XBOX Live\" (he almost exploded) he has been as anxious as I have to get it in. Secondly,it just plain beautiful.  The OS, weight, size and speed of it all, what a home run.\n\nNow, let me first say that I'm not going to post step by step pictures of the unboxing as there have been and will be more shots of this gem online and although a few more pictures won't degrade the quality of what I hold in my hand, I don't think you need to see what my coffee table or desk looks like.\n\n<table cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: left; margin-right: 1em; text-align: left;\"><tbody><tr><td style=\"text-align: center;\">[![](http://2.bp.blogspot.com/-w9Yn_kJooOs/T3-T1zfzckI/AAAAAAAAAD0/FKGp3sT95-U/s200/iPhoneBusted.png)](http://2.bp.blogspot.com/-w9Yn_kJooOs/T3-T1zfzckI/AAAAAAAAAD0/FKGp3sT95-U/s1600/iPhoneBusted.png)</td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">iPhone 4 - Lost the battle!</td></tr></tbody></table>I have been an avid user of the iPhone since the release of the 3GS and then moved to the 4\\.  Before that I have owned an Android G1, Windows Motorola Blackjack and of course a Blackberry.  I feel that I have experienced about every mobile OS up until this point and have developed applications, or at least learned the tools to do so.\n\nSo for the last many years, as have many others agreed that Apple hit the home run with the smartphone market.  I was in the pool with all the other swimmers head first.  Then came Windows Phone, and I thought, again as others had, \"here we go again, haven't they tried this before\"?    When CES came around and the Nokia Lumia 900 showed up, I said whoa! I want that.  My wife said what?  You said yourself that no one would beat Apple...\n\nI had occasionally stopped by a mobile store and futz around with a Windows 7 Phone here and there and thought it was different for sure but it was newly releases and the hardware and some of the software features were lacking in comparison to the iPhone 4 that I had in my pocket. Then of course there is the lack of app conversations...but that is another topic (I have all I need to be productive).\n\nWhen the 900 was shown and I spent more and more time developing in the tool set for Windows Phone, I was hooked for sure. Now that I have it in my hand, WOW. \n\nThe boot time is unreal! I had to reboot my iPhone4 and the Lumia 900 to try and activate and I could have rebooted the Nokia 5x before the iPhone started.\n\nSo, the first order of business was to get this puppy dialed in.\n\n*   Wifi\n*   Windows Live Account\n*   Twitter\n\n*   Seesmic - uninstalled for [Rowi](http://www.windowsphone.com/en-US/apps/304c9bfd-9b65-e011-81d2-78e7d1fa76f8)\n*   [Rowi ](http://www.windowsphone.com/en-US/apps/304c9bfd-9b65-e011-81d2-78e7d1fa76f8)- best Twitter client for WP7\\. Pay the $.99 the developer deserves it!*   [4th &amp; Mayor](http://www.windowsphone.com/en-US/apps/c7d13b8d-9951-e011-854c-00237de2db9e) - Foursquare should just hire Jeff Wilcox to redo their app or pay him to re-brand his.\n*   Mail Accounts\n\n*   Exchange\n*   GMail*   Facebook\n*   LinkedIn\n*   [Netflix](http://www.windowsphone.com/en-US/apps/c3a509cd-61d6-df11-a844-00237de2db9e)\n*   [SkyDrive](http://www.windowsphone.com/en-US/apps/ad543082-80ec-45bb-aa02-ffe7f4182ba8)\n*   [My Rubber Duck](http://www.windowsphone.com/en-US/apps/4ad4f1c2-b7db-df11-a844-00237de2db9e) - cause I gave him a shout out in my last entry and it's just funny.\n*   Setup the Family group and pinned the tile tooTotal setup time including installation of apps and dinking around with being picky on what tile is where and what is or isn't pinned? 1.5 hrs  (oh and I ate dinner with the family during that time too without the phone in my hand). So call it 1 hr.I must mention that the download and installation of apps is super fast! I am on Brighthouse Lightning over Wifi.Oh, forgot to mention that I got the Black one, going to try out some of the cases that are out to see if I'll dress it or go naked.[Tweet](https://twitter.com/share)<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=\"//platform.twitter.com/widgets.js\";fjs.parentNode.insertBefore(js,fjs);}}(document,\"script\",\"twitter-wjs\");</script>","html":"<p><table cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: left; margin-right: 1em; text-align: left;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://2.bp.blogspot.com/-tqE8VSJQiWs/T3-T5Bhc3KI/AAAAAAAAAD8/ynqmWp4PMHU/s1600/Nokia900.png\"><img src=\"http://2.bp.blogspot.com/-tqE8VSJQiWs/T3-T5Bhc3KI/AAAAAAAAAD8/ynqmWp4PMHU/s200/Nokia900.png\" alt=\"\" title=\"\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Nokia Lumia 900</td></tr></tbody></table>The newest Windows Phone 7 device has arrived and I have to say I can't put it down!</p>\n\n<p>No seriously I can't! First, because ever since I told my 4 yr old that \"...on Daddy's new phone you can play XBOX Live\" (he almost exploded) he has been as anxious as I have to get it in. Secondly,it just plain beautiful.  The OS, weight, size and speed of it all, what a home run.</p>\n\n<p>Now, let me first say that I'm not going to post step by step pictures of the unboxing as there have been and will be more shots of this gem online and although a few more pictures won't degrade the quality of what I hold in my hand, I don't think you need to see what my coffee table or desk looks like.</p>\n\n<p><table cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: left; margin-right: 1em; text-align: left;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://2.bp.blogspot.com/-w9Yn_kJooOs/T3-T1zfzckI/AAAAAAAAAD0/FKGp3sT95-U/s1600/iPhoneBusted.png\"><img src=\"http://2.bp.blogspot.com/-w9Yn_kJooOs/T3-T1zfzckI/AAAAAAAAAD0/FKGp3sT95-U/s200/iPhoneBusted.png\" alt=\"\" title=\"\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">iPhone 4 - Lost the battle!</td></tr></tbody></table>I have been an avid user of the iPhone since the release of the 3GS and then moved to the 4.  Before that I have owned an Android G1, Windows Motorola Blackjack and of course a Blackberry.  I feel that I have experienced about every mobile OS up until this point and have developed applications, or at least learned the tools to do so.</p>\n\n<p>So for the last many years, as have many others agreed that Apple hit the home run with the smartphone market.  I was in the pool with all the other swimmers head first.  Then came Windows Phone, and I thought, again as others had, \"here we go again, haven't they tried this before\"?    When CES came around and the Nokia Lumia 900 showed up, I said whoa! I want that.  My wife said what?  You said yourself that no one would beat Apple...</p>\n\n<p>I had occasionally stopped by a mobile store and futz around with a Windows 7 Phone here and there and thought it was different for sure but it was newly releases and the hardware and some of the software features were lacking in comparison to the iPhone 4 that I had in my pocket. Then of course there is the lack of app conversations...but that is another topic (I have all I need to be productive).</p>\n\n<p>When the 900 was shown and I spent more and more time developing in the tool set for Windows Phone, I was hooked for sure. Now that I have it in my hand, WOW. </p>\n\n<p>The boot time is unreal! I had to reboot my iPhone4 and the Lumia 900 to try and activate and I could have rebooted the Nokia 5x before the iPhone started.</p>\n\n<p>So, the first order of business was to get this puppy dialed in.</p>\n\n<ul>\n<li>Wifi</li>\n<li>Windows Live Account</li>\n<li><p>Twitter</p></li>\n<li><p>Seesmic - uninstalled for <a href=\"http://www.windowsphone.com/en-US/apps/304c9bfd-9b65-e011-81d2-78e7d1fa76f8\">Rowi</a></p></li>\n<li><a href=\"http://www.windowsphone.com/en-US/apps/304c9bfd-9b65-e011-81d2-78e7d1fa76f8\">Rowi </a>- best Twitter client for WP7. Pay the $.99 the developer deserves it!*   <a href=\"http://www.windowsphone.com/en-US/apps/c7d13b8d-9951-e011-854c-00237de2db9e\">4th &amp; Mayor</a> - Foursquare should just hire Jeff Wilcox to redo their app or pay him to re-brand his.</li>\n<li><p>Mail Accounts</p></li>\n<li><p>Exchange</p></li>\n<li>GMail*   Facebook</li>\n<li>LinkedIn</li>\n<li><a href=\"http://www.windowsphone.com/en-US/apps/c3a509cd-61d6-df11-a844-00237de2db9e\">Netflix</a></li>\n<li><a href=\"http://www.windowsphone.com/en-US/apps/ad543082-80ec-45bb-aa02-ffe7f4182ba8\">SkyDrive</a></li>\n<li><a href=\"http://www.windowsphone.com/en-US/apps/4ad4f1c2-b7db-df11-a844-00237de2db9e\">My Rubber Duck</a> - cause I gave him a shout out in my last entry and it's just funny.</li>\n<li>Setup the Family group and pinned the tile tooTotal setup time including installation of apps and dinking around with being picky on what tile is where and what is or isn't pinned? 1.5 hrs  (oh and I ate dinner with the family during that time too without the phone in my hand). So call it 1 hr.I must mention that the download and installation of apps is super fast! I am on Brighthouse Lightning over Wifi.Oh, forgot to mention that I got the Black one, going to try out some of the cases that are out to see if I'll dress it or go naked.<a href=\"https://twitter.com/share\">Tweet</a><script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=\"//platform.twitter.com/widgets.js\";fjs.parentNode.insertBefore(js,fjs);}}(document,\"script\",\"twitter-wjs\");</script></li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1333761240000,"created_by":1,"updated_at":1333761425222,"updated_by":1,"published_at":1333761240000,"published_by":1},{"id":44,"uuid":"2fc288c6-fad5-442d-96c2-e5707258d2d9","title":"Where's Your Rubber Ducky App?","slug":"where_s_your_rubber_ducky_app_","markdown":"I recently attended [Orlando Code Camp](http://orlandocodecamp.com/) for the second straight year and I must say that it really topped last year and I cannot wait to see what's in store for next. &nbsp;That's not the point of this post, but a number of sessions I attended there did put some thought in my noggin I thought I'd share.\n\n<table cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: right; margin-left: 1em; text-align: right;\"><tbody><tr><td style=\"text-align: center;\">[![](http://catalog.zune.net/v3.2/en-US/apps/300253c8-94d0-4d89-b1fe-c0f8ac4250cf/primaryImage?width=240&amp;height=240&amp;resize=true)](http://catalog.zune.net/v3.2/en-US/apps/300253c8-94d0-4d89-b1fe-c0f8ac4250cf/primaryImage?width=240&amp;height=240&amp;resize=true)</td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">[Champions League Tracker](http://www.windowsphone.com/en-US/apps/300253c8-94d0-4d89-b1fe-c0f8ac4250cf)</td></tr></tbody></table>A new track this year was Windows Phone 7 and one of the talks that really stuck with me was [Jonas Stawski's](http://www.jstawski.com/)&nbsp;\"An Inside Look into a Successful Windows Phone App\" where he opened up a good portion of his code of his \"[Champions League Tracker](http://www.windowsphone.com/en-US/apps/300253c8-94d0-4d89-b1fe-c0f8ac4250cf)\" application and gave fast and pretty thorough walk through of not only the patterns ([MVVM Light](http://www.galasoft.ch/mvvm/)) and coding decisions he made, but also the short cuts he made in the early stages in order to well; just get it out there. &nbsp;Now he mentioned that there were also some legal issues he muscled through but nonetheless got the app in the marketplace and its doing pretty well. \n\nAfter some success and feedback, he went back made some changes and submitted updates and has other apps there as well.\n\nThe most interesting statement he made during the talk was the answer to this question (paraphrasing)\n\n_\"How many games do you think the creators of Angry Birds wrote before they hit that one?_\n_\n_\n**53!**\n**\n**\n<table cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: left; margin-right: 1em; text-align: left;\"><tbody><tr><td style=\"text-align: center;\">[![](http://catalog.zune.net/v3.2/en-US/apps/4ad4f1c2-b7db-df11-a844-00237de2db9e/primaryImage?width=240&amp;height=240&amp;resize=true)](http://catalog.zune.net/v3.2/en-US/apps/4ad4f1c2-b7db-df11-a844-00237de2db9e/primaryImage?width=240&amp;height=240&amp;resize=true)</td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">[My Rubber Duck](http://www.windowsphone.com/en-US/apps/4ad4f1c2-b7db-df11-a844-00237de2db9e)</td></tr></tbody></table>So that reminded me of a conversation I had with someone at the Tampa WP User Group when he showed me the \"[My Rubber Duck](http://www.windowsphone.com/en-US/apps/4ad4f1c2-b7db-df11-a844-00237de2db9e)\". He said to me now this app just works! &nbsp;Yes its simple, but do you have an app in the marketplace, he asks?\n\nThe point to this is don't try and write Angry Birds on your first application, find your rubber ducky app. &nbsp;Take that to learn the tool set if you don't know it already, the submission and review process. And of course how kind the the reviews can be \"wink\".  \n\n [Tweet](https://twitter.com/share)<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=\"//platform.twitter.com/widgets.js\";fjs.parentNode.insertBefore(js,fjs);}}(document,\"script\",\"twitter-wjs\");</script>","html":"<p>I recently attended <a href=\"http://orlandocodecamp.com/\">Orlando Code Camp</a> for the second straight year and I must say that it really topped last year and I cannot wait to see what's in store for next. &nbsp;That's not the point of this post, but a number of sessions I attended there did put some thought in my noggin I thought I'd share.</p>\n\n<p><table cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: right; margin-left: 1em; text-align: right;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://catalog.zune.net/v3.2/en-US/apps/300253c8-94d0-4d89-b1fe-c0f8ac4250cf/primaryImage?width=240&amp;height=240&amp;resize=true\"><img src=\"http://catalog.zune.net/v3.2/en-US/apps/300253c8-94d0-4d89-b1fe-c0f8ac4250cf/primaryImage?width=240&amp;height=240&amp;resize=true\" alt=\"\" title=\"\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\"><a href=\"http://www.windowsphone.com/en-US/apps/300253c8-94d0-4d89-b1fe-c0f8ac4250cf\">Champions League Tracker</a></td></tr></tbody></table>A new track this year was Windows Phone 7 and one of the talks that really stuck with me was <a href=\"http://www.jstawski.com/\">Jonas Stawski's</a>&nbsp;\"An Inside Look into a Successful Windows Phone App\" where he opened up a good portion of his code of his \"<a href=\"http://www.windowsphone.com/en-US/apps/300253c8-94d0-4d89-b1fe-c0f8ac4250cf\">Champions League Tracker</a>\" application and gave fast and pretty thorough walk through of not only the patterns (<a href=\"http://www.galasoft.ch/mvvm/\">MVVM Light</a>) and coding decisions he made, but also the short cuts he made in the early stages in order to well; just get it out there. &nbsp;Now he mentioned that there were also some legal issues he muscled through but nonetheless got the app in the marketplace and its doing pretty well. </p>\n\n<p>After some success and feedback, he went back made some changes and submitted updates and has other apps there as well.</p>\n\n<p>The most interesting statement he made during the talk was the answer to this question (paraphrasing)</p>\n\n<p><em>\"How many games do you think the creators of Angry Birds wrote before they hit that one?</em> <br />\n_ <br />\n_ <br />\n<strong>53!</strong>\n<em>*\n*</em>\n<table cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: left; margin-right: 1em; text-align: left;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://catalog.zune.net/v3.2/en-US/apps/4ad4f1c2-b7db-df11-a844-00237de2db9e/primaryImage?width=240&amp;height=240&amp;resize=true\"><img src=\"http://catalog.zune.net/v3.2/en-US/apps/4ad4f1c2-b7db-df11-a844-00237de2db9e/primaryImage?width=240&amp;height=240&amp;resize=true\" alt=\"\" title=\"\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\"><a href=\"http://www.windowsphone.com/en-US/apps/4ad4f1c2-b7db-df11-a844-00237de2db9e\">My Rubber Duck</a></td></tr></tbody></table>So that reminded me of a conversation I had with someone at the Tampa WP User Group when he showed me the \"<a href=\"http://www.windowsphone.com/en-US/apps/4ad4f1c2-b7db-df11-a844-00237de2db9e\">My Rubber Duck</a>\". He said to me now this app just works! &nbsp;Yes its simple, but do you have an app in the marketplace, he asks?</p>\n\n<p>The point to this is don't try and write Angry Birds on your first application, find your rubber ducky app. &nbsp;Take that to learn the tool set if you don't know it already, the submission and review process. And of course how kind the the reviews can be \"wink\".  </p>\n\n<p><a href=\"https://twitter.com/share\">Tweet</a><script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=\"//platform.twitter.com/widgets.js\";fjs.parentNode.insertBefore(js,fjs);}}(document,\"script\",\"twitter-wjs\");</script></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1333482420001,"created_by":1,"updated_at":1333482708885,"updated_by":1,"published_at":1333482420001,"published_by":1},{"id":45,"uuid":"7caf2bda-dc5a-4a6b-bbf1-e34a65634ac4","title":"Me","slug":"me","markdown":"<img style=\"float:right; padding:10px\" src=\"/content/images/2016/02/ProfilePic.jpeg\" >My name is Shayne Boyer. I am not what you think of when it comes to a software developer.  Although I have the a pretty typical story of how I got into the software development profession; when I tell people what I do for a living I think they are pretty surprised.\n\nI started at the age of around 10 when my Dad bought that tan colored mammoth of a machined called the Commodore 64.  My tools of the trade where hours of reading code to him out of the back of Compute Magazine with a ruler going blind in the process.  Ugh! It really was a long night if something was mis-typed...  But I tell you I can read code like no ones business and I got to the point where I could see what was coming next and so on.\n\nWell, he decided to upgrade to the fancy Commodore 128 and I got the 64 to dink around with, well since I had so much experience reading the code to him, I decided I would give it a hack and wrote my first text based role playing game at 11.  It was fun for me to play and so started the journey.\n\nBASIC was fun but after Nintendo came out, I really didn't touch a PC until college.\n\nThen AOL came along and I started to read code again in the form of HTML, cranked out some web sites for a cruise company, which then lead to VB 4 and classic ASP.  I remember getting a book from Barnes & Noble on ASP and reading it cover to cover over a Thanksgiving weekend with completing all of the exercises. Thought it was really cool.\n\nFor the past 15 years I have been developing with Microsoft based technology, mix in a little Oracle & Android.  But, .NET is the world I live in.  \n\nI now work as a Sr. Solutions Architect for a major entertainment company in Orlando, have a beautiful wife and family who support me in everything I do (and think most of it is pretty cool), founded the Orlando Windows Phone & Metro Windows 8 User Group, Telerik Developer Expert, Community Speaker, love to teach other developers, and don't mind getting stuck with needle dipped in ink now and then.\n\n**Development Languages / Frameworks / Platforms**\n\nASP.NET\nNode.js\nJavaScript\nTypeScript\nMicrosoft Azure\nAngular\nMobile Development\n\n","html":"<p><img style=\"float:right; padding:10px\" src=\"/content/images/2016/02/ProfilePic.jpeg\" >My name is Shayne Boyer. I am not what you think of when it comes to a software developer.  Although I have the a pretty typical story of how I got into the software development profession; when I tell people what I do for a living I think they are pretty surprised.</p>\n\n<p>I started at the age of around 10 when my Dad bought that tan colored mammoth of a machined called the Commodore 64.  My tools of the trade where hours of reading code to him out of the back of Compute Magazine with a ruler going blind in the process.  Ugh! It really was a long night if something was mis-typed...  But I tell you I can read code like no ones business and I got to the point where I could see what was coming next and so on.</p>\n\n<p>Well, he decided to upgrade to the fancy Commodore 128 and I got the 64 to dink around with, well since I had so much experience reading the code to him, I decided I would give it a hack and wrote my first text based role playing game at 11.  It was fun for me to play and so started the journey.</p>\n\n<p>BASIC was fun but after Nintendo came out, I really didn't touch a PC until college.</p>\n\n<p>Then AOL came along and I started to read code again in the form of HTML, cranked out some web sites for a cruise company, which then lead to VB 4 and classic ASP.  I remember getting a book from Barnes &amp; Noble on ASP and reading it cover to cover over a Thanksgiving weekend with completing all of the exercises. Thought it was really cool.</p>\n\n<p>For the past 15 years I have been developing with Microsoft based technology, mix in a little Oracle &amp; Android.  But, .NET is the world I live in.  </p>\n\n<p>I now work as a Sr. Solutions Architect for a major entertainment company in Orlando, have a beautiful wife and family who support me in everything I do (and think most of it is pretty cool), founded the Orlando Windows Phone &amp; Metro Windows 8 User Group, Telerik Developer Expert, Community Speaker, love to teach other developers, and don't mind getting stuck with needle dipped in ink now and then.</p>\n\n<p><strong>Development Languages / Frameworks / Platforms</strong></p>\n\n<p>ASP.NET <br />\nNode.js <br />\nJavaScript <br />\nTypeScript <br />\nMicrosoft Azure <br />\nAngular <br />\nMobile Development</p>","image":"/content/images/2016/04/blogheader-2.jpg","featured":0,"page":1,"status":"published","language":"en_US","meta_title":null,"meta_description":"Hi, I'm Shayne Boyer,  I write this site, am a Microsoft MVP and Telerik Developer Expert who speaks at national and community events while helping teams architect web and cloud applications","author_id":1,"created_at":1417795447957,"created_by":1,"updated_at":1463236175678,"updated_by":1,"published_at":1417795447957,"published_by":1},{"id":46,"uuid":"6b703aeb-ed97-46fb-ace1-c5e28f7dae49","title":"Projects","slug":"projects","markdown":"##GitHub: [@spboyer](https://github.com/spboyer)\n\n###### **[cleanshave](https://github.com/spboyer/cleanshave)**\nASP.NET Core and Angular 2 Site Template\nhttps://github.com/spboyer/cleanshave\n\n###### **[ng2-kestrel-appserver](https://github.com/spboyer/ng2-kestrel-appserver)**\nStatic Web Server for Angular 2 applications. \nRelated Post: http://tattoocoder.com/kestrel-as-a-static-server-for-angular/\n\n##Omnisharp: [Omnisharp.net]()\n###### **[generator-aspnet](https://github.com/OmniSharp/generator-aspnet)**\nYeoman generator for creating ASP.NET Core projects.\nhttp://github.com/omnisharp/generator-aspnet\n`npm install -g yo generator-aspnet`\n\n","html":"<h2 id=\"githubspboyerhttpsgithubcomspboyer\">GitHub: <a href=\"https://github.com/spboyer\">@spboyer</a></h2>\n\n<h6 id=\"cleanshavehttpsgithubcomspboyercleanshave\"><strong><a href=\"https://github.com/spboyer/cleanshave\">cleanshave</a></strong></h6>\n\n<p>ASP.NET Core and Angular 2 Site Template <br />\n<a href=\"https://github.com/spboyer/cleanshave\">https://github.com/spboyer/cleanshave</a></p>\n\n<h6 id=\"ng2kestrelappserverhttpsgithubcomspboyerng2kestrelappserver\"><strong><a href=\"https://github.com/spboyer/ng2-kestrel-appserver\">ng2-kestrel-appserver</a></strong></h6>\n\n<p>Static Web Server for Angular 2 applications. <br />\nRelated Post: <a href=\"http://tattoocoder.com/kestrel-as-a-static-server-for-angular/\">http://tattoocoder.com/kestrel-as-a-static-server-for-angular/</a></p>\n\n<h2 id=\"omnisharpomnisharpnet\">Omnisharp: <a href=\"\">Omnisharp.net</a></h2>\n\n<h6 id=\"generatoraspnethttpsgithubcomomnisharpgeneratoraspnet\"><strong><a href=\"https://github.com/OmniSharp/generator-aspnet\">generator-aspnet</a></strong></h6>\n\n<p>Yeoman generator for creating ASP.NET Core projects. <br />\n<a href=\"http://github.com/omnisharp/generator-aspnet\">http://github.com/omnisharp/generator-aspnet</a> <br />\n<code>npm install -g yo generator-aspnet</code></p>","image":"/content/images/2016/05/projects.png","featured":0,"page":1,"status":"published","language":"en_US","meta_title":null,"meta_description":"Projects, demos, and works that I am involved in currently that cover ASP.NET, Angular 2, Docker and node.js","author_id":1,"created_at":1417802605365,"created_by":1,"updated_at":1463602930846,"updated_by":1,"published_at":1417802605380,"published_by":1},{"id":47,"uuid":"cd0adc15-8de9-46c8-824d-d3e72ad45821","title":"ASP.NET vNext Project Creation using Yeoman","slug":"asp-net-vnext-project-creation-using-yeoman","markdown":"Developing ASP.NET 5 applications using Visual Studio 2015 gives you a rich IDE experience, however now with ASP.NET now being cross platform that development IDE is not afforded to us on a Mac. \n\nCheckout this post [Develop ASP.NET vNext Applications on a Mac](http://blogs.msdn.com/b/webdev/archive/2014/08/12/develop-asp-net-vnext-applications-on-a-mac.aspx) for getting started.\n\nUsing the Yeoman generator **generator-aspnet** you will have the option to create one of the following application types:\n\n```\n$ yo aspnet\n```\n\n* Web Application\n* MVC Application\n* Nancy Fx Application\n* Console Application\n* Class Library (recently added)\n\nAfter your project is created you can get started in Sublime Text, vim, Brackets etc.  Checkout [OmniSharp.net](http://omnisharp.net) for the supported development enviroments and tooling support information there.\n\nAlthough the generator gets you started with the selected project type, adding additional item types can be less than ideal; depending on the environment.\n\nLuckily Yeoman gives us the subgenerators.  I put together **generator-aspnet-item** which you can get from npm.\n\n```\n$ npm install -g generator-aspnet-item\n```\n\nThis generator allows you to create the additional ASP.NET 5 (vNext) project item types you would typically see from the Add > New Item dialog in Visual Studio.\n\n![Visual Studio Add New Item](/content/images/2014/12/Screen-Shot-2014-12-06-at-10-21-39-AM.png)\n\nI can now add a new MvcController in my working folder by doing the following:\n\n```\n$ yo aspnet-item:MvcController NewPageController\nYou called the aspnet subgenerator with the arg NewPageController\nNewPageController.cs created.\n   create NewPageController.cs\n```\n\n\nThere are other options you can see by looking at the Github repo [spboyer/generator-aspnet-item](http://github.com/spboyer/generator-aspnet-item).\n\nI will be merging this functionality with the **generator-aspnet** yeoman generator within the next week. However, this one works by itself as well for creating all of the individual items too.  \n\nIf there are any additional item types, templates please add issues to the [generator-aspnet](https://github.com/OmniSharp/generator-aspnet) repo.  I think that a core WebAPI project type might be warranted.\n\n","html":"<p>Developing ASP.NET 5 applications using Visual Studio 2015 gives you a rich IDE experience, however now with ASP.NET now being cross platform that development IDE is not afforded to us on a Mac. </p>\n\n<p>Checkout this post <a href=\"http://blogs.msdn.com/b/webdev/archive/2014/08/12/develop-asp-net-vnext-applications-on-a-mac.aspx\">Develop ASP.NET vNext Applications on a Mac</a> for getting started.</p>\n\n<p>Using the Yeoman generator <strong>generator-aspnet</strong> you will have the option to create one of the following application types:</p>\n\n<pre><code>$ yo aspnet\n</code></pre>\n\n<ul>\n<li>Web Application</li>\n<li>MVC Application</li>\n<li>Nancy Fx Application</li>\n<li>Console Application</li>\n<li>Class Library (recently added)</li>\n</ul>\n\n<p>After your project is created you can get started in Sublime Text, vim, Brackets etc.  Checkout <a href=\"http://omnisharp.net\">OmniSharp.net</a> for the supported development enviroments and tooling support information there.</p>\n\n<p>Although the generator gets you started with the selected project type, adding additional item types can be less than ideal; depending on the environment.</p>\n\n<p>Luckily Yeoman gives us the subgenerators.  I put together <strong>generator-aspnet-item</strong> which you can get from npm.</p>\n\n<pre><code>$ npm install -g generator-aspnet-item\n</code></pre>\n\n<p>This generator allows you to create the additional ASP.NET 5 (vNext) project item types you would typically see from the Add > New Item dialog in Visual Studio.</p>\n\n<p><img src=\"/content/images/2014/12/Screen-Shot-2014-12-06-at-10-21-39-AM.png\" alt=\"Visual Studio Add New Item\" /></p>\n\n<p>I can now add a new MvcController in my working folder by doing the following:</p>\n\n<pre><code>$ yo aspnet-item:MvcController NewPageController\nYou called the aspnet subgenerator with the arg NewPageController  \nNewPageController.cs created.  \n   create NewPageController.cs\n</code></pre>\n\n<p>There are other options you can see by looking at the Github repo <a href=\"http://github.com/spboyer/generator-aspnet-item\">spboyer/generator-aspnet-item</a>.</p>\n\n<p>I will be merging this functionality with the <strong>generator-aspnet</strong> yeoman generator within the next week. However, this one works by itself as well for creating all of the individual items too.  </p>\n\n<p>If there are any additional item types, templates please add issues to the <a href=\"https://github.com/OmniSharp/generator-aspnet\">generator-aspnet</a> repo.  I think that a core WebAPI project type might be warranted.</p>","image":"http://yeoman.io/assets/img/tool-yo.5015.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1417879447738,"created_by":1,"updated_at":1420741796539,"updated_by":1,"published_at":1417899091854,"published_by":1},{"id":48,"uuid":"2a0d7b20-02b8-4f31-bb1d-cd3a8edba811","title":"kmon! ASP.NET 5 Where are my changes?","slug":"kmon-asp-net-5-where-are-my-changes","markdown":"One of the new features in Visual Studio 2015 for ASP.NET 5 is an agile development environment. What that means is now when you makes changes to your code, there is no need to re-compile to see the changes in the browser.\n\n<div style=\"float:right; height:200px;width:200px;\">\n![picard kmon](/content/images/2014/12/kmon.jpg)\n</div>\n\n>Visual Studio uses the Roslyn compiler to enable this dynamic compilation. You still have all of the structure and power of a compiled framework, but the development experience feels more like an interpreted language. See more here - [ASP.NET 5 Overview](http://www.asp.net/vnext/overview/aspnet-vnext/aspnet-5-overview)\n\nThis is a great new feature for Visual Studio users, but the new awesome is you now have a choice of what IDE you may use. That's where [kmon](https://github.com/henriksen/kmon) comes in.\n\nkmon, pronounced kuh-mon, is an ASP.NET project command that watches the working directory of your project for changes to the files and restarts the web server automatically so that you have the same frictionless development experience that Visual Studio is presenting through the use of the Roslyn compiler.\n\nThis process is accomplished through wrapping nodemon, a node module that is designed to watch files and restart and/or execute processes.\n\n#### Requirements\n* node.js - [nodejs.org](http://nodejs.org)\n* nodemon - `npm install -g nodemon`\n\n#### Adding kmon to your project\nkmon is a nuget package, [version 0.3.0](http://www.nuget.org/packages/kmon/) is the latest. \n\n`kpm install kmon`\n\nNext, you need to add the command to the commands portion of the project.json file and set the options.\n```language-javascript\n\"commands\": {\n    /* Change the port number when you are self hosting this application */\n    \"web\": \"Microsoft.AspNet.Hosting --server Microsoft.AspNet.Server.WebListener --server.urls http://localhost:5000\",\n    \"kestrel\": \"Microsoft.AspNet.Hosting --server Kestrel --server.urls http://localhost:5004\",\n    \"gen\": \"Microsoft.Framework.CodeGeneration\",\n    \"ef\": \"EntityFramework.Commands\",\n    \"mon\" : \"kmon --ext cs,json,js --server web\"\n},\n```\n\nthe options are:\n\n* --ext : the extensions of the files you would like to watch, the defaults are cs,json,js.\n* --server : the web server that you are going to use.  `web` for Windows, and `kestrel` for Linux, OSX. Default is `web`.\n\nIf you are using Brackets, for example, as your editor; open terminal and cd to your working folder and run the following command:\n\n`$ k kmon --server kestrel`\n\nThis command starts nodemon which subsequently starts kestrel.\n![terminal screen shot - started](/content/images/2014/12/Screen-Shot-2014-12-13-at-8-22-34-AM-1.png)\n\nNow you can open the application in a browser, note the server url that is defined in the kestrel command within the project.json file `\"kestrel\": \"Microsoft.AspNet.Hosting --server Kestrel --server.urls http://localhost:5004\"`\n![web screen shot](/content/images/2014/12/Screen-Shot-2014-12-13-at-8-24-04-AM.png)\n\nHere is a shot of the Brackets editor, note the **Name = \"Shayne Boyer\"** of the User class.\n![brackets before](/content/images/2014/12/Screen-Shot-2014-12-13-at-8-25-34-AM.png)\n\nI change the **Name** property to **kmon!** and hit save in Brackets, nodemon detects the changes, and restarts kestrel.\n![terminal changes made](/content/images/2014/12/Screen-Shot-2014-12-13-at-8-25-09-AM.png)\n\nGo back to the browser hit refresh and we are set. No rebuild step, no shutdown of the browser etc.\n![web screen shot](/content/images/2014/12/Screen-Shot-2014-12-13-at-8-26-18-AM.png)\n\n### Sublime & Kulture\nUsing Sublime Text and the Kulture add-in you can get a UI experience and not have to use the command line.\n\nFrom Sublime Text do CMD + Shift + P, Run **K** Commands and you will see that the **k mon** command now shows in the options. Click the command and you will get the same experience.\n\n![Sublime Text 3 screenshot](/content/images/2014/12/Screen-Shot-2014-12-13-at-8-43-01-AM.png)\n\nSee more about [Kulture](https://github.com/OmniSharp/Kulture) & [Omnisharp](http://omnisharp.net)\n\n#### So..Why a command? Why not Grunt, Gulp, etc...\n\nGood question.  Sure you can certainly use Gulp for example. There is an add-in [gulp-aspnet-k](https://github.com/tugberkugurlu/gulp-aspnet-k) that works.\n\n```language-javascript\ngulp.task('aspnet-run', aspnetk({\n    kCommand: 'kestrel' //default is 'web'\n}));\n```\n\nHere were the options that were on the table, when it was proposed - summarized from [OmniSharp/Kulture - Issue #5](https://github.com/OmniSharp/Kulture/issues/5) *it was originally called kestrelmon*\n\n***1. Create an ASP.NET Command***\n\nKulture and other editors have built in support for discovering and invoking commands in project. This is how kestrel,web, etc show up in the respective editors. So if we create a new command (that ships in a NuGet package) and users add an entry in the commands section pointing to it things will just work. When this command is invoked it will make the appropriate call to nodemon. This will work for editors and command line users.\n\n***2. Update Kulture and bake it in***\n\nKulture currently has built in support for kpm restore,kpm build & kpm pack. This is added to the sublime command list here. We could add a new kestrelmon command there as well.\n\n\nIn short, Option 1 gave more reach to all editors and long term options.\n\n#### Feedback\nWould love to see some feedback, feature requests - if there is something else we need this to do? Or keep it simple??\n\n","html":"<p>One of the new features in Visual Studio 2015 for ASP.NET 5 is an agile development environment. What that means is now when you makes changes to your code, there is no need to re-compile to see the changes in the browser.</p>\n\n<div style=\"float:right; height:200px;width:200px;\">  \n<img src=\"/content/images/2014/12/kmon.jpg\" alt=\"picard kmon\" />\n</div>\n\n<blockquote>\n  <p>Visual Studio uses the Roslyn compiler to enable this dynamic compilation. You still have all of the structure and power of a compiled framework, but the development experience feels more like an interpreted language. See more here - <a href=\"http://www.asp.net/vnext/overview/aspnet-vnext/aspnet-5-overview\">ASP.NET 5 Overview</a></p>\n</blockquote>\n\n<p>This is a great new feature for Visual Studio users, but the new awesome is you now have a choice of what IDE you may use. That's where <a href=\"https://github.com/henriksen/kmon\">kmon</a> comes in.</p>\n\n<p>kmon, pronounced kuh-mon, is an ASP.NET project command that watches the working directory of your project for changes to the files and restarts the web server automatically so that you have the same frictionless development experience that Visual Studio is presenting through the use of the Roslyn compiler.</p>\n\n<p>This process is accomplished through wrapping nodemon, a node module that is designed to watch files and restart and/or execute processes.</p>\n\n<h4 id=\"requirements\">Requirements</h4>\n\n<ul>\n<li>node.js - <a href=\"http://nodejs.org\">nodejs.org</a></li>\n<li>nodemon - <code>npm install -g nodemon</code></li>\n</ul>\n\n<h4 id=\"addingkmontoyourproject\">Adding kmon to your project</h4>\n\n<p>kmon is a nuget package, <a href=\"http://www.nuget.org/packages/kmon/\">version 0.3.0</a> is the latest. </p>\n\n<p><code>kpm install kmon</code></p>\n\n<p>Next, you need to add the command to the commands portion of the project.json file and set the options.  </p>\n\n<pre><code class=\"language-javascript\">\"commands\": {  \n    /* Change the port number when you are self hosting this application */\n    \"web\": \"Microsoft.AspNet.Hosting --server Microsoft.AspNet.Server.WebListener --server.urls http://localhost:5000\",\n    \"kestrel\": \"Microsoft.AspNet.Hosting --server Kestrel --server.urls http://localhost:5004\",\n    \"gen\": \"Microsoft.Framework.CodeGeneration\",\n    \"ef\": \"EntityFramework.Commands\",\n    \"mon\" : \"kmon --ext cs,json,js --server web\"\n},\n</code></pre>\n\n<p>the options are:</p>\n\n<ul>\n<li>--ext : the extensions of the files you would like to watch, the defaults are cs,json,js.</li>\n<li>--server : the web server that you are going to use.  <code>web</code> for Windows, and <code>kestrel</code> for Linux, OSX. Default is <code>web</code>.</li>\n</ul>\n\n<p>If you are using Brackets, for example, as your editor; open terminal and cd to your working folder and run the following command:</p>\n\n<p><code>$ k kmon --server kestrel</code></p>\n\n<p>This command starts nodemon which subsequently starts kestrel. <br />\n<img src=\"/content/images/2014/12/Screen-Shot-2014-12-13-at-8-22-34-AM-1.png\" alt=\"terminal screen shot - started\" /></p>\n\n<p>Now you can open the application in a browser, note the server url that is defined in the kestrel command within the project.json file <code>\"kestrel\": \"Microsoft.AspNet.Hosting --server Kestrel --server.urls http://localhost:5004\"</code> <br />\n<img src=\"/content/images/2014/12/Screen-Shot-2014-12-13-at-8-24-04-AM.png\" alt=\"web screen shot\" /></p>\n\n<p>Here is a shot of the Brackets editor, note the <strong>Name = \"Shayne Boyer\"</strong> of the User class. <br />\n<img src=\"/content/images/2014/12/Screen-Shot-2014-12-13-at-8-25-34-AM.png\" alt=\"brackets before\" /></p>\n\n<p>I change the <strong>Name</strong> property to <strong>kmon!</strong> and hit save in Brackets, nodemon detects the changes, and restarts kestrel. <br />\n<img src=\"/content/images/2014/12/Screen-Shot-2014-12-13-at-8-25-09-AM.png\" alt=\"terminal changes made\" /></p>\n\n<p>Go back to the browser hit refresh and we are set. No rebuild step, no shutdown of the browser etc. <br />\n<img src=\"/content/images/2014/12/Screen-Shot-2014-12-13-at-8-26-18-AM.png\" alt=\"web screen shot\" /></p>\n\n<h3 id=\"sublimekulture\">Sublime &amp; Kulture</h3>\n\n<p>Using Sublime Text and the Kulture add-in you can get a UI experience and not have to use the command line.</p>\n\n<p>From Sublime Text do CMD + Shift + P, Run <strong>K</strong> Commands and you will see that the <strong>k mon</strong> command now shows in the options. Click the command and you will get the same experience.</p>\n\n<p><img src=\"/content/images/2014/12/Screen-Shot-2014-12-13-at-8-43-01-AM.png\" alt=\"Sublime Text 3 screenshot\" /></p>\n\n<p>See more about <a href=\"https://github.com/OmniSharp/Kulture\">Kulture</a> &amp; <a href=\"http://omnisharp.net\">Omnisharp</a></p>\n\n<h4 id=\"sowhyacommandwhynotgruntgulpetc\">So..Why a command? Why not Grunt, Gulp, etc...</h4>\n\n<p>Good question.  Sure you can certainly use Gulp for example. There is an add-in <a href=\"https://github.com/tugberkugurlu/gulp-aspnet-k\">gulp-aspnet-k</a> that works.</p>\n\n<pre><code class=\"language-javascript\">gulp.task('aspnet-run', aspnetk({  \n    kCommand: 'kestrel' //default is 'web'\n}));\n</code></pre>\n\n<p>Here were the options that were on the table, when it was proposed - summarized from <a href=\"https://github.com/OmniSharp/Kulture/issues/5\">OmniSharp/Kulture - Issue #5</a> <em>it was originally called kestrelmon</em></p>\n\n<p><strong><em>1. Create an ASP.NET Command</em></strong></p>\n\n<p>Kulture and other editors have built in support for discovering and invoking commands in project. This is how kestrel,web, etc show up in the respective editors. So if we create a new command (that ships in a NuGet package) and users add an entry in the commands section pointing to it things will just work. When this command is invoked it will make the appropriate call to nodemon. This will work for editors and command line users.</p>\n\n<p><strong><em>2. Update Kulture and bake it in</em></strong></p>\n\n<p>Kulture currently has built in support for kpm restore,kpm build &amp; kpm pack. This is added to the sublime command list here. We could add a new kestrelmon command there as well.</p>\n\n<p>In short, Option 1 gave more reach to all editors and long term options.</p>\n\n<h4 id=\"feedback\">Feedback</h4>\n\n<p>Would love to see some feedback, feature requests - if there is something else we need this to do? Or keep it simple??</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1418474462930,"created_by":1,"updated_at":1420741784538,"updated_by":1,"published_at":1418479495251,"published_by":1},{"id":49,"uuid":"29fb9030-b6e2-4406-b190-8c9b2efd3489","title":"Gulp Your TypeScript in ASP.NET 5","slug":"gulp-typescript-in-asp-net-5","markdown":"<a href=\"http://www.codeproject.com\" rel=\"tag\" style=\"display:none\">CodeProject</a>\n\n<div style=\"height:200px;width:100px;margin:5px;float:right;\">\n![gulp image](/content/images/2014/12/gulp.png)\n</div>\n\nIf you have done any typescript development in Visual Studio in previous versions, you more than like are using the [Web Essentials](http://vswebessentials.com/) add in to perform the compilation to Javascript. Another option is to add a gulp task now that we have gulp and grunt support within Visual Studio.  The other value add is if you are a non Visual Studio user this solution works just the same.\n\n###Project Creation\nIn Visual Studio 2015, File > New Project > ASP.NET Web Application > ASP.NET 5 Empty\n![File New Project](/content/images/2014/12/Screen-Shot-2014-12-30-at-9-43-10-AM.png)\n\nor using the <a href='http://www.tattoocoder.com/asp-net-vnext-project-creation-using-yeoman' target='_blank'>ASP.NET Yeoman Generator</a>\n\n```\n$ yo aspnet \n\n     _-----_\n    |       |    .--------------------------.\n    |--(o)--|    |      Welcome to the      |\n   `---------´   |   marvellous ASP.NET 5   |\n    ( _´U`_ )    |        generator!        |\n    /___A___\\    '--------------------------'\n     |  ~  |     \n   __'.___.'__   \n ´   `  |° ´ Y ` \n\n? What type of application do you want to create? MVC Application\n? What's the name of your ASP.NET application? (MvcApplication) GulpTypeScript\n```\n\n###Adding Gulp\nAdd a package.json file. \n\n![Add New Item - JSON File](/content/images/2014/12/Screen-Shot-2014-12-30-at-10-10-21-AM.png)\n\nor using the <a href='http://www.tattoocoder.com/asp-net-vnext-project-creation-using-yeoman' target='_blank'>ASP.NET Yeoman Generator</a>\n\n```\n$ yo aspnet:PackageJSON\n```\n\nWithin `package.json` you will need to add the dependencies to support gulp. \n\n- **gulp**: Core gulp.js package\n- **gulp-tsc**: TypeScript compliler for gulp\n- **gulp-shell**: command line interface, can execute other processes etc.\n- **run-sequence**: run a series of tasks\n\n```language-javascript\n{\n    \"version\": \"0.0.1\",\n    \"name\": \"GulpTypeScript\",\n    \"devDependencies\": {\n    \t\"gulp\": \"^3.8.5\", \n    \t\"gulp-tsc\": \"^0.9.1\", \n    \t\"gulp-shell\": \"^0.2.5\",\n    \t\"run-sequence\":\"^0.3.6\"\n    }\n}\n```\n\nUnlike nuget (project.json > dependencies node), the npm packages are not automatically restored/downloaded once the `package.json` is saved.  You can either expand the \"Dependencies\" node in the Solution Explorer and click \"Restore Packages\" or from a command line type `npm install`.\n\n![Restore Packages](/content/images/2014/12/Screen-Shot-2014-12-30-at-11-11-06-AM.png)\n\nafter `npm install` completes...\n\n![packages restored](/content/images/2014/12/Screen-Shot-2014-12-30-at-12-20-04-PM.png)\n\n####Adding the gulpfile.js\n\nUsing Visual Studio, Add New Item > JavaScript File > \"gulpfile.js\" or again using the aspnet Yeoman generator:\n```\n$ yo aspnet:JScript gruntfile\n```\n\n####Adding the tasks\n\nIn this example, we'll put in a few simple tasks\n\n- build\n- clean\n- default\n- rebuild\n\nthe most important item being the **build** task as this is where the TypeScript compilation happens.\n\nFirst declare the vars and dependencies...\n```language-javascript\n    var gulp = require('gulp'),\n        tsc = require('gulp-tsc'),\n        shell = require('gulp-shell'),\n        seq = require('run-sequence'),\n        del = require('del');\n```\n\nNext, set the source (src) and destination (dest) paths for your scripts...\n\n```language-javascript\n   var paths = {\n        ts: {\n            src: [\n                'scripts/ts/*.ts'\n            ],\n            dest : 'scripts'\n        }\n    }\n```\n\nHere, set the \"default\" task to be run\n\n```language-javascript\n   // Default\n    gulp.task('default', ['build']);\n```\n\nA clean task is defined to delete any javascript files that were compiled to the destination location.\n\n```language-javascript\n  // Clean\n    gulp.task('clean', function (cb) {\n        del(paths.ts.dest + '/*.js', cb);\n    })\n```\n\nNext, a **rebuild** task is defined to execute the **clean** then **build** sequetiallly.  You can use `gulp.start('clean', 'build')` but there is no guarantee what order the tasks will execute or complete in. So in that case the **run-sequence** npm package is used here.\n\n```language-javascript\n    // ReBuild - Clean & Build\n    gulp.task('rebuild', function (cb) {\n        seq('clean', 'build', cb);\n    });\n```\n\nFinally, the build task. Here the TypeScript compiler is leveraged using the `gulp-tsc` npm package passing in the arguments from the source location and producing the compiled JavaScript to the destination.\n```language-javascript\n    // Build\n    gulp.task('build', function () {\n        return gulp\n            .src(paths.ts.src)\n            .pipe(tsc({\n                module: \"CommonJS\",\n                sourcemap: true,\n                emitError: false\n            }))\n            .pipe(gulp.dest(paths.ts.dest));\n    });\n         \n```\n\nFor demo purposes, just grabbed the \"Simple Inheritance\" example from [TypeScriptLang.org](http://www.typescriptlang.org/Playground) and created \"animal.ts\" in the **/scripts/ts** folder.\n\n```language-javascript\nclass Animal {\n    constructor(public name: string) { }\n    move(meters: number) {\n        alert(this.name + \" moved \" + meters + \"m.\");\n    }\n}\n\nclass Snake extends Animal {\n    constructor(name: string) { super(name); }\n    move() {\n        alert(\"Slithering...\");\n        super.move(5);\n    }\n}\n\nclass Horse extends Animal {\n    constructor(name: string) { super(name); }\n    move() {\n        alert(\"Galloping...\");\n        super.move(45);\n    }\n}\n\nvar sam = new Snake(\"Sammy the Python\");\nvar tom: Animal = new Horse(\"Tommy the Palomino\");\n\nsam.move();\ntom.move(34);\n\n```\n\nNow in order to produce the JavaScript, there are a few options as mentioned before. \n\n- Use [Web Essentials](http://vswebessentials.com)\n- Open the command line, now that we have defined the gulp tasks, and type `gulp [task name]`\n- Task Runner Explorer\n\n####Command Line\n\nPretty simple here, as mdentioned above, open your console in your working directoy\n\n```\n$ gulp build\n```\n\nOutput will be similar to (Windows)\n```\nC:\\Github\\GulpTypeScript\\src\\GulpTypeScript>gulp build\n[16:58:08] Using gulpfile C:\\Github\\GulpTypeScript\\src\\GulpTypeScript\\gulpfile.js\n[16:58:08] Starting 'build'...\n[16:58:08] Compiling TypeScript files using tsc version null\n[16:58:09] Finished 'build' after 1.01 s\n```\non OSX\n```\n$ gulp build\n[17:00:43] Using gulpfile ~/GulpTypeScript/gulpfile.js\n[17:00:43] Starting 'build'...\n[17:00:43] Compiling TypeScript files using tsc version null\n[17:00:43] Finished 'build' after 848 ms\n```\n\nThe output goes right to **/scripts** as expected.\n![output js](/content/images/2014/12/Screen-Shot-2014-12-30-at-5-12-49-PM.png)\n\n####Bonus Task\n*Edit 01.05.2015* - Someone asked me was there a way to watch for file changes to recompile. Here is the task to add using the `.watch()` functionality of grunt.\n\n```language-javascript\n    gulp.task('watch', function () {\n        gulp.watch(paths.ts.src, ['build']);\n    });\n```\n\nThis task watches for file changes in the `src` directory, then executes the `build` task.  You could optionally put in multiple tasks or call any existing task.\n\n####Task Runner Explorer\n\nIn Visual Studio 2015, there is now Task Runner Explorer which gives you a visual look into your tasks.  This supports grunt and gulp.  Here is a shot of the window after running the **build** task.\n\n![Task Runner Explorer](/content/images/2014/12/Screen-Shot-2014-12-30-at-5-02-13-PM.png)\n\n##Note\nOn Windows you may encounter a strange error when executing the tasks. This is an issue when you have multiple versions of TypeScript installed.\n\nThe error: **Failed to compile TypeScript: Error: Command failed: Cannot initialize ActiveScript**\n![](/content/images/2014/12/Screen-Shot-2014-12-29-at-3-34-22-PM.png)\n\nThere is an easy fix, just go to to C:\\Program Files(x86)\\Microsoft SDKs\\TypeScript \nand remove the previous versions.\n![](/content/images/2014/12/Screen-Shot-2014-12-29-at-3-37-26-PM.png)\n\n###Summary\nThere is a lot more you can add to the grunt file as you may or may not know, there are minification, image optimization and a ton more.  I like the way of gulp as it allows for the non VS and Visual Studio developers to put together the code in the same manner.  Not to toss out Web Essentials, cause that is an awesome add-in and there would be many of features not in VS without it.","html":"<p><a href=\"http://www.codeproject.com\" rel=\"tag\" style=\"display:none\">CodeProject</a></p>\n\n<div style=\"height:200px;width:100px;margin:5px;float:right;\">  \n<img src=\"/content/images/2014/12/gulp.png\" alt=\"gulp image\" />\n</div>\n\n<p>If you have done any typescript development in Visual Studio in previous versions, you more than like are using the <a href=\"http://vswebessentials.com/\">Web Essentials</a> add in to perform the compilation to Javascript. Another option is to add a gulp task now that we have gulp and grunt support within Visual Studio.  The other value add is if you are a non Visual Studio user this solution works just the same.</p>\n\n<h3 id=\"projectcreation\">Project Creation</h3>\n\n<p>In Visual Studio 2015, File > New Project > ASP.NET Web Application > ASP.NET 5 Empty <br />\n<img src=\"/content/images/2014/12/Screen-Shot-2014-12-30-at-9-43-10-AM.png\" alt=\"File New Project\" /></p>\n\n<p>or using the <a href='http://www.tattoocoder.com/asp-net-vnext-project-creation-using-yeoman' target='_blank'>ASP.NET Yeoman Generator</a></p>\n\n<pre><code>$ yo aspnet \n\n     _-----_\n    |       |    .--------------------------.\n    |--(o)--|    |      Welcome to the      |\n   `---------´   |   marvellous ASP.NET 5   |\n    ( _´U`_ )    |        generator!        |\n    /___A___\\    '--------------------------'\n     |  ~  |     \n   __'.___.'__   \n ´   `  |° ´ Y ` \n\n? What type of application do you want to create? MVC Application\n? What's the name of your ASP.NET application? (MvcApplication) GulpTypeScript\n</code></pre>\n\n<h3 id=\"addinggulp\">Adding Gulp</h3>\n\n<p>Add a package.json file. </p>\n\n<p><img src=\"/content/images/2014/12/Screen-Shot-2014-12-30-at-10-10-21-AM.png\" alt=\"Add New Item - JSON File\" /></p>\n\n<p>or using the <a href='http://www.tattoocoder.com/asp-net-vnext-project-creation-using-yeoman' target='_blank'>ASP.NET Yeoman Generator</a></p>\n\n<pre><code>$ yo aspnet:PackageJSON\n</code></pre>\n\n<p>Within <code>package.json</code> you will need to add the dependencies to support gulp. </p>\n\n<ul>\n<li><strong>gulp</strong>: Core gulp.js package</li>\n<li><strong>gulp-tsc</strong>: TypeScript compliler for gulp</li>\n<li><strong>gulp-shell</strong>: command line interface, can execute other processes etc.</li>\n<li><strong>run-sequence</strong>: run a series of tasks</li>\n</ul>\n\n<pre><code class=\"language-javascript\">{\n    \"version\": \"0.0.1\",\n    \"name\": \"GulpTypeScript\",\n    \"devDependencies\": {\n        \"gulp\": \"^3.8.5\", \n        \"gulp-tsc\": \"^0.9.1\", \n        \"gulp-shell\": \"^0.2.5\",\n        \"run-sequence\":\"^0.3.6\"\n    }\n}\n</code></pre>\n\n<p>Unlike nuget (project.json > dependencies node), the npm packages are not automatically restored/downloaded once the <code>package.json</code> is saved.  You can either expand the \"Dependencies\" node in the Solution Explorer and click \"Restore Packages\" or from a command line type <code>npm install</code>.</p>\n\n<p><img src=\"/content/images/2014/12/Screen-Shot-2014-12-30-at-11-11-06-AM.png\" alt=\"Restore Packages\" /></p>\n\n<p>after <code>npm install</code> completes...</p>\n\n<p><img src=\"/content/images/2014/12/Screen-Shot-2014-12-30-at-12-20-04-PM.png\" alt=\"packages restored\" /></p>\n\n<h4 id=\"addingthegulpfilejs\">Adding the gulpfile.js</h4>\n\n<p>Using Visual Studio, Add New Item > JavaScript File > \"gulpfile.js\" or again using the aspnet Yeoman generator:  </p>\n\n<pre><code>$ yo aspnet:JScript gruntfile\n</code></pre>\n\n<h4 id=\"addingthetasks\">Adding the tasks</h4>\n\n<p>In this example, we'll put in a few simple tasks</p>\n\n<ul>\n<li>build</li>\n<li>clean</li>\n<li>default</li>\n<li>rebuild</li>\n</ul>\n\n<p>the most important item being the <strong>build</strong> task as this is where the TypeScript compilation happens.</p>\n\n<p>First declare the vars and dependencies...  </p>\n\n<pre><code class=\"language-javascript\">    var gulp = require('gulp'),\n        tsc = require('gulp-tsc'),\n        shell = require('gulp-shell'),\n        seq = require('run-sequence'),\n        del = require('del');\n</code></pre>\n\n<p>Next, set the source (src) and destination (dest) paths for your scripts...</p>\n\n<pre><code class=\"language-javascript\">   var paths = {\n        ts: {\n            src: [\n                'scripts/ts/*.ts'\n            ],\n            dest : 'scripts'\n        }\n    }\n</code></pre>\n\n<p>Here, set the \"default\" task to be run</p>\n\n<pre><code class=\"language-javascript\">   // Default\n    gulp.task('default', ['build']);\n</code></pre>\n\n<p>A clean task is defined to delete any javascript files that were compiled to the destination location.</p>\n\n<pre><code class=\"language-javascript\">  // Clean\n    gulp.task('clean', function (cb) {\n        del(paths.ts.dest + '/*.js', cb);\n    })\n</code></pre>\n\n<p>Next, a <strong>rebuild</strong> task is defined to execute the <strong>clean</strong> then <strong>build</strong> sequetiallly.  You can use <code>gulp.start('clean', 'build')</code> but there is no guarantee what order the tasks will execute or complete in. So in that case the <strong>run-sequence</strong> npm package is used here.</p>\n\n<pre><code class=\"language-javascript\">    // ReBuild - Clean &amp; Build\n    gulp.task('rebuild', function (cb) {\n        seq('clean', 'build', cb);\n    });\n</code></pre>\n\n<p>Finally, the build task. Here the TypeScript compiler is leveraged using the <code>gulp-tsc</code> npm package passing in the arguments from the source location and producing the compiled JavaScript to the destination.  </p>\n\n<pre><code class=\"language-javascript\">    // Build\n    gulp.task('build', function () {\n        return gulp\n            .src(paths.ts.src)\n            .pipe(tsc({\n                module: \"CommonJS\",\n                sourcemap: true,\n                emitError: false\n            }))\n            .pipe(gulp.dest(paths.ts.dest));\n    });\n</code></pre>\n\n<p>For demo purposes, just grabbed the \"Simple Inheritance\" example from <a href=\"http://www.typescriptlang.org/Playground\">TypeScriptLang.org</a> and created \"animal.ts\" in the <strong>/scripts/ts</strong> folder.</p>\n\n<pre><code class=\"language-javascript\">class Animal {  \n    constructor(public name: string) { }\n    move(meters: number) {\n        alert(this.name + \" moved \" + meters + \"m.\");\n    }\n}\n\nclass Snake extends Animal {  \n    constructor(name: string) { super(name); }\n    move() {\n        alert(\"Slithering...\");\n        super.move(5);\n    }\n}\n\nclass Horse extends Animal {  \n    constructor(name: string) { super(name); }\n    move() {\n        alert(\"Galloping...\");\n        super.move(45);\n    }\n}\n\nvar sam = new Snake(\"Sammy the Python\");  \nvar tom: Animal = new Horse(\"Tommy the Palomino\");\n\nsam.move();  \ntom.move(34);\n</code></pre>\n\n<p>Now in order to produce the JavaScript, there are a few options as mentioned before. </p>\n\n<ul>\n<li>Use <a href=\"http://vswebessentials.com\">Web Essentials</a></li>\n<li>Open the command line, now that we have defined the gulp tasks, and type <code>gulp [task name]</code></li>\n<li>Task Runner Explorer</li>\n</ul>\n\n<h4 id=\"commandline\">Command Line</h4>\n\n<p>Pretty simple here, as mdentioned above, open your console in your working directoy</p>\n\n<pre><code>$ gulp build\n</code></pre>\n\n<p>Output will be similar to (Windows)  </p>\n\n<pre><code>C:\\Github\\GulpTypeScript\\src\\GulpTypeScript&gt;gulp build  \n[16:58:08] Using gulpfile C:\\Github\\GulpTypeScript\\src\\GulpTypeScript\\gulpfile.js\n[16:58:08] Starting 'build'...\n[16:58:08] Compiling TypeScript files using tsc version null\n[16:58:09] Finished 'build' after 1.01 s\n</code></pre>\n\n<p>on OSX  </p>\n\n<pre><code>$ gulp build\n[17:00:43] Using gulpfile ~/GulpTypeScript/gulpfile.js\n[17:00:43] Starting 'build'...\n[17:00:43] Compiling TypeScript files using tsc version null\n[17:00:43] Finished 'build' after 848 ms\n</code></pre>\n\n<p>The output goes right to <strong>/scripts</strong> as expected. <br />\n<img src=\"/content/images/2014/12/Screen-Shot-2014-12-30-at-5-12-49-PM.png\" alt=\"output js\" /></p>\n\n<h4 id=\"bonustask\">Bonus Task</h4>\n\n<p><em>Edit 01.05.2015</em> - Someone asked me was there a way to watch for file changes to recompile. Here is the task to add using the <code>.watch()</code> functionality of grunt.</p>\n\n<pre><code class=\"language-javascript\">    gulp.task('watch', function () {\n        gulp.watch(paths.ts.src, ['build']);\n    });\n</code></pre>\n\n<p>This task watches for file changes in the <code>src</code> directory, then executes the <code>build</code> task.  You could optionally put in multiple tasks or call any existing task.</p>\n\n<h4 id=\"taskrunnerexplorer\">Task Runner Explorer</h4>\n\n<p>In Visual Studio 2015, there is now Task Runner Explorer which gives you a visual look into your tasks.  This supports grunt and gulp.  Here is a shot of the window after running the <strong>build</strong> task.</p>\n\n<p><img src=\"/content/images/2014/12/Screen-Shot-2014-12-30-at-5-02-13-PM.png\" alt=\"Task Runner Explorer\" /></p>\n\n<h2 id=\"note\">Note</h2>\n\n<p>On Windows you may encounter a strange error when executing the tasks. This is an issue when you have multiple versions of TypeScript installed.</p>\n\n<p>The error: <strong>Failed to compile TypeScript: Error: Command failed: Cannot initialize ActiveScript</strong> <br />\n<img src=\"/content/images/2014/12/Screen-Shot-2014-12-29-at-3-34-22-PM.png\" alt=\"\" /></p>\n\n<p>There is an easy fix, just go to to C:\\Program Files(x86)\\Microsoft SDKs\\TypeScript <br />\nand remove the previous versions. <br />\n<img src=\"/content/images/2014/12/Screen-Shot-2014-12-29-at-3-37-26-PM.png\" alt=\"\" /></p>\n\n<h3 id=\"summary\">Summary</h3>\n\n<p>There is a lot more you can add to the grunt file as you may or may not know, there are minification, image optimization and a ton more.  I like the way of gulp as it allows for the non VS and Visual Studio developers to put together the code in the same manner.  Not to toss out Web Essentials, cause that is an awesome add-in and there would be many of features not in VS without it.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1419887312116,"created_by":1,"updated_at":1420654862752,"updated_by":1,"published_at":1419977889518,"published_by":1},{"id":50,"uuid":"96b18188-1e6e-4ed9-bc12-bcca1eabf1de","title":"Building Web API using MVC 6 & MongoDB","slug":"building-vnext-web-api-using-mvc-6-mongodb-azure","markdown":"This is a quick walkthrough on using ASP.NET 5 to build a Web API layer using MongoDB. The overall concept is not too dissimilar from previous examples you may have seen using **X** type of database, however there are some areas covered that are either new in MVC 6 that you may find you didn't know are there. \n\n####Topics Covered\n- ConfigurationModel\n\t- config.json\n\t- Environment Variables\n- OptionsModel\n- Dependency Injection (IServiceCollection)\n- Forcing JSON or Removing XML Formatter, Content Negotiation\n- MongoDB\n\t- Installation (OSX & Windows)\n\t- mongocsharpdriver (nuget package)\n- Testing endpoints w/ Postman or Fiddler\n\n###Project Creation\nDepending on your environment (Windows or OS X) or preference you have a choice on how you can create the ASP.NET project.  \n\n######Visual Studio 2015 Preview\nLaunch Visual Studio 2015 Preview and **File** > **New Project** > **Web** > **ASP.NET 5 Empty**.\n![New Project Dialog](/content/images/2015/01/Screen-Shot-2015-01-15-at-11-36-29-AM.png)\n    \n#####ASP.NET Yeoman Project Generator \n([see walkthrough here](http://www.tattoocoder.com/asp-net-vnext-project-creation-using-yeoman/)) - note that the MVC Project is the best choice for this example, there is not an \"Empty\" template.\n\n```\n$ yo aspnet\n\n     _-----_\n    |       |    .--------------------------.\n    |--(o)--|    |      Welcome to the      |\n   `---------´   |   marvellous ASP.NET 5   |\n    ( _´U`_ )    |        generator!        |\n    /___A___\\    '--------------------------'\n     |  ~  |     \n   __'.___.'__   \n ´   `  |° ´ Y ` \n\n? What type of application do you want to create? MVC Application\n? What's the name of your ASP.NET application? (MvcApplication) mongomvc\n  \n```\n\n###Setting up the dependencies\nOpen the **project.json** file and add the following to the dependencies node.\n\n```language-javascript\n\"dependencies\": {\n        \"Microsoft.AspNet.Server.IIS\":\"1.0.0-beta1\",\n        \"Microsoft.AspNet.Mvc\": \"6.0.0-beta1\",\n        \"Microsoft.AspNet.Hosting\": \"1.0.0-beta1\",\n        \"Microsoft.AspNet.Diagnostics\": \"1.0.0-beta1\",\n        \"Microsoft.AspNet.Server.WebListener\": \"1.0.0-beta1\",\n        \"Microsoft.Framework.ConfigurationModel.Json\": \"1.0.0-beta1\",\n        \"Kestrel\": \"1.0.0-beta1\",\n        \"mongocsharpdriver\": \"1.8.3\"\n    }\n```\n\n- **Microsoft.AspNet.Server.IIS** : Server Implemenation for ASP.NET 5\n- **Microsoft.AspNet.Hosting** : Core hosting infrastructure for ASP.NET 5\n- **Microsoft.AspNet.Diagnostics** : Middleware for error pages, diagnostics etc.\n- **Microsoft.AspNet.Server.WebListener** : Self host web server\n- **Microsoft.AspNet.Mvc** : ASP.NET MVC Framework\n- **Microsoft.Framework.ConfigurationModel.Json** : JSON configuration source for the ConfigurationModel\n- **Kestrel** : Server for hosting on OS X, Linux\n- **mongocsharpdriver** : MongoDB Driver\n\nEach of these should be self explanatory with the exception of maybe the **ConfigurationModel.Json** package, which will be covered when we get into the settings portion of the walkthrough.\n\nOnce you save the file, in Visual Studio, the packages will be restored from nuget.  If you are using a non Visual Studio editor, then execute `kpm restore` from the command line to get the packages.\n\n###Startup.cs\nStartup.cs is the entry point for your application; this is where the configuration, services, dependency injectection etc. is configured.\n\nIn the following snippet, the `ConfigureServices` method is used to add our services into the pipleline and expose the `IServiceCollection` for dependeny injection. It also sets the `Configure` method to tell the app which services in the pipeline to use on start.\n\n```language-csharp\n\npublic class Startup\n{\n\tpublic void ConfigureServices(IServiceCollection services)\n    {\n    \tservices.AddMvc();\n    }\n    \n    public void Configure(IApplicationBuilder app)\n    {\n    \tapp.UseMvc();\n        app.UseWelcomePage();\n    }\n}\n\n```\n\nAt this point you can `F5` (VS2015), `k web` (Win) or `k kestrel` (Linux or OSX) to run the app and see the Welcome Page.\n\n![Welcome Page](/content/images/2015/01/aspnet_welcompage.png)\n\nLet's add a few items to this to round out the bootstrapping of the application.\n\n**Remove XML Formatters** - if you have done any ASP.NET Web API development in the past, the format of the output is dependant on the `Content-Type` header that is passed when a GET request is made.  By default the response type will be JSON, however if the client send `application/xml` that is what will be returned.  You can force JSON results for all returns by adding the following to the `ConfigureServices()` method:\n\n```language-csharp\n\n services.Configure<MvcOptions>(options =>\n                                     options\n                                     .OutputFormatters\n                                     .RemoveAll(formatter => formatter.Instance is XmlDataContractSerializerOutputFormatter)\n                                           );\n\n```\n\nIf you wish to control this at a more finite level, please see [Content Negotiation in MVC 5 or How Can I Just Write JSON](http://blogs.msdn.com/b/webdev/archive/2014/11/24/content-negotiation-in-mvc-5-or-how-can-i-just-write-json.aspx)\n\n###Configuration\n\nGone are the days of web.config, XML transforms for deploying to environments.  Now, as with many things in ASP.NET \"vNext, you get more choice.  \n\nThere are multiple file formats supported; XML, JSON, and INI are all supported out of the box. The other option is Environment variables, a characteristic of node.js as well as other frameworks.  \n\nHere is an example of how you can use the new ConfigurationModel to take advantage of the new confuration files.\n\n```\nconfig.json\n{\n\t\"key\" : \"value\"\n}\n\nconfig.ini\nkey = value\n\nconfig.xml\n<key>\n\t<value>value</value>\n</key>\n\n```\n\nEnvironment variables in Azure\n![Azure Env Variables](/content/images/2015/01/Screen-Shot-2015-01-16-at-10-34-34-AM.png)\n\n```language-csharp\n\npublic void Configure(IApplicationBuilder app)\n    {\n        // Setup configuration sources\n        var configuration = new Configuration();\n        configuration.AddJsonFile(“config.json”);\n        configuration.AddIniFile(“config.ini”);\n        configuration.AddXmlFile(“config.xml”);\n        configuration.AddEnvironmentVariables();\n \n        // …\n    }\n\n```\nAccessing the values\n```language-csharp\nvar configuration = new Configuration();\nconfiguration.AddJsonFile(\"config.json);\nconfiguration.Get(\"key\");\n```\n\nA couple notes concerning configuration:\n\n* order matters, last one wins\n* not just a key/value pair. Complex structures supported\n\nSo how does this apply to this project? Let's add it to the **Startup.cs**.\n\nAdd the following to constructor\n\n```language-csharp\npublic Startup()\n{\n\tConfiguration = new Configuration()\n\t\t.AddJsonFile(\"config.json\")\n\t\t.AddEnvironmentVariables();\n}\n```\n\nNext, add the `IConfiguration` interface so we can take advantage of DI \n\n```language-csharp\npublic IConfiguration Configuration { get; set; }\n```\n\nAnother new item we have is the the IOptions interface which allows us to bind the configuration file to a class. This is available in the Microsoft.Framework.OptionsModel namespace. Given that, let's create a new class call **Settings.cs** to hold the values from the config.json file we'll be creating shortly.\n\n```language-csharp\npublic class Settings\n{\n\tpublic string Database { get; set; }\n\tpublic string MongoConnection { get; set; }\n}\n```\n\nnow create the **config.json** file\n\n```language-javascript\n{\n    \"mongoconnection\": \"mongodb://localhost:27017\",\n    \"database\":  \"mongomvc\"\n}\n```\n\nNow, add the code to the **ConfigureServices()** method\n\nFirst, change the services.AddMvc() to include our configuration\n```language-csharp\nservices.addMvc(Configuration)\n```\nnow add this line to configure the settings to be configured and bind based on the configuration\n```language-csharp\nservices.Configure<Settings>(Configuration);\n```\n\nNow that the application is bootstrapped for Configuration, Dependency Injection, JSON formatting; let's get the datastore setup in MongoDB and then we'll come back to round out the app with the Controller, Model and DataRepository.\n\n###MongoDB\nThere are a few reasons I chose MongoDB for this example. \n\n* its a popular NoSQL datastore\n* has a nuget package for C#\n* supported on Azure\n* equal tooling support on OSX and Windows.\n\n####Installation\nInstallation is a breeze.  If you are on OSX you can use HomeBrew to install by executing `$ brew install mongodb`, and if you are using Windows I would highly suggest using [Chocolately](https://chocolatey.org/) to do the installation. Chocolately installs MongoDB, the shell and the Windows service and is equivalent to the OSX install with HomeBrew. \n\n```\n> choco install mongodb\n```\n\n####Tools\nIf you prefer GUI interfaces, the best one I have found is [RoboMongo](http://robomongo.org/). It is cross platform and provides a great way to explore your collections. You can also connect to you local stores as well as remote stores such as [MongoLab](http://mongolab.com)(Azure provider).\n\n\n####Test Data\nOnce you have installed MongoDB, open terminal and connect to the database by the following command\n\n```\n$ mongo mongomvc\n```\n\n**mongo** starts the terminal command, and the second paramter connects or creates the store. Next copy and paste the test data into the terminal and hit enter.\n\n```\ndb.speakers.insert({\n    first: 'Shayne',\n    last: 'Boyer',\n    twitter: '@spboyer',\n    title: 'Developer Guy',\n    blog: 'tattoocoder.com'\n});\n\ndb.speakers.insert({\n    first: 'Scott',\n    last: 'Hanselman',\n    twitter: '@shanselman',\n    title: 'Teacher Blogger Guy',\n    blog: 'hanselman.com'\n});\n\ndb.speakers.insert({\n    first: 'John',\n    last: 'Papa',\n    twitter: '@john_papa',\n    title: 'JavaScript Angular Guy',\n    blog: 'johnpapa.net'\n});\n\ndb.speakers.insert({\n    first: 'Mads',\n    last: 'Kristensen',\n    twitter: '@mkristensen',\n    title: 'Web Essentials Guy',\n    blog: 'about.me/madskristensen'\n});\n\ndb.speakers.insert({\n    first: 'Damian',\n    last: 'Edwards',\n    twitter: '@DamianEdwards',\n    title: 'ASP.NET Demo Guy',\n    blog: 'damianedwards.wordpress.com'\n});\n\ndb.speakers.insert({\n    first: 'Jon',\n    last: 'Galloway',\n    twitter: '@jongalloway',\n    title: 'ASP.NET Community Guy',\n    blog: 'weblogs.asp.net/jongalloway'\n});\n\n```\n\nThis creates all of the data in the **mongomvc** datastore under the **speakers** collection. You can see the data by querying in terminal or viewing in RoboMongo.\n\n```\n$ db.speakers.find()\n```\n\n![RoboMongo - OSX](/content/images/2015/01/Screen-Shot-2015-01-16-at-12-55-15-PM.png)\n\n###Adding the Model\nAdd the **Models** folder under the root, and a **Speaker.cs** file. \n\n> using the yeoman generator **generator-aspnet** you can add a class with \n\n>`$ yo aspnet:Class Speaker`\n\n```language-charp\n    public class Speaker\n    {\n        public ObjectId Id { get; set; }\n\n        [BsonElement(\"first\")]\n        public string First { get; set; }\n\n        [BsonElement(\"last\")]\n        public string Last { get; set; }\n\n        [BsonElement(\"twitter\")]\n        public string Twitter { get; set; }\n\n        [BsonElement(\"title\")]\n        public string Title { get; set; }\n\n        [BsonElement(\"blog\")]\n        public string Blog { get; set; }\n\n    }\n```\n\nA few things to point out in this class is the attribute annotations\n```\n[BsonElement(\"first\")]\n```\nThese are neccessary for the binding because the mongo nuget package binding serialization is case sensitive.\n\n###Adding the Repository\nAdd the **SpeakerRepository.cs** class, in this case just under the root.\n\n> using the yeoman generator **generator-aspnet** you can add a class with \n\n>`$ yo aspnet:Class SpeakerRepository`\n\nThe interface is simple\n\n```language-csharp\npublic interface ISpeakerRespository\n{\n\tIEnumerable<Speaker> AllSpeakers();\n\n\tSpeaker GetById(ObjectId id);\n\n\tvoid Add(Speaker speaker);\n\n\tvoid Update(Speaker speaker);\n\n\tbool Remove(ObjectId id);\n}\n```\n\nAnd implement the interface.  In the constructor, we'll take advantage of DI and get the **Settings** class that contains the connection information for the MongoDB instance. This is accessed from  IOptions<T>\n\n```language-csharp\npublic SpeakerRepository(IOptions<Settings> settings)\n{\n\t_settings = settings.Options;\n    _database = Connect();\n}\n```\n\nHere is the complete class implementation.\n\n```language-csharp\npublic class SpeakerRepository : ISpeakerRespository\n{\n  private readonly Settings _settings;\n  private readonly MongoDatabase _database;\n  \n  public SpeakerRepository(IOptions<Settings> settings)\n  {\n    _settings = settings.Options;\n    _database = Connect();\n  }\n\n  public void Add(Speaker speaker)\n  {\n  \t_database.GetCollection<Speaker>(\"speakers\").Save(speaker);\n  }\n\n  public IEnumerable<Speaker> AllSpeakers()\n  {\n    var speakers = _database.GetCollection<Speaker>(\"speakers\").FindAll();\n    return speakers;\n  }\n\n  public Speaker GetById(ObjectId id)\n  {\n    var query = Query<Speaker>.EQ(e => e.Id, id);\n    var speaker = _database.GetCollection<Speaker>(\"speakers\").FindOne(query);\n\n    return speaker;\n  }\n\n  public bool Remove(ObjectId id)\n  {\n    var query = Query<Speaker>.EQ(e => e.Id, id);\n    var result = _database.GetCollection<Speaker>(\"speakers\").Remove(query);\n\n    return GetById(id) == null;\n  }\n\n  public void Update(Speaker speaker)\n  {\n    var query = Query<Speaker>.EQ(e => e.Id, speaker.Id);\n    var update = Update<Speaker>.Replace(speaker); // update modifiers\n    _database.GetCollection<Speaker>(\"speakers\").Update(query, update);\n  }\n\n  private MongoDatabase Connect()\n  {\n    var client = new MongoClient(_settings.MongoConnection);\n    var server = client.GetServer();\n    var database = server.GetDatabase(_settings.Database);\n\n    return database;\n  }\n}\n```\n\n#####Add the SpeakerRepository to ServiceCollection\nOpen **Startup.cs** and add the following to the **ConfigureServices()** method to setup the ISpeakerRepository for DI so it can be injected into the SpeakerController.\n\n```language-charp\nservices.AddSingleton<ISpeakerRespository, SpeakerRepository>();\n```\n\n> options on Dependency Injection\n\n> * .AddTransient - whenever I ask for it give me a new one\n> * .AddLifetime - scoped to the current request, regardless of how many times it's asked for\n> * .AddSingleton - one ever\n\n###Adding the Controller\nAdd the **Controllers** folder under the root, and the add a MVC Controller named **SpeakerController.cs**\n\n> using the yeoman generator **generator-aspnet** you can add a MVC Controller with \n\n> `$ yo aspnet:MvcController SpeakerController`\n\nIn the constructor, add the ISpeakerRepository so we have access to the datastore calls.\n\n```language-csharp\nreadonly ISpeakerRespository _speakerRepository;\npublic SpeakerController(ISpeakerRespository speakerRepository)\n{\n\t_speakerRepository = speakerRepository;\n}\n```\n\nAdd a default GET to return all of the speakers\n```language-csharp\n[HttpGet]\npublic IEnumerable<Speaker> GetAll()\n{\n\tvar speakers = _speakerRepository.AllSpeakers();\n\treturn speakers;\n}\n```\n\nAdd a GET to return a specific speaker.  In this case the ObjectId string, the default key from MongoDB, is used. As such as route constraint is added to validate the length of the string being passed. **{id:length(24)}** and a *RouteName* is added so we can call this by route by name using **Url.RouteUrl()**.\n```language-csharp\n[HttpGet(\"{id:length(24)}\", Name = \"GetByIdRoute\")]\npublic IActionResult GetById(string id)\n{\n\tvar item = _speakerRepository.GetById(new ObjectId(id));\n\tif (item == null)\n\t{\n\t\treturn HttpNotFound();\n\t}\n\n\treturn new ObjectResult(item);\n}\n```\n\nAdd a Create method, with a **[FromBody]** attribute on the argument to indicate that the object should be serialized from the body of the message.\n\n```language-csharp\n[HttpPost]\npublic void CreateSpeaker([FromBody] Speaker speaker)\n{\n  if (!ModelState.IsValid)\n  {\n  \tContext.Response.StatusCode = 400;\n  }\n  else\n  {\n  \t_speakerRepository.Add(speaker);\n\n  \tstring url = Url.RouteUrl(\"GetByIdRoute\", new { id = speaker.Id.ToString() }, Request.Scheme, Request.Host.ToUriComponent());\n  \tContext.Response.StatusCode = 201;\n  \tContext.Response.Headers[\"Location\"] = url;\n  }\n}\n```\n\nFinally, the Delete to round out the repository functions.\n\n```language-csharp\n[HttpDelete(\"{id:length(24)}\")]\npublic IActionResult DeleteSpeaker(string id)\n{\n  if (_speakerRepository.Remove(new ObjectId(id)))\n  {\n  \treturn new HttpStatusCodeResult(204); // 204 No Content\n  }\n  else\n  {\n  \treturn HttpNotFound();\n  }\n}\n```\n\n###Testing\nSome Various tools are available for testing HTTP services.  [Fiddler](http://www.telerik.com/fiddler) from [Telerik](http://telerik.com) is a favorite if you are on Windows, I also like the [Postman Chrome Add-in](https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm?hl=en). I happen to like either, Postman saves the urls you hit which is nice when are testing over and over or complex endpoints.\n\nSo, if you run the application now you can use the tool of your choice and hit the endpoint: \n\n* `k web` - http://localhost:5001/api/speaker \n* `k kestrel` - http://localhost:5004/api/speaker\n* Visual Studio - http://localost:[randomPort]/api/speaker\n\n![postman GET](/content/images/2015/01/Screen-Shot-2015-01-16-at-1-53-59-PM.png)\n\n\nSelect a specifid \"Id\" and add it the url, i.e.\n\nhttp://localhost:5004/api/speaker/54b7d51140c10266ffa3b04d and a single item is returned.\n\n```language-javascript\n{\n    \"Id\": \"54b7d51140c10266ffa3b04d\",\n    \"First\": \"Shayne\",\n    \"Last\": \"Boyer\",\n    \"Twitter\": \"@spboyer\",\n    \"Title\": \"Developer Guy\",\n    \"Blog\": \"tattoocoder.com\"\n}\n```\n\nto test a POST or the Create endpoint, change the drop down to POST, select the RAW option and add the following data.\n\nAlso add the **Content-Type: application/json** header.\n\n```language-javascript\n{\n    \"First\": \"Sayed\",\n    \"Last\": \"Hashimi\",\n    \"Twitter\": \"@sayedihashimi\",\n    \"Title\": \"MSBuild Guy\",\n    \"Blog\": \"sedodream.com\"\n}\n```\n\n![Postman POST](/content/images/2015/01/Screen-Shot-2015-01-16-at-2-09-16-PM.png)\n\nAfter executing the POST you can either query the /speaker endpoint or look directly in the datastore and see the new speaker inserted.\n\n![RoboMongo Windows](/content/images/2015/01/Screen-Shot-2015-01-16-at-2-13-28-PM.png)\n\nFull source for this example is available on GitHub -> http://github.com/spboyer/mongomvc\n\n\n###Resources\n[C# and .NET MongoDB Driver](http://docs.mongodb.org/ecosystem/drivers/csharp/) - (docs.mongodb.org)\n\n[Content Negotiation in MVC 5 or How Can I Just Write JSON](http://blogs.msdn.com/b/webdev/archive/2014/11/24/content-negotiation-in-mvc-5-or-how-can-i-just-write-json.aspx) - (blogs.msdn.com)\n\n[ASP.NET Yeoman Generator Project Scaffolding](http://www.tattoocoder.com/asp-net-vnext-project-creation-using-yeoman/) - (tattoocoder.com)\n\n[ASP.NET](http://asp.net) - (asp.net)\n\n[ASP.NET Github](http://github.com/aspnet/home) - (github.com/aspnet/home)\n","html":"<p>This is a quick walkthrough on using ASP.NET 5 to build a Web API layer using MongoDB. The overall concept is not too dissimilar from previous examples you may have seen using <strong>X</strong> type of database, however there are some areas covered that are either new in MVC 6 that you may find you didn't know are there. </p>\n\n<h4 id=\"topicscovered\">Topics Covered</h4>\n\n<ul>\n<li>ConfigurationModel\n<ul><li>config.json</li>\n<li>Environment Variables</li></ul></li>\n<li>OptionsModel</li>\n<li>Dependency Injection (IServiceCollection)</li>\n<li>Forcing JSON or Removing XML Formatter, Content Negotiation</li>\n<li>MongoDB\n<ul><li>Installation (OSX &amp; Windows)</li>\n<li>mongocsharpdriver (nuget package)</li></ul></li>\n<li>Testing endpoints w/ Postman or Fiddler</li>\n</ul>\n\n<h3 id=\"projectcreation\">Project Creation</h3>\n\n<p>Depending on your environment (Windows or OS X) or preference you have a choice on how you can create the ASP.NET project.  </p>\n\n<h6 id=\"visualstudio2015preview\">Visual Studio 2015 Preview</h6>\n\n<p>Launch Visual Studio 2015 Preview and <strong>File</strong> > <strong>New Project</strong> > <strong>Web</strong> > <strong>ASP.NET 5 Empty</strong>. <br />\n<img src=\"/content/images/2015/01/Screen-Shot-2015-01-15-at-11-36-29-AM.png\" alt=\"New Project Dialog\" /></p>\n\n<h5 id=\"aspnetyeomanprojectgenerator\">ASP.NET Yeoman Project Generator</h5>\n\n<p>(<a href=\"http://www.tattoocoder.com/asp-net-vnext-project-creation-using-yeoman/\">see walkthrough here</a>) - note that the MVC Project is the best choice for this example, there is not an \"Empty\" template.</p>\n\n<pre><code>$ yo aspnet\n\n     _-----_\n    |       |    .--------------------------.\n    |--(o)--|    |      Welcome to the      |\n   `---------´   |   marvellous ASP.NET 5   |\n    ( _´U`_ )    |        generator!        |\n    /___A___\\    '--------------------------'\n     |  ~  |     \n   __'.___.'__   \n ´   `  |° ´ Y ` \n\n? What type of application do you want to create? MVC Application\n? What's the name of your ASP.NET application? (MvcApplication) mongomvc\n</code></pre>\n\n<h3 id=\"settingupthedependencies\">Setting up the dependencies</h3>\n\n<p>Open the <strong>project.json</strong> file and add the following to the dependencies node.</p>\n\n<pre><code class=\"language-javascript\">\"dependencies\": {  \n        \"Microsoft.AspNet.Server.IIS\":\"1.0.0-beta1\",\n        \"Microsoft.AspNet.Mvc\": \"6.0.0-beta1\",\n        \"Microsoft.AspNet.Hosting\": \"1.0.0-beta1\",\n        \"Microsoft.AspNet.Diagnostics\": \"1.0.0-beta1\",\n        \"Microsoft.AspNet.Server.WebListener\": \"1.0.0-beta1\",\n        \"Microsoft.Framework.ConfigurationModel.Json\": \"1.0.0-beta1\",\n        \"Kestrel\": \"1.0.0-beta1\",\n        \"mongocsharpdriver\": \"1.8.3\"\n    }\n</code></pre>\n\n<ul>\n<li><strong>Microsoft.AspNet.Server.IIS</strong> : Server Implemenation for ASP.NET 5</li>\n<li><strong>Microsoft.AspNet.Hosting</strong> : Core hosting infrastructure for ASP.NET 5</li>\n<li><strong>Microsoft.AspNet.Diagnostics</strong> : Middleware for error pages, diagnostics etc.</li>\n<li><strong>Microsoft.AspNet.Server.WebListener</strong> : Self host web server</li>\n<li><strong>Microsoft.AspNet.Mvc</strong> : ASP.NET MVC Framework</li>\n<li><strong>Microsoft.Framework.ConfigurationModel.Json</strong> : JSON configuration source for the ConfigurationModel</li>\n<li><strong>Kestrel</strong> : Server for hosting on OS X, Linux</li>\n<li><strong>mongocsharpdriver</strong> : MongoDB Driver</li>\n</ul>\n\n<p>Each of these should be self explanatory with the exception of maybe the <strong>ConfigurationModel.Json</strong> package, which will be covered when we get into the settings portion of the walkthrough.</p>\n\n<p>Once you save the file, in Visual Studio, the packages will be restored from nuget.  If you are using a non Visual Studio editor, then execute <code>kpm restore</code> from the command line to get the packages.</p>\n\n<h3 id=\"startupcs\">Startup.cs</h3>\n\n<p>Startup.cs is the entry point for your application; this is where the configuration, services, dependency injectection etc. is configured.</p>\n\n<p>In the following snippet, the <code>ConfigureServices</code> method is used to add our services into the pipleline and expose the <code>IServiceCollection</code> for dependeny injection. It also sets the <code>Configure</code> method to tell the app which services in the pipeline to use on start.</p>\n\n<pre><code class=\"language-csharp\">public class Startup  \n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddMvc();\n    }\n\n    public void Configure(IApplicationBuilder app)\n    {\n        app.UseMvc();\n        app.UseWelcomePage();\n    }\n}\n</code></pre>\n\n<p>At this point you can <code>F5</code> (VS2015), <code>k web</code> (Win) or <code>k kestrel</code> (Linux or OSX) to run the app and see the Welcome Page.</p>\n\n<p><img src=\"/content/images/2015/01/aspnet_welcompage.png\" alt=\"Welcome Page\" /></p>\n\n<p>Let's add a few items to this to round out the bootstrapping of the application.</p>\n\n<p><strong>Remove XML Formatters</strong> - if you have done any ASP.NET Web API development in the past, the format of the output is dependant on the <code>Content-Type</code> header that is passed when a GET request is made.  By default the response type will be JSON, however if the client send <code>application/xml</code> that is what will be returned.  You can force JSON results for all returns by adding the following to the <code>ConfigureServices()</code> method:</p>\n\n<pre><code class=\"language-csharp\"> services.Configure&lt;MvcOptions&gt;(options =&gt;\n                                     options\n                                     .OutputFormatters\n                                     .RemoveAll(formatter =&gt; formatter.Instance is XmlDataContractSerializerOutputFormatter)\n                                           );\n</code></pre>\n\n<p>If you wish to control this at a more finite level, please see <a href=\"http://blogs.msdn.com/b/webdev/archive/2014/11/24/content-negotiation-in-mvc-5-or-how-can-i-just-write-json.aspx\">Content Negotiation in MVC 5 or How Can I Just Write JSON</a></p>\n\n<h3 id=\"configuration\">Configuration</h3>\n\n<p>Gone are the days of web.config, XML transforms for deploying to environments.  Now, as with many things in ASP.NET \"vNext, you get more choice.  </p>\n\n<p>There are multiple file formats supported; XML, JSON, and INI are all supported out of the box. The other option is Environment variables, a characteristic of node.js as well as other frameworks.  </p>\n\n<p>Here is an example of how you can use the new ConfigurationModel to take advantage of the new confuration files.</p>\n\n<pre><code>config.json  \n{\n    \"key\" : \"value\"\n}\n\nconfig.ini  \nkey = value\n\nconfig.xml  \n&lt;key&gt;  \n    &lt;value&gt;value&lt;/value&gt;\n&lt;/key&gt;\n</code></pre>\n\n<p>Environment variables in Azure <br />\n<img src=\"/content/images/2015/01/Screen-Shot-2015-01-16-at-10-34-34-AM.png\" alt=\"Azure Env Variables\" /></p>\n\n<pre><code class=\"language-csharp\">public void Configure(IApplicationBuilder app)  \n    {\n        // Setup configuration sources\n        var configuration = new Configuration();\n        configuration.AddJsonFile(“config.json”);\n        configuration.AddIniFile(“config.ini”);\n        configuration.AddXmlFile(“config.xml”);\n        configuration.AddEnvironmentVariables();\n\n        // …\n    }\n</code></pre>\n\n<p>Accessing the values  </p>\n\n<pre><code class=\"language-csharp\">var configuration = new Configuration();  \nconfiguration.AddJsonFile(\"config.json);  \nconfiguration.Get(\"key\");  \n</code></pre>\n\n<p>A couple notes concerning configuration:</p>\n\n<ul>\n<li>order matters, last one wins</li>\n<li>not just a key/value pair. Complex structures supported</li>\n</ul>\n\n<p>So how does this apply to this project? Let's add it to the <strong>Startup.cs</strong>.</p>\n\n<p>Add the following to constructor</p>\n\n<pre><code class=\"language-csharp\">public Startup()  \n{\n    Configuration = new Configuration()\n        .AddJsonFile(\"config.json\")\n        .AddEnvironmentVariables();\n}\n</code></pre>\n\n<p>Next, add the <code>IConfiguration</code> interface so we can take advantage of DI </p>\n\n<pre><code class=\"language-csharp\">public IConfiguration Configuration { get; set; }  \n</code></pre>\n\n<p>Another new item we have is the the IOptions interface which allows us to bind the configuration file to a class. This is available in the Microsoft.Framework.OptionsModel namespace. Given that, let's create a new class call <strong>Settings.cs</strong> to hold the values from the config.json file we'll be creating shortly.</p>\n\n<pre><code class=\"language-csharp\">public class Settings  \n{\n    public string Database { get; set; }\n    public string MongoConnection { get; set; }\n}\n</code></pre>\n\n<p>now create the <strong>config.json</strong> file</p>\n\n<pre><code class=\"language-javascript\">{\n    \"mongoconnection\": \"mongodb://localhost:27017\",\n    \"database\":  \"mongomvc\"\n}\n</code></pre>\n\n<p>Now, add the code to the <strong>ConfigureServices()</strong> method</p>\n\n<p>First, change the services.AddMvc() to include our configuration  </p>\n\n<pre><code class=\"language-csharp\">services.addMvc(Configuration)  \n</code></pre>\n\n<p>now add this line to configure the settings to be configured and bind based on the configuration  </p>\n\n<pre><code class=\"language-csharp\">services.Configure&lt;Settings&gt;(Configuration);  \n</code></pre>\n\n<p>Now that the application is bootstrapped for Configuration, Dependency Injection, JSON formatting; let's get the datastore setup in MongoDB and then we'll come back to round out the app with the Controller, Model and DataRepository.</p>\n\n<h3 id=\"mongodb\">MongoDB</h3>\n\n<p>There are a few reasons I chose MongoDB for this example. </p>\n\n<ul>\n<li>its a popular NoSQL datastore</li>\n<li>has a nuget package for C#</li>\n<li>supported on Azure</li>\n<li>equal tooling support on OSX and Windows.</li>\n</ul>\n\n<h4 id=\"installation\">Installation</h4>\n\n<p>Installation is a breeze.  If you are on OSX you can use HomeBrew to install by executing <code>$ brew install mongodb</code>, and if you are using Windows I would highly suggest using <a href=\"https://chocolatey.org/\">Chocolately</a> to do the installation. Chocolately installs MongoDB, the shell and the Windows service and is equivalent to the OSX install with HomeBrew. </p>\n\n<pre><code>&gt; choco install mongodb\n</code></pre>\n\n<h4 id=\"tools\">Tools</h4>\n\n<p>If you prefer GUI interfaces, the best one I have found is <a href=\"http://robomongo.org/\">RoboMongo</a>. It is cross platform and provides a great way to explore your collections. You can also connect to you local stores as well as remote stores such as <a href=\"http://mongolab.com\">MongoLab</a>(Azure provider).</p>\n\n<h4 id=\"testdata\">Test Data</h4>\n\n<p>Once you have installed MongoDB, open terminal and connect to the database by the following command</p>\n\n<pre><code>$ mongo mongomvc\n</code></pre>\n\n<p><strong>mongo</strong> starts the terminal command, and the second paramter connects or creates the store. Next copy and paste the test data into the terminal and hit enter.</p>\n\n<pre><code>db.speakers.insert({  \n    first: 'Shayne',\n    last: 'Boyer',\n    twitter: '@spboyer',\n    title: 'Developer Guy',\n    blog: 'tattoocoder.com'\n});\n\ndb.speakers.insert({  \n    first: 'Scott',\n    last: 'Hanselman',\n    twitter: '@shanselman',\n    title: 'Teacher Blogger Guy',\n    blog: 'hanselman.com'\n});\n\ndb.speakers.insert({  \n    first: 'John',\n    last: 'Papa',\n    twitter: '@john_papa',\n    title: 'JavaScript Angular Guy',\n    blog: 'johnpapa.net'\n});\n\ndb.speakers.insert({  \n    first: 'Mads',\n    last: 'Kristensen',\n    twitter: '@mkristensen',\n    title: 'Web Essentials Guy',\n    blog: 'about.me/madskristensen'\n});\n\ndb.speakers.insert({  \n    first: 'Damian',\n    last: 'Edwards',\n    twitter: '@DamianEdwards',\n    title: 'ASP.NET Demo Guy',\n    blog: 'damianedwards.wordpress.com'\n});\n\ndb.speakers.insert({  \n    first: 'Jon',\n    last: 'Galloway',\n    twitter: '@jongalloway',\n    title: 'ASP.NET Community Guy',\n    blog: 'weblogs.asp.net/jongalloway'\n});\n</code></pre>\n\n<p>This creates all of the data in the <strong>mongomvc</strong> datastore under the <strong>speakers</strong> collection. You can see the data by querying in terminal or viewing in RoboMongo.</p>\n\n<pre><code>$ db.speakers.find()\n</code></pre>\n\n<p><img src=\"/content/images/2015/01/Screen-Shot-2015-01-16-at-12-55-15-PM.png\" alt=\"RoboMongo - OSX\" /></p>\n\n<h3 id=\"addingthemodel\">Adding the Model</h3>\n\n<p>Add the <strong>Models</strong> folder under the root, and a <strong>Speaker.cs</strong> file. </p>\n\n<blockquote>\n  <p>using the yeoman generator <strong>generator-aspnet</strong> you can add a class with </p>\n  \n  <p><code>$ yo aspnet:Class Speaker</code></p>\n</blockquote>\n\n<pre><code class=\"language-charp\">    public class Speaker\n    {\n        public ObjectId Id { get; set; }\n\n        [BsonElement(\"first\")]\n        public string First { get; set; }\n\n        [BsonElement(\"last\")]\n        public string Last { get; set; }\n\n        [BsonElement(\"twitter\")]\n        public string Twitter { get; set; }\n\n        [BsonElement(\"title\")]\n        public string Title { get; set; }\n\n        [BsonElement(\"blog\")]\n        public string Blog { get; set; }\n\n    }\n</code></pre>\n\n<p>A few things to point out in this class is the attribute annotations  </p>\n\n<pre><code>[BsonElement(\"first\")]\n</code></pre>\n\n<p>These are neccessary for the binding because the mongo nuget package binding serialization is case sensitive.</p>\n\n<h3 id=\"addingtherepository\">Adding the Repository</h3>\n\n<p>Add the <strong>SpeakerRepository.cs</strong> class, in this case just under the root.</p>\n\n<blockquote>\n  <p>using the yeoman generator <strong>generator-aspnet</strong> you can add a class with </p>\n  \n  <p><code>$ yo aspnet:Class SpeakerRepository</code></p>\n</blockquote>\n\n<p>The interface is simple</p>\n\n<pre><code class=\"language-csharp\">public interface ISpeakerRespository  \n{\n    IEnumerable&lt;Speaker&gt; AllSpeakers();\n\n    Speaker GetById(ObjectId id);\n\n    void Add(Speaker speaker);\n\n    void Update(Speaker speaker);\n\n    bool Remove(ObjectId id);\n}\n</code></pre>\n\n<p>And implement the interface.  In the constructor, we'll take advantage of DI and get the <strong>Settings</strong> class that contains the connection information for the MongoDB instance. This is accessed from  IOptions<T></p>\n\n<pre><code class=\"language-csharp\">public SpeakerRepository(IOptions&lt;Settings&gt; settings)  \n{\n    _settings = settings.Options;\n    _database = Connect();\n}\n</code></pre>\n\n<p>Here is the complete class implementation.</p>\n\n<pre><code class=\"language-csharp\">public class SpeakerRepository : ISpeakerRespository  \n{\n  private readonly Settings _settings;\n  private readonly MongoDatabase _database;\n\n  public SpeakerRepository(IOptions&lt;Settings&gt; settings)\n  {\n    _settings = settings.Options;\n    _database = Connect();\n  }\n\n  public void Add(Speaker speaker)\n  {\n      _database.GetCollection&lt;Speaker&gt;(\"speakers\").Save(speaker);\n  }\n\n  public IEnumerable&lt;Speaker&gt; AllSpeakers()\n  {\n    var speakers = _database.GetCollection&lt;Speaker&gt;(\"speakers\").FindAll();\n    return speakers;\n  }\n\n  public Speaker GetById(ObjectId id)\n  {\n    var query = Query&lt;Speaker&gt;.EQ(e =&gt; e.Id, id);\n    var speaker = _database.GetCollection&lt;Speaker&gt;(\"speakers\").FindOne(query);\n\n    return speaker;\n  }\n\n  public bool Remove(ObjectId id)\n  {\n    var query = Query&lt;Speaker&gt;.EQ(e =&gt; e.Id, id);\n    var result = _database.GetCollection&lt;Speaker&gt;(\"speakers\").Remove(query);\n\n    return GetById(id) == null;\n  }\n\n  public void Update(Speaker speaker)\n  {\n    var query = Query&lt;Speaker&gt;.EQ(e =&gt; e.Id, speaker.Id);\n    var update = Update&lt;Speaker&gt;.Replace(speaker); // update modifiers\n    _database.GetCollection&lt;Speaker&gt;(\"speakers\").Update(query, update);\n  }\n\n  private MongoDatabase Connect()\n  {\n    var client = new MongoClient(_settings.MongoConnection);\n    var server = client.GetServer();\n    var database = server.GetDatabase(_settings.Database);\n\n    return database;\n  }\n}\n</code></pre>\n\n<h5 id=\"addthespeakerrepositorytoservicecollection\">Add the SpeakerRepository to ServiceCollection</h5>\n\n<p>Open <strong>Startup.cs</strong> and add the following to the <strong>ConfigureServices()</strong> method to setup the ISpeakerRepository for DI so it can be injected into the SpeakerController.</p>\n\n<pre><code class=\"language-charp\">services.AddSingleton&lt;ISpeakerRespository, SpeakerRepository&gt;();  \n</code></pre>\n\n<blockquote>\n  <p>options on Dependency Injection</p>\n  \n  <ul>\n  <li>.AddTransient - whenever I ask for it give me a new one</li>\n  <li>.AddLifetime - scoped to the current request, regardless of how many times it's asked for</li>\n  <li>.AddSingleton - one ever</li>\n  </ul>\n</blockquote>\n\n<h3 id=\"addingthecontroller\">Adding the Controller</h3>\n\n<p>Add the <strong>Controllers</strong> folder under the root, and the add a MVC Controller named <strong>SpeakerController.cs</strong></p>\n\n<blockquote>\n  <p>using the yeoman generator <strong>generator-aspnet</strong> you can add a MVC Controller with </p>\n  \n  <p><code>$ yo aspnet:MvcController SpeakerController</code></p>\n</blockquote>\n\n<p>In the constructor, add the ISpeakerRepository so we have access to the datastore calls.</p>\n\n<pre><code class=\"language-csharp\">readonly ISpeakerRespository _speakerRepository;  \npublic SpeakerController(ISpeakerRespository speakerRepository)  \n{\n    _speakerRepository = speakerRepository;\n}\n</code></pre>\n\n<p>Add a default GET to return all of the speakers  </p>\n\n<pre><code class=\"language-csharp\">[HttpGet]\npublic IEnumerable&lt;Speaker&gt; GetAll()  \n{\n    var speakers = _speakerRepository.AllSpeakers();\n    return speakers;\n}\n</code></pre>\n\n<p>Add a GET to return a specific speaker.  In this case the ObjectId string, the default key from MongoDB, is used. As such as route constraint is added to validate the length of the string being passed. <strong>{id:length(24)}</strong> and a <em>RouteName</em> is added so we can call this by route by name using <strong>Url.RouteUrl()</strong>.  </p>\n\n<pre><code class=\"language-csharp\">[HttpGet(\"{id:length(24)}\", Name = \"GetByIdRoute\")]\npublic IActionResult GetById(string id)  \n{\n    var item = _speakerRepository.GetById(new ObjectId(id));\n    if (item == null)\n    {\n        return HttpNotFound();\n    }\n\n    return new ObjectResult(item);\n}\n</code></pre>\n\n<p>Add a Create method, with a <strong>[FromBody]</strong> attribute on the argument to indicate that the object should be serialized from the body of the message.</p>\n\n<pre><code class=\"language-csharp\">[HttpPost]\npublic void CreateSpeaker([FromBody] Speaker speaker)  \n{\n  if (!ModelState.IsValid)\n  {\n      Context.Response.StatusCode = 400;\n  }\n  else\n  {\n      _speakerRepository.Add(speaker);\n\n      string url = Url.RouteUrl(\"GetByIdRoute\", new { id = speaker.Id.ToString() }, Request.Scheme, Request.Host.ToUriComponent());\n      Context.Response.StatusCode = 201;\n      Context.Response.Headers[\"Location\"] = url;\n  }\n}\n</code></pre>\n\n<p>Finally, the Delete to round out the repository functions.</p>\n\n<pre><code class=\"language-csharp\">[HttpDelete(\"{id:length(24)}\")]\npublic IActionResult DeleteSpeaker(string id)  \n{\n  if (_speakerRepository.Remove(new ObjectId(id)))\n  {\n      return new HttpStatusCodeResult(204); // 204 No Content\n  }\n  else\n  {\n      return HttpNotFound();\n  }\n}\n</code></pre>\n\n<h3 id=\"testing\">Testing</h3>\n\n<p>Some Various tools are available for testing HTTP services.  <a href=\"http://www.telerik.com/fiddler\">Fiddler</a> from <a href=\"http://telerik.com\">Telerik</a> is a favorite if you are on Windows, I also like the <a href=\"https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm?hl=en\">Postman Chrome Add-in</a>. I happen to like either, Postman saves the urls you hit which is nice when are testing over and over or complex endpoints.</p>\n\n<p>So, if you run the application now you can use the tool of your choice and hit the endpoint: </p>\n\n<ul>\n<li><code>k web</code> - <a href='http://localhost:5001/api/speaker'>http://localhost:5001/api/speaker</a> </li>\n<li><code>k kestrel</code> - <a href='http://localhost:5004/api/speaker'>http://localhost:5004/api/speaker</a></li>\n<li>Visual Studio - <a href='http://localost:[randomPort]/api/speaker'>http://localost:[randomPort]/api/speaker</a></li>\n</ul>\n\n<p><img src=\"/content/images/2015/01/Screen-Shot-2015-01-16-at-1-53-59-PM.png\" alt=\"postman GET\" /></p>\n\n<p>Select a specifid \"Id\" and add it the url, i.e.</p>\n\n<p><a href='http://localhost:5004/api/speaker/54b7d51140c10266ffa3b04d'>http://localhost:5004/api/speaker/54b7d51140c10266ffa3b04d</a> and a single item is returned.</p>\n\n<pre><code class=\"language-javascript\">{\n    \"Id\": \"54b7d51140c10266ffa3b04d\",\n    \"First\": \"Shayne\",\n    \"Last\": \"Boyer\",\n    \"Twitter\": \"@spboyer\",\n    \"Title\": \"Developer Guy\",\n    \"Blog\": \"tattoocoder.com\"\n}\n</code></pre>\n\n<p>to test a POST or the Create endpoint, change the drop down to POST, select the RAW option and add the following data.</p>\n\n<p>Also add the <strong>Content-Type: application/json</strong> header.</p>\n\n<pre><code class=\"language-javascript\">{\n    \"First\": \"Sayed\",\n    \"Last\": \"Hashimi\",\n    \"Twitter\": \"@sayedihashimi\",\n    \"Title\": \"MSBuild Guy\",\n    \"Blog\": \"sedodream.com\"\n}\n</code></pre>\n\n<p><img src=\"/content/images/2015/01/Screen-Shot-2015-01-16-at-2-09-16-PM.png\" alt=\"Postman POST\" /></p>\n\n<p>After executing the POST you can either query the /speaker endpoint or look directly in the datastore and see the new speaker inserted.</p>\n\n<p><img src=\"/content/images/2015/01/Screen-Shot-2015-01-16-at-2-13-28-PM.png\" alt=\"RoboMongo Windows\" /></p>\n\n<p>Full source for this example is available on GitHub -> <a href='http://github.com/spboyer/mongomvc'>http://github.com/spboyer/mongomvc</a></p>\n\n<h3 id=\"resources\">Resources</h3>\n\n<p><a href=\"http://docs.mongodb.org/ecosystem/drivers/csharp/\">C# and .NET MongoDB Driver</a> - (docs.mongodb.org)</p>\n\n<p><a href=\"http://blogs.msdn.com/b/webdev/archive/2014/11/24/content-negotiation-in-mvc-5-or-how-can-i-just-write-json.aspx\">Content Negotiation in MVC 5 or How Can I Just Write JSON</a> - (blogs.msdn.com)</p>\n\n<p><a href=\"http://www.tattoocoder.com/asp-net-vnext-project-creation-using-yeoman/\">ASP.NET Yeoman Generator Project Scaffolding</a> - (tattoocoder.com)</p>\n\n<p><a href=\"http://asp.net\">ASP.NET</a> - (asp.net)</p>\n\n<p><a href=\"http://github.com/aspnet/home\">ASP.NET Github</a> - (github.com/aspnet/home)</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1420923098452,"created_by":1,"updated_at":1421436160721,"updated_by":1,"published_at":1421436160721,"published_by":1},{"id":51,"uuid":"935bc9c3-6066-4472-9cce-51df158759c2","title":"ASP.NET 5 - wwwroot folder optional","slug":"wwwroot-folder-optional","markdown":"#####Updated - 1.30.2014\nAfter looking at the kpm pack or publishing step of this solution, there is an undesired affect. \n\nAll of the folders in the root, now that this is the folder we are working in, will be published to the destination folders. Being approot & wwwroot (yes this is still created), this includes the bower_components, nodee_modules, your API code etc.  Although IIS will keep you from browsing to the *.cs and other extensions for security sake, it is still not a clean solution.\n\nI have updated the [dev branch of the git repository](https://github.com/spboyer/nowwwroot) where wwwroot is put back in, and the gulpfile.js task called `optimize` now will publish the necessary files to this folder on the `prepare` step. `prepare` happens during project start, build, and publish.\n<hr/>\n\nI have been a long time user of Visual Studio in a Windows world; however over the last few years a migration to a full time OSX user and non Visual Studio development has been the path for me and most of my colleagues. \n\nGiven the news of cross platform support for ASP.NET and IDE of my choice put a pep in my step, but being bootstrapped to a specific folder structure didn't seem very xplat IDE friendly.\n\nThe new structure in ASP.NET 5, by default, includes the wwwroot folder where the static or non compiled code such as html, css, scripts etc will live. Your compiled code will now be packaged in nuget packages (.nupkg) within the /approot folder and each targeted framework will have its own nupkg.\n\nDepending on your project team(s), the tools used the new structure may or may no cause issue with the move that is being made to the community standards such as grunt, gulp, bower, npm etc.\n\n####A Quick Example\nThe default File -> New Project -> ASP.NET 5 Empty Project presents the following solution structure in Visual Studio.\n\n![new project structure](/content/images/2015/01/Screen-Shot-2015-01-29-at-1-53-18-PM.png)\n\nThe next step is to add the bower.json file for me to get the CSS and JavaScript libraries to work with such as Angular and Bootstrap.\n\nbower.json file\n```language-javascript\n\n{\n\t\"name\": \"NewASP5Project\",\n\t\"private\": true,\n\t\"dependencies\": {\n\t\t\"angular\": \"~1.3.11\",\n\t\t\"bootstrap\": \"~3.3.2\"\n\t},\n    \"exportsOverride\": {\n    }\n}\n\n```\nThis creates the dependencies and the bower_components (hidden) folder in the same directory as your project.\n\n![after bower](/content/images/2015/01/Screen-Shot-2015-01-29-at-2-03-03-PM.png)\n\nMost examples you've probably seen to this point would invlove adding a grunt file which would then **copy** the necessary bower resources to a ***new*** folder under wwwroot, something like ***/lib***. Then you reference these *.css and *.js resources from the /lib folder in the .html files during development.\n\nThere are of course options in the bower.json file within **exportsOverride** to control what exactly gets copied to the destination folder during the grunt task; such as only getting the minified versions etc.\n\nThere is a full walkthrough of the example on the ASP.NET site here - [Grunt and Bower in Visual Studio 2015](http://www.asp.net/vnext/overview/aspnet-vnext/grunt-and-bower-in-visual-studio-2015).\n\n####So What is the Problem?\nHere are a few items to point out.\n\n* There are duplicate copies of the bower resources\n* The example works for grunt, not gulp\n* wwwroot is unecessary\n\n####Optional?\nIn short, yes.  With a change to project.json you can either remove the *wwroot* folder OR call it *foo* if you like and the application will execute normally.\n\nThis is done by changing the value of `webroot` from `'wwwroot'` to simply `'.'` or `'foo'` depending on your preference.  In this case we are looking to eliminate the folder need and work right from the true root of the project. Look at this example project.json:\n\n```language-javascript\n{\n  \"webroot\": \".\",\n  \"version\": \"1.0.0-*\",\n  \"exclude\": [\n    \"wwwroot\",\n    \"bower_components\"\n  ],\n  \"packExclude\": [\n    \"node_modules\",\n    \"bower_components\",\n    \"**.kproj\",\n    \"**.user\",\n    \"**.vspscc\"\n  ],\n  \"dependencies\": {\n    \"Microsoft.AspNet.Server.IIS\": \"1.0.0-beta2\",\n    \"Microsoft.AspNet.Server.WebListener\": \"1.0.0-beta2\",\n    \"Microsoft.AspNet.StaticFiles\": \"1.0.0-beta2\",\n    \"Microsoft.AspNet.Diagnostics\": \"1.0.0-beta2\",\n    \"Microsoft.AspNet.Mvc\": \"6.0.0-beta2\",\n    \"Kestrel\": \"1.0.0-beta2\",\n    \"Microsoft.CodeAnalysis.CSharp\": \"1.0.0.0-beta2\"\n  },\n  \"commands\": {\n    \"web\": \"Microsoft.AspNet.Hosting --server Microsoft.AspNet.Server.WebListener --server.urls http://localhost:5001\",\n    \"kestrel\": \"Microsoft.AspNet.Hosting --server Kestrel --server.urls http://localhost:5004\"\n  },\n  \"frameworks\": {\n    \"aspnet50\": {},\n    \"aspnetcore50\": {}\n  },\n  \"scripts\": {\n    \"postrestore\": [\n      \"npm install\"\n    ],\n    \"prepare\": [\n      \"gulp prepare\"\n    ]\n  }\n}\n```\n\nThis file sets the webroot to '.', telling the web application that the true root is where we will be executing from. Now when you add bower to the project, the **bower_components** folder is at the same level as your other resources. \n\n>*In Visual Studio you'll have to \"Show All Files\", Right Click and \"Include in Project\". By doing so you can directly reference the resources in the bower_components folder in your html without having to copy duplicates into another folder. However, note that you only really need to do this if you want the nice intellisense when coding, resources will still resolve.*\n\n####But What about deployment?\nRight, you certainly wouldn't deplpoy the bower_components folder to the server.  That's where grunt or gulp helps out and in this example - gulp.\n\n>Check out John Papa's repository - [gulp-patterns](https://github.com/johnpapa/gulp-patterns), and note that there is an upcoming [Pluralsight](http://pluralsight.com/) course associated with this soon!\n\n####Gulp - inject, wiredep and more.\nInstead of typing all of the bower resources into your html, use the gulp plugin called **wiredep**.\n\nIn the html page you insert the following comment tags to indicate where to inject the css and javascript.\n\n```language-html\n<!-- bower:css -->\n\n<!-- endbower -->\n\n<!-- bower:js -->\n\n<!-- endbower -->\n```\n\nThen in your gulpfile.js a task is defined\n```language-javascript\n\nvar wiredep = require('wiredep').stream;\n    var options = config.getWiredepDefaultOptions();\n\n    return gulp\n        .src(config.index)\n        .pipe(wiredep(options))\n        .pipe($.inject(gulp.src(config.js)))\n        .pipe(gulp.dest(config.client));\n\n```\n\nwhen the task is executed, the result is the follwing\n```language-html\n<!-- bower:css -->\n<link rel=\"stylesheet\" href=\"bower_components/bootstrap/dist/css/bootstrap.css\" />\n<link rel=\"stylesheet\" href=\"bower_components/font-awesome/css/font-awesome.css\" />\n<link rel=\"stylesheet\" href=\"bower_components/toastr/toastr.css\" />\n<!-- endbower -->\n\n<!-- bower:js -->\n<script src=\"bower_components/jquery/dist/jquery.js\"></script>\n<script src=\"bower_components/angular/angular.js\"></script>\n<script src=\"bower_components/angular-sanitize/angular-sanitize.js\"></script>\n<script src=\"bower_components/angular-resource/angular-resource.js\"></script>\n<script src=\"bower_components/bootstrap/dist/js/bootstrap.js\"></script>\n<script src=\"bower_components/extras.angular.plus/ngplus-overlay.js\"></script>\n<script src=\"bower_components/moment/moment.js\"></script>\n<script src=\"bower_components/angular-ui-router/release/angular-ui-router.js\"></script>\n<script src=\"bower_components/toastr/toastr.js\"></script>\n<script src=\"bower_components/angular-animate/angular-animate.js\"></script>\n<script src=\"bower_components/html5shiv/dist/html5shiv.js\"></script>\n<script src=\"bower_components/respond/dest/respond.src.js\"></script>\n<!-- endbower -->\n```\n\nFor your own scripts, or non bower resources; **gulp-inject** gives you the same result by using `<!-- inject:cs -->` and `<!-- inject:js -->` respectively.\n\n####Great for Static Stuff, What about my ASP.NET?\nHere is the folder structure of the application:\n![app structure](/content/images/2015/01/Screen-Shot-2015-01-29-at-3-54-31-PM.png)\n\n* /app - Angular.js code\n* /server - .NET API code\n\nApplication can be run from the Debug dropdown and executes in Helios (IIS) and runs the Angular app on index.html calling the API controllers.\n\n####What about cross platform development?\nIn project.json there is a reference to the Kestrel server host for OSX and Linux. You can open the application in Sublime, Brackets, Atom etc.  I happen to use Sublime and Brackets.\n\nUsing Sublime, and the [OmniSharp](http://omnisharp.net) as well Kulture addins; ASP.NET development experience is a breeze.\n\nOpen the project, run `kpm restore` to install all **bower, nuget, and npm** dependencies then run the application using `k kestrel` and browse to **http://localhost:5004** \n\n####Summary\nNo need to have a wwwroot, a duplicated set of resources.  If there is already a set and we have grunt, gulp, npm and bower integration within our ecosystem; let's start using them and reduce the reptative work.  Curious how you are working with the new set of tools, give me your thoughts. \n\n\n####Source\nSource code available here - https://github.com/spboyer/nowwwroot\n\n\n","html":"<h5 id=\"updated1302014\">Updated - 1.30.2014</h5>\n\n<p>After looking at the kpm pack or publishing step of this solution, there is an undesired affect. </p>\n\n<p>All of the folders in the root, now that this is the folder we are working in, will be published to the destination folders. Being approot &amp; wwwroot (yes this is still created), this includes the bower<em>components, nodee</em>modules, your API code etc.  Although IIS will keep you from browsing to the *.cs and other extensions for security sake, it is still not a clean solution.</p>\n\n<p>I have updated the <a href=\"https://github.com/spboyer/nowwwroot\">dev branch of the git repository</a> where wwwroot is put back in, and the gulpfile.js task called <code>optimize</code> now will publish the necessary files to this folder on the <code>prepare</code> step. <code>prepare</code> happens during project start, build, and publish.  </p>\n\n<hr/>\n\n<p>I have been a long time user of Visual Studio in a Windows world; however over the last few years a migration to a full time OSX user and non Visual Studio development has been the path for me and most of my colleagues. </p>\n\n<p>Given the news of cross platform support for ASP.NET and IDE of my choice put a pep in my step, but being bootstrapped to a specific folder structure didn't seem very xplat IDE friendly.</p>\n\n<p>The new structure in ASP.NET 5, by default, includes the wwwroot folder where the static or non compiled code such as html, css, scripts etc will live. Your compiled code will now be packaged in nuget packages (.nupkg) within the /approot folder and each targeted framework will have its own nupkg.</p>\n\n<p>Depending on your project team(s), the tools used the new structure may or may no cause issue with the move that is being made to the community standards such as grunt, gulp, bower, npm etc.</p>\n\n<h4 id=\"aquickexample\">A Quick Example</h4>\n\n<p>The default File -> New Project -> ASP.NET 5 Empty Project presents the following solution structure in Visual Studio.</p>\n\n<p><img src=\"/content/images/2015/01/Screen-Shot-2015-01-29-at-1-53-18-PM.png\" alt=\"new project structure\" /></p>\n\n<p>The next step is to add the bower.json file for me to get the CSS and JavaScript libraries to work with such as Angular and Bootstrap.</p>\n\n<p>bower.json file  </p>\n\n<pre><code class=\"language-javascript\">{\n    \"name\": \"NewASP5Project\",\n    \"private\": true,\n    \"dependencies\": {\n        \"angular\": \"~1.3.11\",\n        \"bootstrap\": \"~3.3.2\"\n    },\n    \"exportsOverride\": {\n    }\n}\n</code></pre>\n\n<p>This creates the dependencies and the bower_components (hidden) folder in the same directory as your project.</p>\n\n<p><img src=\"/content/images/2015/01/Screen-Shot-2015-01-29-at-2-03-03-PM.png\" alt=\"after bower\" /></p>\n\n<p>Most examples you've probably seen to this point would invlove adding a grunt file which would then <strong>copy</strong> the necessary bower resources to a <strong><em>new</em></strong> folder under wwwroot, something like <strong><em>/lib</em></strong>. Then you reference these *.css and *.js resources from the /lib folder in the .html files during development.</p>\n\n<p>There are of course options in the bower.json file within <strong>exportsOverride</strong> to control what exactly gets copied to the destination folder during the grunt task; such as only getting the minified versions etc.</p>\n\n<p>There is a full walkthrough of the example on the ASP.NET site here - <a href=\"http://www.asp.net/vnext/overview/aspnet-vnext/grunt-and-bower-in-visual-studio-2015\">Grunt and Bower in Visual Studio 2015</a>.</p>\n\n<h4 id=\"sowhatistheproblem\">So What is the Problem?</h4>\n\n<p>Here are a few items to point out.</p>\n\n<ul>\n<li>There are duplicate copies of the bower resources</li>\n<li>The example works for grunt, not gulp</li>\n<li>wwwroot is unecessary</li>\n</ul>\n\n<h4 id=\"optional\">Optional?</h4>\n\n<p>In short, yes.  With a change to project.json you can either remove the <em>wwroot</em> folder OR call it <em>foo</em> if you like and the application will execute normally.</p>\n\n<p>This is done by changing the value of <code>webroot</code> from <code>'wwwroot'</code> to simply <code>'.'</code> or <code>'foo'</code> depending on your preference.  In this case we are looking to eliminate the folder need and work right from the true root of the project. Look at this example project.json:</p>\n\n<pre><code class=\"language-javascript\">{\n  \"webroot\": \".\",\n  \"version\": \"1.0.0-*\",\n  \"exclude\": [\n    \"wwwroot\",\n    \"bower_components\"\n  ],\n  \"packExclude\": [\n    \"node_modules\",\n    \"bower_components\",\n    \"**.kproj\",\n    \"**.user\",\n    \"**.vspscc\"\n  ],\n  \"dependencies\": {\n    \"Microsoft.AspNet.Server.IIS\": \"1.0.0-beta2\",\n    \"Microsoft.AspNet.Server.WebListener\": \"1.0.0-beta2\",\n    \"Microsoft.AspNet.StaticFiles\": \"1.0.0-beta2\",\n    \"Microsoft.AspNet.Diagnostics\": \"1.0.0-beta2\",\n    \"Microsoft.AspNet.Mvc\": \"6.0.0-beta2\",\n    \"Kestrel\": \"1.0.0-beta2\",\n    \"Microsoft.CodeAnalysis.CSharp\": \"1.0.0.0-beta2\"\n  },\n  \"commands\": {\n    \"web\": \"Microsoft.AspNet.Hosting --server Microsoft.AspNet.Server.WebListener --server.urls http://localhost:5001\",\n    \"kestrel\": \"Microsoft.AspNet.Hosting --server Kestrel --server.urls http://localhost:5004\"\n  },\n  \"frameworks\": {\n    \"aspnet50\": {},\n    \"aspnetcore50\": {}\n  },\n  \"scripts\": {\n    \"postrestore\": [\n      \"npm install\"\n    ],\n    \"prepare\": [\n      \"gulp prepare\"\n    ]\n  }\n}\n</code></pre>\n\n<p>This file sets the webroot to '.', telling the web application that the true root is where we will be executing from. Now when you add bower to the project, the <strong>bower_components</strong> folder is at the same level as your other resources. </p>\n\n<blockquote>\n  <p><em>In Visual Studio you'll have to \"Show All Files\", Right Click and \"Include in Project\". By doing so you can directly reference the resources in the bower_components folder in your html without having to copy duplicates into another folder. However, note that you only really need to do this if you want the nice intellisense when coding, resources will still resolve.</em></p>\n</blockquote>\n\n<h4 id=\"butwhataboutdeployment\">But What about deployment?</h4>\n\n<p>Right, you certainly wouldn't deplpoy the bower_components folder to the server.  That's where grunt or gulp helps out and in this example - gulp.</p>\n\n<blockquote>\n  <p>Check out John Papa's repository - <a href=\"https://github.com/johnpapa/gulp-patterns\">gulp-patterns</a>, and note that there is an upcoming <a href=\"http://pluralsight.com/\">Pluralsight</a> course associated with this soon!</p>\n</blockquote>\n\n<h4 id=\"gulpinjectwiredepandmore\">Gulp - inject, wiredep and more.</h4>\n\n<p>Instead of typing all of the bower resources into your html, use the gulp plugin called <strong>wiredep</strong>.</p>\n\n<p>In the html page you insert the following comment tags to indicate where to inject the css and javascript.</p>\n\n<pre><code class=\"language-html\">&lt;!-- bower:css --&gt;\n\n&lt;!-- endbower --&gt;\n\n&lt;!-- bower:js --&gt;\n\n&lt;!-- endbower --&gt;  \n</code></pre>\n\n<p>Then in your gulpfile.js a task is defined  </p>\n\n<pre><code class=\"language-javascript\">var wiredep = require('wiredep').stream;  \n    var options = config.getWiredepDefaultOptions();\n\n    return gulp\n        .src(config.index)\n        .pipe(wiredep(options))\n        .pipe($.inject(gulp.src(config.js)))\n        .pipe(gulp.dest(config.client));\n</code></pre>\n\n<p>when the task is executed, the result is the follwing  </p>\n\n<pre><code class=\"language-html\">&lt;!-- bower:css --&gt;  \n&lt;link rel=\"stylesheet\" href=\"bower_components/bootstrap/dist/css/bootstrap.css\" /&gt;  \n&lt;link rel=\"stylesheet\" href=\"bower_components/font-awesome/css/font-awesome.css\" /&gt;  \n&lt;link rel=\"stylesheet\" href=\"bower_components/toastr/toastr.css\" /&gt;  \n&lt;!-- endbower --&gt;\n\n&lt;!-- bower:js --&gt;  \n&lt;script src=\"bower_components/jquery/dist/jquery.js\"&gt;&lt;/script&gt;  \n&lt;script src=\"bower_components/angular/angular.js\"&gt;&lt;/script&gt;  \n&lt;script src=\"bower_components/angular-sanitize/angular-sanitize.js\"&gt;&lt;/script&gt;  \n&lt;script src=\"bower_components/angular-resource/angular-resource.js\"&gt;&lt;/script&gt;  \n&lt;script src=\"bower_components/bootstrap/dist/js/bootstrap.js\"&gt;&lt;/script&gt;  \n&lt;script src=\"bower_components/extras.angular.plus/ngplus-overlay.js\"&gt;&lt;/script&gt;  \n&lt;script src=\"bower_components/moment/moment.js\"&gt;&lt;/script&gt;  \n&lt;script src=\"bower_components/angular-ui-router/release/angular-ui-router.js\"&gt;&lt;/script&gt;  \n&lt;script src=\"bower_components/toastr/toastr.js\"&gt;&lt;/script&gt;  \n&lt;script src=\"bower_components/angular-animate/angular-animate.js\"&gt;&lt;/script&gt;  \n&lt;script src=\"bower_components/html5shiv/dist/html5shiv.js\"&gt;&lt;/script&gt;  \n&lt;script src=\"bower_components/respond/dest/respond.src.js\"&gt;&lt;/script&gt;  \n&lt;!-- endbower --&gt;  \n</code></pre>\n\n<p>For your own scripts, or non bower resources; <strong>gulp-inject</strong> gives you the same result by using <code>&lt;!-- inject:cs --&gt;</code> and <code>&lt;!-- inject:js --&gt;</code> respectively.</p>\n\n<h4 id=\"greatforstaticstuffwhataboutmyaspnet\">Great for Static Stuff, What about my ASP.NET?</h4>\n\n<p>Here is the folder structure of the application: <br />\n<img src=\"/content/images/2015/01/Screen-Shot-2015-01-29-at-3-54-31-PM.png\" alt=\"app structure\" /></p>\n\n<ul>\n<li>/app - Angular.js code</li>\n<li>/server - .NET API code</li>\n</ul>\n\n<p>Application can be run from the Debug dropdown and executes in Helios (IIS) and runs the Angular app on index.html calling the API controllers.</p>\n\n<h4 id=\"whataboutcrossplatformdevelopment\">What about cross platform development?</h4>\n\n<p>In project.json there is a reference to the Kestrel server host for OSX and Linux. You can open the application in Sublime, Brackets, Atom etc.  I happen to use Sublime and Brackets.</p>\n\n<p>Using Sublime, and the <a href=\"http://omnisharp.net\">OmniSharp</a> as well Kulture addins; ASP.NET development experience is a breeze.</p>\n\n<p>Open the project, run <code>kpm restore</code> to install all <strong>bower, nuget, and npm</strong> dependencies then run the application using <code>k kestrel</code> and browse to <strong><a href='http://localhost:5004'>http://localhost:5004</a></strong> </p>\n\n<h4 id=\"summary\">Summary</h4>\n\n<p>No need to have a wwwroot, a duplicated set of resources.  If there is already a set and we have grunt, gulp, npm and bower integration within our ecosystem; let's start using them and reduce the reptative work.  Curious how you are working with the new set of tools, give me your thoughts. </p>\n\n<h4 id=\"source\">Source</h4>\n\n<p>Source code available here - <a href='https://github.com/spboyer/nowwwroot'>https://github.com/spboyer/nowwwroot</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1422559310778,"created_by":1,"updated_at":1422635510970,"updated_by":1,"published_at":1422565797228,"published_by":1},{"id":52,"uuid":"73361bb0-edc6-46e4-aeda-a5306ee534fe","title":"Using Gulp for ASP.NET 5 & Visual Studio 2015","slug":"using-gulp-for-asp-net-5-visual-studio-2015","markdown":"The default \"ASP.NET 5 Preview Starter Web\" template has everything you need out of the gate to get started on your next ASP.NET 5 project. On top of the responsive design, which has a new carousel control, it is also touch ready using hammer.js and is using grunt as the task runner.\n\nAnother popular task runner is gulp.js, and in the next release there will be a default template provided. However, in the meantime as a part of the yeoman generator project I wanted to not only provide an equivalent for the grunt template, but also one that could be built upon.\n\n###gruntfile.js\nFirst let's take a quick look at the grunt file \n\n```language-javascript\nmodule.exports = function (grunt) {\n    grunt.initConfig({\n        bower: {\n            install: {\n                options: {\n                    targetDir: \"wwwroot/lib\",\n                    layout: \"byComponent\",\n                    cleanTargetDir: false\n                }\n            }\n        }\n    });\n\n    // This command registers the default task which will install bower packages into wwwroot/lib\n    grunt.registerTask(\"default\", [\"bower:install\"]);\n\n    // The following line loads the grunt plugins.\n    // This line needs to be at the end of this this file.\n    grunt.loadNpmTasks(\"grunt-bower-task\");\n};\n\n```\n\nthe purpose of these tasks is to simply install the bower resources set in the **bower.json** file, then copy these resources to the **www/lib** folder.  \n\nThe task runner here is dependant on two npm packages; grunt and grunt-bower-task respectively.  These are defined in **package.json**\n\n```language-javascript\n{\n    \"version\": \"0.0.0\",\n    \"name\": \"MyApplicationName\",\n    \"devDependencies\": {\n        \"grunt\": \"0.4.5\",\n        \"grunt-bower-task\": \"0.4.0\"\n    }\n}\n```\n\n####Running the tasks\nYou have two options for running the tasks.\n\n* Visual Studio 2015 Task Runner Explorer\n![task runner explorer](/content/images/2015/03/Screen-Shot-2015-03-09-at-8-35-24-PM.png)\n* Command Line ` $ MyApplicationName > grunt `\n\n###gulpfile.js\n\nIn order to accomplish the same functionality as the grunt task, you'll need to add the two npm packages for gulp to the **package.json** file and remove the gulp ones. We'll also add another for cleaning the destination folder.\n\n* gulp\n* gulp-bower\n* del\n\n```language-javascript\n\n{\n    \"version\": \"0.0.0\",\n    \"name\": \"MyApplicationName\",\n    \"devDependencies\": {\n        \"del\": \"^1.1.1\",\n        \"gulp\": \"^3.8.10\",\n        \"gulp-bower\": \"0.0.10\"\n    }\n}\n\n```\n\nNext, add a new JavaScript file name **gulpfile.js**. Now by contrast to grunt, gulp is more suited for coding versus configuration ( *json* ).\n\nFirst, add the dependencies.\n\n```language-javascript\nvar gulp = require('gulp');\nvar bower = require('gulp-bower');\nvar del = require('del');\n```\n\nNext, we'll add a variable to load the **project.json** file so we can get the **webroot** location, then set a variable to use for the **lib** location.\n\n```language-javascript\nvar project = require('./project.json');\nvar lib = project.webroot + '/lib';\n```\n\nThe first task added to the file is the **clean** task that takes the **lib** folder and deletes the content.\n\n```language-javascript\ngulp.task('clean', function (done) {\n    del(lib, done);\n});\n```\n\nNext, add the task for running **bower install** to install all of the components to the defaul folder *bower_components*. This task, also will call the **clean** task first.\n\n```language-javascript\ngulp.task('bower:install', ['clean'], function () {\n    return bower({\n        directory: lib\n    });\n});\n```\n\nFinally, setup the **default** gulp task.  This is the task that is called if you use the CLI (Command Line Interface) and execute `$ gulp`.\n\n```language-javascript\ngulp.task('default', ['bower:install'], function () {\n    return;\n});\n```\n\nThe complete file should look like the following:\n\n```language-javascript\nvar gulp = require('gulp');\nvar bower = require('gulp-bower');\nvar del = require('del');\nvar project = require('./project.json');\nvar lib = project.webroot + '/lib';\n\ngulp.task('default', ['bower:install'], function () {\n    return;\n});\n\ngulp.task('bower:install', ['clean'], function () {\n    return bower({\n        directory: lib\n    });\n});\n\ngulp.task('clean', function (done) {\n    del(lib, done);\n});\n```\n\nAgain, the same options for running the tasks as before. However, there are a few items I noticed when using the CLI. First, there are commented lines in the **project.json** which are not supported by the JSON specification and the CLI will throw and error so remove these.\n\nSecondly, I also noticed that the gulp tasks were not showing in the Task Runner Explorer and the errors were not very descriptive.  However, it did get resolved by removing the comments and I aslo installed the **gulp-cli** package.  \n\nFrom the command line\n```\n> npm install -g gulp-cli\n```\n\n*As a note Visual Studio installs all of the packages locally to the project, if you are using gulp or grunt install them globally so the cli tools are available.*\n\nAdditional bower resources can be added such as Angular.js and when the default task is run either from the CLI or the Task Runner Explorer; the files will be downloaded from the bower repository and then also placed in the **www/lib** folder were you can reference in your *.cshtml files.\n\nIt is important to point out that it doesn't matter which way you decide to run the tasks, as the Task Runner Explorer is simply a GUI that calls the CLI. Some developers prefer one over the other, and now that ASP.NET 5 is cross platform there may be developers using other non Visual Studio IDE and now the capability is not lost on those developers.\n\n###Notes\n\nThe next release of the yeoman generators, [generator-aspnet](http://github.com/OmniSharp/generator-aspnet) will contain and option to generate the **web** template with a gulp task runner instead of the default gulp.\n\n` $ yo aspnet --gulp`\n\nI would also encourage the use of the **wiredep** package with gulp.  This package injects the bower packages into your *.html* files by decorating them with a simple comment. Here is an example of that task.\n\n```language-javascript\ngulp.task('wiredep', function() {\n\n    var wiredep = require('wiredep').stream;\n    var options = {\n            bowerJson: './bower.json',\n            directory: './wwwroot/lib,\n            ignorePath: 'wwwroot',\n            client: 'Views/Shared/_Layout.cshtml'\n        };\n\n    return gulp\n        .src(config.index)\n        .pipe(wiredep(options))\n        .pipe(gulp.dest(client));\n});\n```\n\nThe only additional npm package needed is **wiredep**, be sure to add this to the package.json.  The other file to change is the **Views/Shared/_Layout.cshtml**\n\n```language-html\n    <!-- bower:css -->\n    <link rel=\"stylesheet\" href=\"/lib/bootstrap-touch-carousel.css\">\n    <link rel=\"stylesheet\" href=\"/lib/bootstrap.css\">\n    <!-- endbower -->\n    \n    <!-- bower:js -->\n    <script src=\"/wwwroot/lib/bootstrap-touch-carousel.js\"></script>\n    <script src=\"/wwwroot/lib/bootstrap.js\"></script>\n    <script src=\"/wwwroot/lib/hammer.js\"></script>\n    <script src=\"/wwwroot/lib/jquery.js\"></script>\n    <script src=\"/wwwroot/lib/jquery.validate.unobtrusive.js\"></script>\n    <script src=\"/lib/jquery.validate.unobtrusive.min.js\"></script>\n    <!-- endbower -->\n\n```\n\nLook forward to your feedback! Let me know you thoughts.","html":"<p>The default \"ASP.NET 5 Preview Starter Web\" template has everything you need out of the gate to get started on your next ASP.NET 5 project. On top of the responsive design, which has a new carousel control, it is also touch ready using hammer.js and is using grunt as the task runner.</p>\n\n<p>Another popular task runner is gulp.js, and in the next release there will be a default template provided. However, in the meantime as a part of the yeoman generator project I wanted to not only provide an equivalent for the grunt template, but also one that could be built upon.</p>\n\n<h3 id=\"gruntfilejs\">gruntfile.js</h3>\n\n<p>First let's take a quick look at the grunt file </p>\n\n<pre><code class=\"language-javascript\">module.exports = function (grunt) {  \n    grunt.initConfig({\n        bower: {\n            install: {\n                options: {\n                    targetDir: \"wwwroot/lib\",\n                    layout: \"byComponent\",\n                    cleanTargetDir: false\n                }\n            }\n        }\n    });\n\n    // This command registers the default task which will install bower packages into wwwroot/lib\n    grunt.registerTask(\"default\", [\"bower:install\"]);\n\n    // The following line loads the grunt plugins.\n    // This line needs to be at the end of this this file.\n    grunt.loadNpmTasks(\"grunt-bower-task\");\n};\n</code></pre>\n\n<p>the purpose of these tasks is to simply install the bower resources set in the <strong>bower.json</strong> file, then copy these resources to the <strong>www/lib</strong> folder.  </p>\n\n<p>The task runner here is dependant on two npm packages; grunt and grunt-bower-task respectively.  These are defined in <strong>package.json</strong></p>\n\n<pre><code class=\"language-javascript\">{\n    \"version\": \"0.0.0\",\n    \"name\": \"MyApplicationName\",\n    \"devDependencies\": {\n        \"grunt\": \"0.4.5\",\n        \"grunt-bower-task\": \"0.4.0\"\n    }\n}\n</code></pre>\n\n<h4 id=\"runningthetasks\">Running the tasks</h4>\n\n<p>You have two options for running the tasks.</p>\n\n<ul>\n<li>Visual Studio 2015 Task Runner Explorer\n<img src=\"/content/images/2015/03/Screen-Shot-2015-03-09-at-8-35-24-PM.png\" alt=\"task runner explorer\" /></li>\n<li>Command Line <code>$ MyApplicationName &gt; grunt</code></li>\n</ul>\n\n<h3 id=\"gulpfilejs\">gulpfile.js</h3>\n\n<p>In order to accomplish the same functionality as the grunt task, you'll need to add the two npm packages for gulp to the <strong>package.json</strong> file and remove the gulp ones. We'll also add another for cleaning the destination folder.</p>\n\n<ul>\n<li>gulp</li>\n<li>gulp-bower</li>\n<li>del</li>\n</ul>\n\n<pre><code class=\"language-javascript\">{\n    \"version\": \"0.0.0\",\n    \"name\": \"MyApplicationName\",\n    \"devDependencies\": {\n        \"del\": \"^1.1.1\",\n        \"gulp\": \"^3.8.10\",\n        \"gulp-bower\": \"0.0.10\"\n    }\n}\n</code></pre>\n\n<p>Next, add a new JavaScript file name <strong>gulpfile.js</strong>. Now by contrast to grunt, gulp is more suited for coding versus configuration ( <em>json</em> ).</p>\n\n<p>First, add the dependencies.</p>\n\n<pre><code class=\"language-javascript\">var gulp = require('gulp');  \nvar bower = require('gulp-bower');  \nvar del = require('del');  \n</code></pre>\n\n<p>Next, we'll add a variable to load the <strong>project.json</strong> file so we can get the <strong>webroot</strong> location, then set a variable to use for the <strong>lib</strong> location.</p>\n\n<pre><code class=\"language-javascript\">var project = require('./project.json');  \nvar lib = project.webroot + '/lib';  \n</code></pre>\n\n<p>The first task added to the file is the <strong>clean</strong> task that takes the <strong>lib</strong> folder and deletes the content.</p>\n\n<pre><code class=\"language-javascript\">gulp.task('clean', function (done) {  \n    del(lib, done);\n});\n</code></pre>\n\n<p>Next, add the task for running <strong>bower install</strong> to install all of the components to the defaul folder <em>bower_components</em>. This task, also will call the <strong>clean</strong> task first.</p>\n\n<pre><code class=\"language-javascript\">gulp.task('bower:install', ['clean'], function () {  \n    return bower({\n        directory: lib\n    });\n});\n</code></pre>\n\n<p>Finally, setup the <strong>default</strong> gulp task.  This is the task that is called if you use the CLI (Command Line Interface) and execute <code>$ gulp</code>.</p>\n\n<pre><code class=\"language-javascript\">gulp.task('default', ['bower:install'], function () {  \n    return;\n});\n</code></pre>\n\n<p>The complete file should look like the following:</p>\n\n<pre><code class=\"language-javascript\">var gulp = require('gulp');  \nvar bower = require('gulp-bower');  \nvar del = require('del');  \nvar project = require('./project.json');  \nvar lib = project.webroot + '/lib';\n\ngulp.task('default', ['bower:install'], function () {  \n    return;\n});\n\ngulp.task('bower:install', ['clean'], function () {  \n    return bower({\n        directory: lib\n    });\n});\n\ngulp.task('clean', function (done) {  \n    del(lib, done);\n});\n</code></pre>\n\n<p>Again, the same options for running the tasks as before. However, there are a few items I noticed when using the CLI. First, there are commented lines in the <strong>project.json</strong> which are not supported by the JSON specification and the CLI will throw and error so remove these.</p>\n\n<p>Secondly, I also noticed that the gulp tasks were not showing in the Task Runner Explorer and the errors were not very descriptive.  However, it did get resolved by removing the comments and I aslo installed the <strong>gulp-cli</strong> package.  </p>\n\n<p>From the command line  </p>\n\n<pre><code>&gt; npm install -g gulp-cli\n</code></pre>\n\n<p><em>As a note Visual Studio installs all of the packages locally to the project, if you are using gulp or grunt install them globally so the cli tools are available.</em></p>\n\n<p>Additional bower resources can be added such as Angular.js and when the default task is run either from the CLI or the Task Runner Explorer; the files will be downloaded from the bower repository and then also placed in the <strong>www/lib</strong> folder were you can reference in your *.cshtml files.</p>\n\n<p>It is important to point out that it doesn't matter which way you decide to run the tasks, as the Task Runner Explorer is simply a GUI that calls the CLI. Some developers prefer one over the other, and now that ASP.NET 5 is cross platform there may be developers using other non Visual Studio IDE and now the capability is not lost on those developers.</p>\n\n<h3 id=\"notes\">Notes</h3>\n\n<p>The next release of the yeoman generators, <a href=\"http://github.com/OmniSharp/generator-aspnet\">generator-aspnet</a> will contain and option to generate the <strong>web</strong> template with a gulp task runner instead of the default gulp.</p>\n\n<p><code>$ yo aspnet --gulp</code></p>\n\n<p>I would also encourage the use of the <strong>wiredep</strong> package with gulp.  This package injects the bower packages into your <em>.html</em> files by decorating them with a simple comment. Here is an example of that task.</p>\n\n<pre><code class=\"language-javascript\">gulp.task('wiredep', function() {\n\n    var wiredep = require('wiredep').stream;\n    var options = {\n            bowerJson: './bower.json',\n            directory: './wwwroot/lib,\n            ignorePath: 'wwwroot',\n            client: 'Views/Shared/_Layout.cshtml'\n        };\n\n    return gulp\n        .src(config.index)\n        .pipe(wiredep(options))\n        .pipe(gulp.dest(client));\n});\n</code></pre>\n\n<p>The only additional npm package needed is <strong>wiredep</strong>, be sure to add this to the package.json.  The other file to change is the <strong>Views/Shared/_Layout.cshtml</strong></p>\n\n<pre><code class=\"language-html\">    &lt;!-- bower:css --&gt;\n    &lt;link rel=\"stylesheet\" href=\"/lib/bootstrap-touch-carousel.css\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"/lib/bootstrap.css\"&gt;\n    &lt;!-- endbower --&gt;\n\n    &lt;!-- bower:js --&gt;\n    &lt;script src=\"/wwwroot/lib/bootstrap-touch-carousel.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"/wwwroot/lib/bootstrap.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"/wwwroot/lib/hammer.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"/wwwroot/lib/jquery.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"/wwwroot/lib/jquery.validate.unobtrusive.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"/lib/jquery.validate.unobtrusive.min.js\"&gt;&lt;/script&gt;\n    &lt;!-- endbower --&gt;\n</code></pre>\n\n<p>Look forward to your feedback! Let me know you thoughts.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1425945398306,"created_by":1,"updated_at":1425952961284,"updated_by":1,"published_at":1425952961300,"published_by":1},{"id":53,"uuid":"68d65fb1-0fea-4e4d-913d-f57b3600b591","title":"VSCode: Creating an Application with Yeoman aspnet generators","slug":"vscode-creating-an-application-with-yeoman-aspnet-generators","markdown":"##Getting Started\n####Visual Studio Code\nGo get Visual Studio Code! [http://code.visualstudio.com](), the all new cross platform development tool from Microsoft.\n![](/content/images/2015/04/Screen-Shot-2015-04-29-at-8-04-46-PM.png)\n\n####Runtime\nYou'll need DNX, formerly known as K or KRE (K Runtime Environment).  \n\nYou can get the full instructions on the [ASP.NET Github repo](https://github.com/aspnet/home#getting-started-with-aspnet-5-and-dnx). If you have been running the K Runtime, you can uninstall if you deem necessary; however DNX can and will run side by side.\n\nOn OSX, the install is simple with Homebrew\n```\n$ brew tap aspnet/dnx\n$ brew update\n$ brew install dnvm\n```\n\nThis will install the toooling you need (dnx, dnu, dnvm) as well as mono 4.0.1.\n\n####generator-aspnet\nIf you are starting a new project, it is recommended starting with the aspnet generator as \"File > New Project\".\n\nInstall the generators using `npm`\n```\nnpm install -g yo generator-aspnet\n```\n\nIf you are not already using bower, grunt and/or gulp; grab those tools as well. If you are not already using these you'll become familiar as a part of the new modern develpoment stack.\n\n```\nnpm install -g bower grunt-cli gulp-cli\n```\n\n###New Project\nOpen terminal or cmd, depending on your OS. And type `yo aspnet` (still my favorite thing to type)\n![yo](/content/images/2015/04/Screen-Shot-2015-04-29-at-9-27-52-PM-1.png)\nSelect **Web Application**, enter your application name and hit <enter>.\n\nNext your project is created.\n![projectdone](/content/images/2015/04/Screen-Shot-2015-04-29-at-9-31-35-PM-1.png)\n\nThe final directions from the generator is to do the following:\n```\nYour project is now created, you can use the following commands to get going\n    dnu restore\n    dnu build\n    dnx . run for console projects\n    dnx . kestrel or dnx . web for web projects\n```\nFirst you will want to `cd myWebApp` and then \n1. dnu restore - download nuget, npm and bower resources\n1. dnu build - builds the application\n1. dnx . kestrel or dnx . web - starts the self host server for the application where [.] is the path of the application.\n\nAll of this can be accomplished from the command line, however VSCode is where we'll be editing the project.\n\n###VS Code\nNote: John Papa has a great set of posts on Visual Studio Code here [http://www.johnpapa.net/visual-studio-code/]() - be sure to check them out.\n\nOpen VSCode and open the project folder by clicking **File>Open** or (⌥⌘O).\n\n![project](/content/images/2015/04/Screen-Shot-2015-04-29-at-9-44-19-PM.png)\n\nFirst we want to restore (**dnu restore**) the nuget, npm and bower packages. Press Command+P (⌘P) to open the command window and then type **restore**.\n![restore](/content/images/2015/04/Screen-Shot-2015-04-29-at-9-44-42-PM.png)\n\nHit enter and a terminal window launches to execute the command.\n![restoring](/content/images/2015/04/Screen-Shot-2015-04-29-at-9-45-02-PM.png)\n*Note: you may see a notification that you have to relaunch after restoring, update of vscode in the future may resolve*\n\nNow we can do the same (⌘P) and now type **kestrel** to run the application.\n![compile](/content/images/2015/04/Screen-Shot-2015-04-29-at-10-19-31-PM.png)\n\nThis starts the **kestrel** self host server. Browse to http://localhost:5001 and we're done! Web app running on OSX created using Yeoman editing in VSCode.\n\n![webapp](/content/images/2015/04/Screen-Shot-2015-04-29-at-10-20-37-PM.png)\n\naspnet generator issues log here - [http://github.com/omnisharp/generator-aspnet/issues]()\nVS Code - [http://code.visualstudio.com/]()\n\n\n\n","html":"<h2 id=\"gettingstarted\">Getting Started</h2>\n\n<h4 id=\"visualstudiocode\">Visual Studio Code</h4>\n\n<p>Go get Visual Studio Code! <a href=\"\">http://code.visualstudio.com</a>, the all new cross platform development tool from Microsoft. <br />\n<img src=\"/content/images/2015/04/Screen-Shot-2015-04-29-at-8-04-46-PM.png\" alt=\"\" /></p>\n\n<h4 id=\"runtime\">Runtime</h4>\n\n<p>You'll need DNX, formerly known as K or KRE (K Runtime Environment).  </p>\n\n<p>You can get the full instructions on the <a href=\"https://github.com/aspnet/home#getting-started-with-aspnet-5-and-dnx\">ASP.NET Github repo</a>. If you have been running the K Runtime, you can uninstall if you deem necessary; however DNX can and will run side by side.</p>\n\n<p>On OSX, the install is simple with Homebrew  </p>\n\n<pre><code>$ brew tap aspnet/dnx\n$ brew update\n$ brew install dnvm\n</code></pre>\n\n<p>This will install the toooling you need (dnx, dnu, dnvm) as well as mono 4.0.1.</p>\n\n<h4 id=\"generatoraspnet\">generator-aspnet</h4>\n\n<p>If you are starting a new project, it is recommended starting with the aspnet generator as \"File > New Project\".</p>\n\n<p>Install the generators using <code>npm</code>  </p>\n\n<pre><code>npm install -g yo generator-aspnet  \n</code></pre>\n\n<p>If you are not already using bower, grunt and/or gulp; grab those tools as well. If you are not already using these you'll become familiar as a part of the new modern develpoment stack.</p>\n\n<pre><code>npm install -g bower grunt-cli gulp-cli  \n</code></pre>\n\n<h3 id=\"newproject\">New Project</h3>\n\n<p>Open terminal or cmd, depending on your OS. And type <code>yo aspnet</code> (still my favorite thing to type) <br />\n<img src=\"/content/images/2015/04/Screen-Shot-2015-04-29-at-9-27-52-PM-1.png\" alt=\"yo\" />\nSelect <strong>Web Application</strong>, enter your application name and hit <enter>.</p>\n\n<p>Next your project is created. <br />\n<img src=\"/content/images/2015/04/Screen-Shot-2015-04-29-at-9-31-35-PM-1.png\" alt=\"projectdone\" /></p>\n\n<p>The final directions from the generator is to do the following:  </p>\n\n<pre><code>Your project is now created, you can use the following commands to get going  \n    dnu restore\n    dnu build\n    dnx . run for console projects\n    dnx . kestrel or dnx . web for web projects\n</code></pre>\n\n<p>First you will want to <code>cd myWebApp</code> and then <br />\n1. dnu restore - download nuget, npm and bower resources <br />\n1. dnu build - builds the application <br />\n1. dnx . kestrel or dnx . web - starts the self host server for the application where [.] is the path of the application.</p>\n\n<p>All of this can be accomplished from the command line, however VSCode is where we'll be editing the project.</p>\n\n<h3 id=\"vscode\">VS Code</h3>\n\n<p>Note: John Papa has a great set of posts on Visual Studio Code here <a href=\"\">http://www.johnpapa.net/visual-studio-code/</a> - be sure to check them out.</p>\n\n<p>Open VSCode and open the project folder by clicking <strong>File>Open</strong> or (⌥⌘O).</p>\n\n<p><img src=\"/content/images/2015/04/Screen-Shot-2015-04-29-at-9-44-19-PM.png\" alt=\"project\" /></p>\n\n<p>First we want to restore (<strong>dnu restore</strong>) the nuget, npm and bower packages. Press Command+P (⌘P) to open the command window and then type <strong>restore</strong>. <br />\n<img src=\"/content/images/2015/04/Screen-Shot-2015-04-29-at-9-44-42-PM.png\" alt=\"restore\" /></p>\n\n<p>Hit enter and a terminal window launches to execute the command. <br />\n<img src=\"/content/images/2015/04/Screen-Shot-2015-04-29-at-9-45-02-PM.png\" alt=\"restoring\" />\n<em>Note: you may see a notification that you have to relaunch after restoring, update of vscode in the future may resolve</em></p>\n\n<p>Now we can do the same (⌘P) and now type <strong>kestrel</strong> to run the application. <br />\n<img src=\"/content/images/2015/04/Screen-Shot-2015-04-29-at-10-19-31-PM.png\" alt=\"compile\" /></p>\n\n<p>This starts the <strong>kestrel</strong> self host server. Browse to <a href=\"http://localhost:5001\">http://localhost:5001</a> and we're done! Web app running on OSX created using Yeoman editing in VSCode.</p>\n\n<p><img src=\"/content/images/2015/04/Screen-Shot-2015-04-29-at-10-20-37-PM.png\" alt=\"webapp\" /></p>\n\n<p>aspnet generator issues log here - <a href=\"\">http://github.com/omnisharp/generator-aspnet/issues</a> <br />\nVS Code - <a href=\"\">http://code.visualstudio.com/</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1430356085965,"created_by":1,"updated_at":1442348708949,"updated_by":1,"published_at":1430360718954,"published_by":1},{"id":55,"uuid":"d967d1fc-5ccd-4a4b-b651-ec61fe629c63","title":"DevIntersection Fall 2015","slug":"devintersection-fall-2015","markdown":"It's been a great week of technology in Vegas. I met a lot of great people during my sessions, building some interesting stuff.\n\n![devintersection_logo](/content/images/2015/10/DevIntersection_logo.png)\n\nThanks to all of you who came out and to Richard Campbell and team for putting on a great event.  Look forward to Spring in Orlando.\n\nHere is a list of my sessions, slides and code.\n\n[All code and slides](https://github.com/spboyer/devintersection/tree/master/vegas2015)\n\n* [ASP.NET Anywhere with Yeoman and OmniSharp](https://github.com/spboyer/devintersection/tree/master/vegas2015/aspnet%20anywhere)\n* [Modern Development Toolchain](https://github.com/spboyer/devintersection/tree/master/vegas2015/moderntoolchain)\n* [Preparing Existing Services for Mobile](https://github.com/spboyer/devintersection/tree/master/vegas2015/prepare-existing-services)\n\n**Bonus** - Modern Development Toolchain is available on Channel 9 - https://channel9.msdn.com/Events/DEVintersection/DEVintersection-2015/Introduction-to-the-Modern-Web-Toolchain\n\n<iframe src=\"https://channel9.msdn.com/Events/DEVintersection/DEVintersection-2015/Introduction-to-the-Modern-Web-Toolchain/player\" width=\"640\" height=\"360\" allowFullScreen frameBorder=\"0\"></iframe>\n","html":"<p>It's been a great week of technology in Vegas. I met a lot of great people during my sessions, building some interesting stuff.</p>\n\n<p><img src=\"/content/images/2015/10/DevIntersection_logo.png\" alt=\"devintersection_logo\" /></p>\n\n<p>Thanks to all of you who came out and to Richard Campbell and team for putting on a great event.  Look forward to Spring in Orlando.</p>\n\n<p>Here is a list of my sessions, slides and code.</p>\n\n<p><a href=\"https://github.com/spboyer/devintersection/tree/master/vegas2015\">All code and slides</a></p>\n\n<ul>\n<li><a href=\"https://github.com/spboyer/devintersection/tree/master/vegas2015/aspnet%20anywhere\">ASP.NET Anywhere with Yeoman and OmniSharp</a></li>\n<li><a href=\"https://github.com/spboyer/devintersection/tree/master/vegas2015/moderntoolchain\">Modern Development Toolchain</a></li>\n<li><a href=\"https://github.com/spboyer/devintersection/tree/master/vegas2015/prepare-existing-services\">Preparing Existing Services for Mobile</a></li>\n</ul>\n\n<p><strong>Bonus</strong> - Modern Development Toolchain is available on Channel 9 - <a href=\"https://channel9.msdn.com/Events/DEVintersection/DEVintersection-2015/Introduction-to-the-Modern-Web-Toolchain\">https://channel9.msdn.com/Events/DEVintersection/DEVintersection-2015/Introduction-to-the-Modern-Web-Toolchain</a></p>\n\n<iframe src=\"https://channel9.msdn.com/Events/DEVintersection/DEVintersection-2015/Introduction-to-the-Modern-Web-Toolchain/player\" width=\"640\" height=\"360\" allowFullScreen frameBorder=\"0\"></iframe>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1446160271961,"created_by":1,"updated_at":1447548337665,"updated_by":1,"published_at":1446161334546,"published_by":1},{"id":56,"uuid":"0e03e851-05dd-4040-a0dc-6b558d542c95","title":"ASP.NET 5 : Continuous Integration with Travis-CI, Tutum, Docker, Webhooks and Azure","slug":"asp-net-5-continuous-integration-with-travis-ci-tutum-docker-webhooks-and-azure","markdown":"![CI image](/content/images/2015/11/Docker-CI-CD.png)\n\nGetting a \"code to deployment\" workflow is a story many organizations want to have nailed down when looking into new technology stacks and architectures such as ASP.NET 5 and the container story like Docker.\n\nI hear from business leaders comments like; \"...that's great, but how do we deploy this, scale it. What does the development pipeline look like?\"\n\nGreat questions.\n\nFor my own projects I wanted to be able to \"just write code\" and have the rest of the process handled. Not have to worry about how does it get built, deployed, scaled etc. Here is a working sample technology stack using all the cool kids on the block and some old players too.\n\n###Setting It All Up\nThe initial setup is not hard, but there are some moving parts.\n\n1. GitHub - setup up your repository for your project with 2 branches minimally; `master` and `development` for example.\n1. Docker Toolbox - go to [docs.docker.com](http://docs.docker.com/mac/started/) and get your local environment setup by walking through the setup instructions, including establishing a Docker Hub account. \n1. Travis-CI - head over to [travis-ci.com](http://travis-ci.com) and login with your GitHub credentials. Select the repository you created for the project.\n1. [Azure](https://azure.com) - *** if you do not have an Azure account, there is a [free trial available](https://azure.microsoft.com/en-us/pricing/free-trial/)\n1. [Tutum](https://www.tutum.co/) - Create a new account here by logging in with your Docker Hub account credentials.\n\nLastly for the development of the application, any IDE or editor is fine; Visual Studio Code is my editor of choice lately. For project creation, the yeoman ASP.NET generator `npm install -g generator-aspnet` is what we'll use to scaffold the Web API project.\n\n\n###The Developer Story\n* Visual Studio Code\n* GitHub\n\nThis is a simple ASP.NET 5 Web API application. The editor of choice is **Visual Studio Code** ([code.visualstudio.com](http://code.visualstudio.com)) on OS X and we'll use the aspnet yeoman generator to create the project. [github.com/omnisharp/generator-aspnet](http://github.com/omnisharp/generator-aspnet).\n\n![yo aspnet](/content/images/2015/11/Screen-Shot-2015-11-02-at-10-58-12-AM.png)\n\n```\n$ cd people-service\n$ dnu restore\n$ code .\n```\n\n*** Edit your project.json and add the following to your `web` command in order set the entry point url.  If you are getting `ERR CONNECTION REFUSED` when running your application under Docker this probably the case.\n\n```language:js\n\"commands\": {\n    \"web\": \"Microsoft.AspNet.Server.Kestrel --server.urls http://0.0.0.0:5000\"\n  },\n```\n\n>For more on creating applications with the generator see **[ASP.NET Anywhere w/ Yeoman and Omnisharp](https://msdn.microsoft.com/en-us/magazine/mt573713.aspx)** by [Shayne Boyer](http://twitter.com/spboyer) & [Sayed I. Hashimi](https://twitter.com/sayedihashimi) in MSDN Oct. \n\nThis will create the web api application and restore the dependencies from nuget.  The `code .` command is a shortcut that launches VSCode in the current folder and can be found on the VSCode site.\n\nTest the site by running the `dnx web` command from terminal and browsing to `http://localhost:5000/api/values`.\n\nAt this point the shell of the web api application is complete.\n\n####Docker\nThe yeoman generator does include a `Dockerfile` by default with the project when it is created.\n\n```language:yaml\nFROM microsoft/aspnet:1.0.0-beta8\n\nCOPY project.json /app/\nWORKDIR /app\nRUN [\"dnu\", \"restore\"]\nCOPY . /app\n\nEXPOSE 5000\nENTRYPOINT [\"dnx\", \"-p\", \"project.json\", \"web\"]\n```\n\nThe `Dockerfile` here states that it will use the base `microsoft/aspnet:1.0.0-beta8` image; which is the official image uploaded to Docker Hub by Microsoft. Then it will set `/app` as the working directory, run `dnu restore` (just as you did), and copy our application to the `/app` directory.  Then the container will run the `dnx web` command and the application will be running on port 5000 using `EXPOSE 5000`.\n\nLet's make a few changes to this file. First, change the base image to\n```\nFROM cloudlens/dnx:1.0.0-beta8\n```\n\nThis image is courtesy of Mark Rendle [@markrendle](https://twitter.com/markrendle\n), it's a bit smaller but also the same base official image for node.js and Python. I like that I can use the same base regardless of the tech stack.\n\nNext, move the last two lines `...EXPOSE` to before the `COPY` line. This will be more efficient by leveraging the build cache in Docker. Now your `Dockerfile` should look like this.\n\n```language:yaml\nFROM cloudlens/dnx:1.0.0-beta8\n\nEXPOSE 5000\nENTRYPOINT [\"dnx\", \"-p\", \"project.json\", \"web\"]\n\nCOPY project.json /app/\nWORKDIR /app\nRUN [\"dnu\", \"restore\"]\nCOPY . /app\n```\n\nBuild your Docker image using the following command.  Replace the `<username>/<projectname>` with what **your** values are in Docker Hub are.  For instance, for me `spboyer/people-service`\n```\ndocker build -t <username>/<projectname> .\n```\nNext, you can now test your docker image on your local machine using\n```\ndocker run -t -d -p 5000:5000 <username/projectname>\n```\nbrowse to `http://0.0.0.0:5000/api/values`\n\n####Travis-CI\n\n<div style=\"float:right;height:100px;width:100px;\">![travis-logo](/content/images/2015/11/travis-logo.png)</div>Travis is a  continuous integration service used to build and test projects hosted at GitHub. It looks for commits and pull requests made your repository and executes builds/test and more based on the configuration and instruction in the `.travis.yml` file.\n\n![travisimg1](/content/images/2015/11/Screen-Shot-2015-11-02-at-11-31-17-AM.png)\n\nBrowse to [travis-ci.org]() and login using your GitHub credentials and select the repository you like to enable. In this case `people-service`.\n\n![people-svc-img](/content/images/2015/11/Screen-Shot-2015-11-02-at-11-31-39-AM.png)\n\nFor Docker integration, your Docker Hub username, password and email will need to be added to the Travis Environment variables. One important note please make sure that the **Display value in build log** is set to false.\n\n![](/content/images/2015/11/Screen-Shot-2015-11-02-at-3-17-41-PM.png)\n\nNext, add the `.travis.yml` file to the root of the project.\n\n```language:yaml\nlanguage: ruby\n\n# whitelist\nbranches:\n  only:\n    - master\n\nservices:\n    #Enable docker service inside travis\n    - docker\n\nbefore_install:\n    - docker login -e=\"$DOCKER_EMAIL\" -u=\"$DOCKER_USERNAME\" -p=\"$DOCKER_PASSWORD\"\n\nscript:\n    #build the image\n    - docker build --no-cache -t spboyer/people-service .\n    #tag the build\n    - docker tag spboyer/people-service:latest spboyer/people-service:v1\n    #push the image to the repository\n    - docker push spboyer/people-service\n```\n\nThe purpose of Travis is to watch our GitHub repo for commits to the `master` branch, build - test (if we have them), then build the Docker image and push the artifact to Docker Hub. Upon a successful build you will see the following:\n\nTravis-CI:\n![](/content/images/2015/11/Screen-Shot-2015-11-02-at-3-38-41-PM.png)\nFor the complete output of the build [click here](https://travis-ci.org/spboyer/docker-people-service/builds/88693512).\n\nDocker Hub:\n![dockerhubrepo](/content/images/2015/11/Screen-Shot-2015-11-02-at-3-42-21-PM-1.png)\n\nA couple of notes here:\n\n* `whitelist` : only building the `master` branch\n* `services` : enable Docker with `- docker`\n* `before_install` : using the Docker credentials set in the Travis environment variables to log into Docker Hub for pushing our image upon completion\n* `- docker tag` : this command tags the image with the version, each checkin of the code to github, I'd typically up this.\n* `- docker push` : sends `:latest` and `:v*` images to `spboyer/people-service`\n\n###Checkpoint\nHere is a good time for a *phew!* Depending on what you've worked with in the past this is a lot to swallow.\n\n* yeoman (`yo aspnet`)\n* yaml\n* ASP.NET 5 (dnx, dnu)\n* Travis-CI\n* GitHub\n\nNext getting the deployment of the application/Docker image to Azure via Tutum.\n\n####Tutum\n\n<div style=\"float:right;\">![tutum-logo](/content/images/2015/11/tutum_logo.png)</div>Tutum is in a word **awesome**.  It supports many cloud providers for deploying your Docker solutions; Azure, AWS among others.  It really takes the difficulty away from trying to understand how to create the VMs, services, etc.  Even know how to do what I need to in Azure, I'd strongly suggest their platform.  Checkout their **how** for more info on [how they work](https://www.tutum.co/how/). *** Note: they have recently joined the Docker team as well.\n\nI will not restate their how to as they have very excellent walk through.  Here are the steps however to getting setup\n\n1. Link your Azure Account [https://support.tutum.co/support/solutions/articles/5000560928-link-your-microsoft-azure-account](https://support.tutum.co/support/solutions/articles/5000560928-link-your-microsoft-azure-account)\n1. Create a Node Cluster - [https://support.tutum.co/support/solutions/articles/5000523221-your-first-node](https://support.tutum.co/support/solutions/articles/5000523221-your-first-node)\n1. Create the Service - [https://support.tutum.co/support/solutions/articles/5000525024-your-first-service](https://support.tutum.co/support/solutions/articles/5000525024-your-first-service)\n\nThese are the basic steps needed to get setup and started with Tutum and Azure. Here are some additional details around what I did getting this total solution working.\n\nFirst, I wanted to makes sure that I could browse to the url without specifying a port. By default, the container port is setup to be `dynamic`.\n![dynamic-port](/content/images/2015/11/first-service-ports.png)\n\nYou can set this to be port `80` by clicking the `dynamic` and changing it to `80` or whichever port you like. After doing so, you will see the published port on the left of the service details screen display `80>5000/tcp`. This means that port **80** is mapping to port **5000** of the container.  Now you can browse to `http://site.io` instead of `http://site.io:33678`\n\nFinally, we want to setup a trigger so that whenever a new version of the Docker image is pushed to Docker Hub tagged with `:latest`; Tutum will have a webhook endpoint for Docker Hub to post a message to.  This POST http call will trigger Tutum to pull the `spboyer/people-service:latest` image and redeploy to our Azure infrastructure.\n\nTo do this, open the **Triggers** tab inside you service detail.\n\n![triggers](/content/images/2015/11/Screen-Shot-2015-11-02-at-6-05-50-PM.png)\n\nFill in the name of the trigger, choose **Redeploy** and click **Add**.  A url will be provided.  Copy the url and head to the Docker Hub Repository where the image is being hosted.\n\nSelect the **Webhooks** link, click Add and paste the url.\n\n![webhooks](/content/images/2015/11/Screen-Shot-2015-11-02-at-6-09-41-PM.png)\n\nWhenever a new image is pushed to the Docker Hub repo with the `:latest` tag, the Webhook will POST to the url causing redeploy to occur.\n\nAn example of the logs (Timeline) from Tutum for a Redeploy\n![redeploy](/content/images/2015/11/Screen-Shot-2015-11-02-at-6-12-13-PM.png)\n\n####Azure\n\n\n<div style=\"float:right;width:150px\">![tutum-logo](/content/images/2015/11/azure_cloud.png)</div>Other than creating the Azure account, and doing the necessary credentials sync there is not much to do in Azure.  Tutum, as mentioned, does all of the work.  \n\nWhen the service node is created, you can log in and see the Virtual Machines being created as if you did it yourself.\n![](/content/images/2015/11/Screen-Shot-2015-11-02-at-6-21-29-PM.png)\nWhen the containers and images are being deployed, all of the ports are created in the Linux VM for you without you needing to know how to do so etc.\n![](/content/images/2015/11/Screen-Shot-2015-11-02-at-6-22-06-PM.png)\nGive this a try! Comment, share, and reach out to me on twitter [@spboyer](http://twitter/spboyer)\n\n\n","html":"<p><img src=\"/content/images/2015/11/Docker-CI-CD.png\" alt=\"CI image\" /></p>\n\n<p>Getting a \"code to deployment\" workflow is a story many organizations want to have nailed down when looking into new technology stacks and architectures such as ASP.NET 5 and the container story like Docker.</p>\n\n<p>I hear from business leaders comments like; \"...that's great, but how do we deploy this, scale it. What does the development pipeline look like?\"</p>\n\n<p>Great questions.</p>\n\n<p>For my own projects I wanted to be able to \"just write code\" and have the rest of the process handled. Not have to worry about how does it get built, deployed, scaled etc. Here is a working sample technology stack using all the cool kids on the block and some old players too.</p>\n\n<h3 id=\"settingitallup\">Setting It All Up</h3>\n\n<p>The initial setup is not hard, but there are some moving parts.</p>\n\n<ol>\n<li>GitHub - setup up your repository for your project with 2 branches minimally; <code>master</code> and <code>development</code> for example.  </li>\n<li>Docker Toolbox - go to <a href=\"http://docs.docker.com/mac/started/\">docs.docker.com</a> and get your local environment setup by walking through the setup instructions, including establishing a Docker Hub account.  </li>\n<li>Travis-CI - head over to <a href=\"http://travis-ci.com\">travis-ci.com</a> and login with your GitHub credentials. Select the repository you created for the project.  </li>\n<li><a href=\"https://azure.com\">Azure</a> - <em>*</em> if you do not have an Azure account, there is a <a href=\"https://azure.microsoft.com/en-us/pricing/free-trial/\">free trial available</a>  </li>\n<li><a href=\"https://www.tutum.co/\">Tutum</a> - Create a new account here by logging in with your Docker Hub account credentials.</li>\n</ol>\n\n<p>Lastly for the development of the application, any IDE or editor is fine; Visual Studio Code is my editor of choice lately. For project creation, the yeoman ASP.NET generator <code>npm install -g generator-aspnet</code> is what we'll use to scaffold the Web API project.</p>\n\n<h3 id=\"thedeveloperstory\">The Developer Story</h3>\n\n<ul>\n<li>Visual Studio Code</li>\n<li>GitHub</li>\n</ul>\n\n<p>This is a simple ASP.NET 5 Web API application. The editor of choice is <strong>Visual Studio Code</strong> (<a href=\"http://code.visualstudio.com\">code.visualstudio.com</a>) on OS X and we'll use the aspnet yeoman generator to create the project. <a href=\"http://github.com/omnisharp/generator-aspnet\">github.com/omnisharp/generator-aspnet</a>.</p>\n\n<p><img src=\"/content/images/2015/11/Screen-Shot-2015-11-02-at-10-58-12-AM.png\" alt=\"yo aspnet\" /></p>\n\n<pre><code>$ cd people-service\n$ dnu restore\n$ code .\n</code></pre>\n\n<p><em>*</em> Edit your project.json and add the following to your <code>web</code> command in order set the entry point url.  If you are getting <code>ERR CONNECTION REFUSED</code> when running your application under Docker this probably the case.</p>\n\n<pre><code class=\"language-language:js\">\"commands\": {\n    \"web\": \"Microsoft.AspNet.Server.Kestrel --server.urls http://0.0.0.0:5000\"\n  },\n</code></pre>\n\n<blockquote>\n  <p>For more on creating applications with the generator see <strong><a href=\"https://msdn.microsoft.com/en-us/magazine/mt573713.aspx\">ASP.NET Anywhere w/ Yeoman and Omnisharp</a></strong> by <a href=\"http://twitter.com/spboyer\">Shayne Boyer</a> &amp; <a href=\"https://twitter.com/sayedihashimi\">Sayed I. Hashimi</a> in MSDN Oct. </p>\n</blockquote>\n\n<p>This will create the web api application and restore the dependencies from nuget.  The <code>code .</code> command is a shortcut that launches VSCode in the current folder and can be found on the VSCode site.</p>\n\n<p>Test the site by running the <code>dnx web</code> command from terminal and browsing to <code>http://localhost:5000/api/values</code>.</p>\n\n<p>At this point the shell of the web api application is complete.</p>\n\n<h4 id=\"docker\">Docker</h4>\n\n<p>The yeoman generator does include a <code>Dockerfile</code> by default with the project when it is created.</p>\n\n<pre><code class=\"language-language:yaml\">FROM microsoft/aspnet:1.0.0-beta8\n\nCOPY project.json /app/  \nWORKDIR /app  \nRUN [\"dnu\", \"restore\"]  \nCOPY . /app\n\nEXPOSE 5000  \nENTRYPOINT [\"dnx\", \"-p\", \"project.json\", \"web\"]  \n</code></pre>\n\n<p>The <code>Dockerfile</code> here states that it will use the base <code>microsoft/aspnet:1.0.0-beta8</code> image; which is the official image uploaded to Docker Hub by Microsoft. Then it will set <code>/app</code> as the working directory, run <code>dnu restore</code> (just as you did), and copy our application to the <code>/app</code> directory.  Then the container will run the <code>dnx web</code> command and the application will be running on port 5000 using <code>EXPOSE 5000</code>.</p>\n\n<p>Let's make a few changes to this file. First, change the base image to  </p>\n\n<pre><code>FROM cloudlens/dnx:1.0.0-beta8  \n</code></pre>\n\n<p>This image is courtesy of Mark Rendle [@markrendle](https://twitter.com/markrendle <br />\n), it's a bit smaller but also the same base official image for node.js and Python. I like that I can use the same base regardless of the tech stack.</p>\n\n<p>Next, move the last two lines <code>...EXPOSE</code> to before the <code>COPY</code> line. This will be more efficient by leveraging the build cache in Docker. Now your <code>Dockerfile</code> should look like this.</p>\n\n<pre><code class=\"language-language:yaml\">FROM cloudlens/dnx:1.0.0-beta8\n\nEXPOSE 5000  \nENTRYPOINT [\"dnx\", \"-p\", \"project.json\", \"web\"]\n\nCOPY project.json /app/  \nWORKDIR /app  \nRUN [\"dnu\", \"restore\"]  \nCOPY . /app  \n</code></pre>\n\n<p>Build your Docker image using the following command.  Replace the <code>&lt;username&gt;/&lt;projectname&gt;</code> with what <strong>your</strong> values are in Docker Hub are.  For instance, for me <code>spboyer/people-service</code>  </p>\n\n<pre><code>docker build -t &lt;username&gt;/&lt;projectname&gt; .  \n</code></pre>\n\n<p>Next, you can now test your docker image on your local machine using  </p>\n\n<pre><code>docker run -t -d -p 5000:5000 &lt;username/projectname&gt;  \n</code></pre>\n\n<p>browse to <code>http://0.0.0.0:5000/api/values</code></p>\n\n<h4 id=\"travisci\">Travis-CI</h4>\n\n<p><div style=\"float:right;height:100px;width:100px;\"><img src=\"/content/images/2015/11/travis-logo.png\" alt=\"travis-logo\" title=\"\" /></div>Travis is a  continuous integration service used to build and test projects hosted at GitHub. It looks for commits and pull requests made your repository and executes builds/test and more based on the configuration and instruction in the <code>.travis.yml</code> file.</p>\n\n<p><img src=\"/content/images/2015/11/Screen-Shot-2015-11-02-at-11-31-17-AM.png\" alt=\"travisimg1\" /></p>\n\n<p>Browse to <a href=\"\">travis-ci.org</a> and login using your GitHub credentials and select the repository you like to enable. In this case <code>people-service</code>.</p>\n\n<p><img src=\"/content/images/2015/11/Screen-Shot-2015-11-02-at-11-31-39-AM.png\" alt=\"people-svc-img\" /></p>\n\n<p>For Docker integration, your Docker Hub username, password and email will need to be added to the Travis Environment variables. One important note please make sure that the <strong>Display value in build log</strong> is set to false.</p>\n\n<p><img src=\"/content/images/2015/11/Screen-Shot-2015-11-02-at-3-17-41-PM.png\" alt=\"\" /></p>\n\n<p>Next, add the <code>.travis.yml</code> file to the root of the project.</p>\n\n<pre><code class=\"language-language:yaml\">language: ruby\n\n# whitelist\nbranches:  \n  only:\n    - master\n\nservices:  \n    #Enable docker service inside travis\n    - docker\n\nbefore_install:  \n    - docker login -e=\"$DOCKER_EMAIL\" -u=\"$DOCKER_USERNAME\" -p=\"$DOCKER_PASSWORD\"\n\nscript:  \n    #build the image\n    - docker build --no-cache -t spboyer/people-service .\n    #tag the build\n    - docker tag spboyer/people-service:latest spboyer/people-service:v1\n    #push the image to the repository\n    - docker push spboyer/people-service\n</code></pre>\n\n<p>The purpose of Travis is to watch our GitHub repo for commits to the <code>master</code> branch, build - test (if we have them), then build the Docker image and push the artifact to Docker Hub. Upon a successful build you will see the following:</p>\n\n<p>Travis-CI: <br />\n<img src=\"/content/images/2015/11/Screen-Shot-2015-11-02-at-3-38-41-PM.png\" alt=\"\" />\nFor the complete output of the build <a href=\"https://travis-ci.org/spboyer/docker-people-service/builds/88693512\">click here</a>.</p>\n\n<p>Docker Hub: <br />\n<img src=\"/content/images/2015/11/Screen-Shot-2015-11-02-at-3-42-21-PM-1.png\" alt=\"dockerhubrepo\" /></p>\n\n<p>A couple of notes here:</p>\n\n<ul>\n<li><code>whitelist</code> : only building the <code>master</code> branch</li>\n<li><code>services</code> : enable Docker with <code>- docker</code></li>\n<li><code>before_install</code> : using the Docker credentials set in the Travis environment variables to log into Docker Hub for pushing our image upon completion</li>\n<li><code>- docker tag</code> : this command tags the image with the version, each checkin of the code to github, I'd typically up this.</li>\n<li><code>- docker push</code> : sends <code>:latest</code> and <code>:v*</code> images to <code>spboyer/people-service</code></li>\n</ul>\n\n<h3 id=\"checkpoint\">Checkpoint</h3>\n\n<p>Here is a good time for a <em>phew!</em> Depending on what you've worked with in the past this is a lot to swallow.</p>\n\n<ul>\n<li>yeoman (<code>yo aspnet</code>)</li>\n<li>yaml</li>\n<li>ASP.NET 5 (dnx, dnu)</li>\n<li>Travis-CI</li>\n<li>GitHub</li>\n</ul>\n\n<p>Next getting the deployment of the application/Docker image to Azure via Tutum.</p>\n\n<h4 id=\"tutum\">Tutum</h4>\n\n<p><div style=\"float:right;\"><img src=\"/content/images/2015/11/tutum_logo.png\" alt=\"tutum-logo\" title=\"\" /></div>Tutum is in a word <strong>awesome</strong>.  It supports many cloud providers for deploying your Docker solutions; Azure, AWS among others.  It really takes the difficulty away from trying to understand how to create the VMs, services, etc.  Even know how to do what I need to in Azure, I'd strongly suggest their platform.  Checkout their <strong>how</strong> for more info on <a href=\"https://www.tutum.co/how/\">how they work</a>. <em>*</em> Note: they have recently joined the Docker team as well.</p>\n\n<p>I will not restate their how to as they have very excellent walk through.  Here are the steps however to getting setup</p>\n\n<ol>\n<li>Link your Azure Account <a href=\"https://support.tutum.co/support/solutions/articles/5000560928-link-your-microsoft-azure-account\">https://support.tutum.co/support/solutions/articles/5000560928-link-your-microsoft-azure-account</a>  </li>\n<li>Create a Node Cluster - <a href=\"https://support.tutum.co/support/solutions/articles/5000523221-your-first-node\">https://support.tutum.co/support/solutions/articles/5000523221-your-first-node</a>  </li>\n<li>Create the Service - <a href=\"https://support.tutum.co/support/solutions/articles/5000525024-your-first-service\">https://support.tutum.co/support/solutions/articles/5000525024-your-first-service</a></li>\n</ol>\n\n<p>These are the basic steps needed to get setup and started with Tutum and Azure. Here are some additional details around what I did getting this total solution working.</p>\n\n<p>First, I wanted to makes sure that I could browse to the url without specifying a port. By default, the container port is setup to be <code>dynamic</code>. <br />\n<img src=\"/content/images/2015/11/first-service-ports.png\" alt=\"dynamic-port\" /></p>\n\n<p>You can set this to be port <code>80</code> by clicking the <code>dynamic</code> and changing it to <code>80</code> or whichever port you like. After doing so, you will see the published port on the left of the service details screen display <code>80&gt;5000/tcp</code>. This means that port <strong>80</strong> is mapping to port <strong>5000</strong> of the container.  Now you can browse to <code>http://site.io</code> instead of <code>http://site.io:33678</code></p>\n\n<p>Finally, we want to setup a trigger so that whenever a new version of the Docker image is pushed to Docker Hub tagged with <code>:latest</code>; Tutum will have a webhook endpoint for Docker Hub to post a message to.  This POST http call will trigger Tutum to pull the <code>spboyer/people-service:latest</code> image and redeploy to our Azure infrastructure.</p>\n\n<p>To do this, open the <strong>Triggers</strong> tab inside you service detail.</p>\n\n<p><img src=\"/content/images/2015/11/Screen-Shot-2015-11-02-at-6-05-50-PM.png\" alt=\"triggers\" /></p>\n\n<p>Fill in the name of the trigger, choose <strong>Redeploy</strong> and click <strong>Add</strong>.  A url will be provided.  Copy the url and head to the Docker Hub Repository where the image is being hosted.</p>\n\n<p>Select the <strong>Webhooks</strong> link, click Add and paste the url.</p>\n\n<p><img src=\"/content/images/2015/11/Screen-Shot-2015-11-02-at-6-09-41-PM.png\" alt=\"webhooks\" /></p>\n\n<p>Whenever a new image is pushed to the Docker Hub repo with the <code>:latest</code> tag, the Webhook will POST to the url causing redeploy to occur.</p>\n\n<p>An example of the logs (Timeline) from Tutum for a Redeploy <br />\n<img src=\"/content/images/2015/11/Screen-Shot-2015-11-02-at-6-12-13-PM.png\" alt=\"redeploy\" /></p>\n\n<h4 id=\"azure\">Azure</h4>\n\n<p><div style=\"float:right;width:150px\"><img src=\"/content/images/2015/11/azure_cloud.png\" alt=\"tutum-logo\" title=\"\" /></div>Other than creating the Azure account, and doing the necessary credentials sync there is not much to do in Azure.  Tutum, as mentioned, does all of the work.  </p>\n\n<p>When the service node is created, you can log in and see the Virtual Machines being created as if you did it yourself. <br />\n<img src=\"/content/images/2015/11/Screen-Shot-2015-11-02-at-6-21-29-PM.png\" alt=\"\" />\nWhen the containers and images are being deployed, all of the ports are created in the Linux VM for you without you needing to know how to do so etc. <br />\n<img src=\"/content/images/2015/11/Screen-Shot-2015-11-02-at-6-22-06-PM.png\" alt=\"\" />\nGive this a try! Comment, share, and reach out to me on twitter <a href=\"http://twitter/spboyer\">@spboyer</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1446478832632,"created_by":1,"updated_at":1446506647436,"updated_by":1,"published_at":1446506647452,"published_by":1},{"id":57,"uuid":"86f61db3-962c-496d-9674-9c16e192def9","title":"The Best of Both Worlds - Angular 2 / ASP.NET 5 SPA Template","slug":"angular2-aspnet5-spa-template","markdown":"***Updated 11.19.2015 for RC1: http://github.com/spboyer/cleanshave\n\nTwo of the technology stacks that are at the forefront and making a lot of noise are Angular 2 and ASP.NET 5.\n\nAngular 2, for obvious reasons, this is the next rev of Google's SPA framework. And just to highlight a few points, from my perspective, why I'm paying attention.\n\n* Built with TypeScript\n* Performance gains\n* Browser support (IE 9 even there)\n* Mobile first thought\n\nASP.NET 5, I have been talking, blogging and contributing to this project over the last 18+ months and I'm very excited of what it is already showing.  \n\n* Rebuilt with Cloud in mind\n* Cross Platform - Linux, OS X, Windows\n* Middleware model - much like node.js\n* Huge speed improvements\n* much more..\n\nAt the Microsoft MVP Summit this November; Brad Green from Google presented on Angular 2, status of the framework, collaboration with Microsoft and things to come. Check out his presentation <a href=\"https://channel9.msdn.com/Events/ASPNET-Events/ASPNET-Fall-Sessions/Brad-Green-from-Google\" target=\"_blank\">here</a>. \n\nNext, Steve Sanderson from the ASP.NET team presented the Music Store application in Angular 2 and ASP.NET 5.  Below is the full presentation from Channel 9.\n<iframe src=\"https://channel9.msdn.com/Events/ASPNET-Events/ASPNET-Fall-Sessions/ASPNET--Spa/player\" width=\"640\" height=\"360\" allowFullScreen frameBorder=\"0\"></iframe>\n\n###A Basic SPA Template\nBased on Steve's talk I put together a basic template to use. The code is available on [GitHub](http://github.com/spboyer/cleanshave) (http://github.com/spboyer/cleanshave). \n\n####Getting Setup\nThings you will need\n* ASP.NET 5 - [docs.asp.net](http://docs.asp.net) to install the latest version\n* Typescript - [typescriptlang.org](http://typescriptlang.org/#Download) or `npm install typescript -g` from a terminal window\n* Node.js - [nodejs.org](http://nodejs.org) or `brew install node` or for windows `choco install nodejs`\n\nThese are the base items, a couple other tools used in the solution are [nodemon](http://nodemon.io) and gulp. Install via terminal `npm install nodemon gulp-cli -g`.\n\nNext,\n1. Fork and clone the site\n2. Run `npm install`\n3. Open a terminal window and execute `npm run tsc`, this starts the TypeScript compiler\n4. Open a second terminal window and execute `npm start`.  This command runs the `gulp build` task, then starts [nodemon](http://nodemon.io) for `dnx web`. The `nodemon` process will watch for any changes to the C# code and/or JavaScript files (transpiled from `tsc`) and restart then **kestrel** server.\n5. Open http://localhost:5000\n\n####App Structure\nThe ASP.NET 5 application is nothing more than a simple web application, same format you could generate from the built in templates in Visual Studio (without Authentication chosen) or using the [Yeoman generators](http://github.com/omnisharp/generator-aspnet).\n\n* `Views/Home/Index.cshtml` file is the html file containing the host of the Angular application tag.\n* `Views/Shared/_Layout.cshtml` is the shell html file.\n* `Startup.cs` - one piece that is important to call out here in relation to the Angular routing is the following:\n\n```\n// 404 routing, or otherwise routing logic\n// if route is not found go Home\nroutes.MapRoute(\"spa-fallback\", \"{*anything}\", new { controller = \"Home\", action = \"Index\" });\n``` \n####Angular 2 Code\nAll of the Angular 2 code is withing the `wwwroot` folder, due to the fact that all static content under ASP.NET 5 is to live in the location referenced in the `webroot` property defined in `project.json` file.\n\n![app-root](/content/images/2015/11/Screen-Shot-2015-11-13-at-12-38-16-PM.png)\n\nBecause this is a starter template, it is a simple structure. If you want add a new view to the site, it's pretty simple.\n\nAdd the folder and view (`my/my.html`)\n![myfolder](/content/images/2015/11/Screen-Shot-2015-11-13-at-12-50-25-PM.png)\n```\n<div class=\"container\">\n\t<h1>My Page</h1>\n</div>\n```\n\nAdd the component (`my.ts`)\n![mytsfile](/content/images/2015/11/Screen-Shot-2015-11-13-at-12-50-14-PM.png)\n```\nimport * as ng from 'angular2/angular2';\n\n@ng.Component({\n\tselector: 'my',\n\ttemplateUrl: './app/my/my.html'\n})\nexport class My{\n\n\tconstructor() {\n\n\n\t}\n}\n```\n\nAdd the new route in `routes.config.ts`\n![routes](http://)\n\n\nAnd finally add the link to the `app.html` page in the *navigation* portions of the template.\n\n```\n<li><a [router-link]=\"[routes.my.as]\">My</a></li>\n```\n![link](/content/images/2015/11/Screen-Shot-2015-11-13-at-12-57-24-PM.png)\n\nIf you have the site still running, the `tsc` compiler and `nodemon` will pick up all of these changes and all you have to do is refresh. (as a note make sure that you have the dev tools open in Chrome and cache disabled).\n\n###Opening the code in Visual Studio 2015\nTo open in VS you need to open using the git connector.\n\n<img width=\"392\" alt=\"screen shot 2015-11-21 at 8 46 44 am\" src=\"https://cloud.githubusercontent.com/assets/7681382/11319010/828bae9a-9036-11e5-8e8e-fa09533e5db6.png\">\n\nThen open the `project.json` file. Be sure to have the **ASPNET 5** file/project type selected.\n\n<img width=\"924\" alt=\"screen shot 2015-11-21 at 8 47 23 am\" src=\"https://cloud.githubusercontent.com/assets/7681382/11319012/a6cdbbfe-9036-11e5-9ff9-6f4fc91f90a8.png\">\n\nget the latest push of the code, I had to add a `Before Build` step to have the gulp tasks run and build/compile the typescript and angular 2 project portions if you are just going to F5.\n\n####Summary\nGive this a look, comment, share. There is a need for a good SPA template for ASP.NET 5.  If there are core features, let's put them in send a PR or submit an [issue](http://github.com/spboyer/cleanshave/issues).\n\nThanks! \n\n\n\n\n","html":"<p><em>*</em>Updated 11.19.2015 for RC1: <a href=\"http://github.com/spboyer/cleanshave\">http://github.com/spboyer/cleanshave</a></p>\n\n<p>Two of the technology stacks that are at the forefront and making a lot of noise are Angular 2 and ASP.NET 5.</p>\n\n<p>Angular 2, for obvious reasons, this is the next rev of Google's SPA framework. And just to highlight a few points, from my perspective, why I'm paying attention.</p>\n\n<ul>\n<li>Built with TypeScript</li>\n<li>Performance gains</li>\n<li>Browser support (IE 9 even there)</li>\n<li>Mobile first thought</li>\n</ul>\n\n<p>ASP.NET 5, I have been talking, blogging and contributing to this project over the last 18+ months and I'm very excited of what it is already showing.  </p>\n\n<ul>\n<li>Rebuilt with Cloud in mind</li>\n<li>Cross Platform - Linux, OS X, Windows</li>\n<li>Middleware model - much like node.js</li>\n<li>Huge speed improvements</li>\n<li>much more..</li>\n</ul>\n\n<p>At the Microsoft MVP Summit this November; Brad Green from Google presented on Angular 2, status of the framework, collaboration with Microsoft and things to come. Check out his presentation <a href=\"https://channel9.msdn.com/Events/ASPNET-Events/ASPNET-Fall-Sessions/Brad-Green-from-Google\" target=\"_blank\">here</a>. </p>\n\n<p>Next, Steve Sanderson from the ASP.NET team presented the Music Store application in Angular 2 and ASP.NET 5.  Below is the full presentation from Channel 9.  </p>\n\n<iframe src=\"https://channel9.msdn.com/Events/ASPNET-Events/ASPNET-Fall-Sessions/ASPNET--Spa/player\" width=\"640\" height=\"360\" allowFullScreen frameBorder=\"0\"></iframe>\n\n<h3 id=\"abasicspatemplate\">A Basic SPA Template</h3>\n\n<p>Based on Steve's talk I put together a basic template to use. The code is available on <a href=\"http://github.com/spboyer/cleanshave\">GitHub</a> (<a href=\"http://github.com/spboyer/cleanshave\">http://github.com/spboyer/cleanshave</a>). </p>\n\n<h4 id=\"gettingsetup\">Getting Setup</h4>\n\n<p>Things you will need <br />\n* ASP.NET 5 - <a href=\"http://docs.asp.net\">docs.asp.net</a> to install the latest version\n* Typescript - <a href=\"http://typescriptlang.org/#Download\">typescriptlang.org</a> or <code>npm install typescript -g</code> from a terminal window\n* Node.js - <a href=\"http://nodejs.org\">nodejs.org</a> or <code>brew install node</code> or for windows <code>choco install nodejs</code></p>\n\n<p>These are the base items, a couple other tools used in the solution are <a href=\"http://nodemon.io\">nodemon</a> and gulp. Install via terminal <code>npm install nodemon gulp-cli -g</code>.</p>\n\n<p>Next, <br />\n1. Fork and clone the site <br />\n2. Run <code>npm install</code> <br />\n3. Open a terminal window and execute <code>npm run tsc</code>, this starts the TypeScript compiler <br />\n4. Open a second terminal window and execute <code>npm start</code>.  This command runs the <code>gulp build</code> task, then starts <a href=\"http://nodemon.io\">nodemon</a> for <code>dnx web</code>. The <code>nodemon</code> process will watch for any changes to the C# code and/or JavaScript files (transpiled from <code>tsc</code>) and restart then <strong>kestrel</strong> server. <br />\n5. Open <a href=\"http://localhost:5000\">http://localhost:5000</a></p>\n\n<h4 id=\"appstructure\">App Structure</h4>\n\n<p>The ASP.NET 5 application is nothing more than a simple web application, same format you could generate from the built in templates in Visual Studio (without Authentication chosen) or using the <a href=\"http://github.com/omnisharp/generator-aspnet\">Yeoman generators</a>.</p>\n\n<ul>\n<li><code>Views/Home/Index.cshtml</code> file is the html file containing the host of the Angular application tag.</li>\n<li><code>Views/Shared/_Layout.cshtml</code> is the shell html file.</li>\n<li><code>Startup.cs</code> - one piece that is important to call out here in relation to the Angular routing is the following:</li>\n</ul>\n\n<pre><code>// 404 routing, or otherwise routing logic\n// if route is not found go Home\nroutes.MapRoute(\"spa-fallback\", \"{*anything}\", new { controller = \"Home\", action = \"Index\" });  \n</code></pre>\n\n<h4 id=\"angular2code\">Angular 2 Code</h4>\n\n<p>All of the Angular 2 code is withing the <code>wwwroot</code> folder, due to the fact that all static content under ASP.NET 5 is to live in the location referenced in the <code>webroot</code> property defined in <code>project.json</code> file.</p>\n\n<p><img src=\"/content/images/2015/11/Screen-Shot-2015-11-13-at-12-38-16-PM.png\" alt=\"app-root\" /></p>\n\n<p>Because this is a starter template, it is a simple structure. If you want add a new view to the site, it's pretty simple.</p>\n\n<p>Add the folder and view (<code>my/my.html</code>) <br />\n<img src=\"/content/images/2015/11/Screen-Shot-2015-11-13-at-12-50-25-PM.png\" alt=\"myfolder\" /></p>\n\n<pre><code>&lt;div class=\"container\"&gt;  \n    &lt;h1&gt;My Page&lt;/h1&gt;\n&lt;/div&gt;  \n</code></pre>\n\n<p>Add the component (<code>my.ts</code>) <br />\n<img src=\"/content/images/2015/11/Screen-Shot-2015-11-13-at-12-50-14-PM.png\" alt=\"mytsfile\" /></p>\n\n<pre><code>import * as ng from 'angular2/angular2';\n\n@ng.Component({\n    selector: 'my',\n    templateUrl: './app/my/my.html'\n})\nexport class My{\n\n    constructor() {\n\n\n    }\n}\n</code></pre>\n\n<p>Add the new route in <code>routes.config.ts</code> <br />\n<img src=\"http://\" alt=\"routes\" /></p>\n\n<p>And finally add the link to the <code>app.html</code> page in the <em>navigation</em> portions of the template.</p>\n\n<pre><code>&lt;li&gt;&lt;a [router-link]=\"[routes.my.as]\"&gt;My&lt;/a&gt;&lt;/li&gt;  \n</code></pre>\n\n<p><img src=\"/content/images/2015/11/Screen-Shot-2015-11-13-at-12-57-24-PM.png\" alt=\"link\" /></p>\n\n<p>If you have the site still running, the <code>tsc</code> compiler and <code>nodemon</code> will pick up all of these changes and all you have to do is refresh. (as a note make sure that you have the dev tools open in Chrome and cache disabled).</p>\n\n<h3 id=\"openingthecodeinvisualstudio2015\">Opening the code in Visual Studio 2015</h3>\n\n<p>To open in VS you need to open using the git connector.</p>\n\n<p><img width=\"392\" alt=\"screen shot 2015-11-21 at 8 46 44 am\" src=\"https://cloud.githubusercontent.com/assets/7681382/11319010/828bae9a-9036-11e5-8e8e-fa09533e5db6.png\"></p>\n\n<p>Then open the <code>project.json</code> file. Be sure to have the <strong>ASPNET 5</strong> file/project type selected.</p>\n\n<p><img width=\"924\" alt=\"screen shot 2015-11-21 at 8 47 23 am\" src=\"https://cloud.githubusercontent.com/assets/7681382/11319012/a6cdbbfe-9036-11e5-9ff9-6f4fc91f90a8.png\"></p>\n\n<p>get the latest push of the code, I had to add a <code>Before Build</code> step to have the gulp tasks run and build/compile the typescript and angular 2 project portions if you are just going to F5.</p>\n\n<h4 id=\"summary\">Summary</h4>\n\n<p>Give this a look, comment, share. There is a need for a good SPA template for ASP.NET 5.  If there are core features, let's put them in send a PR or submit an <a href=\"http://github.com/spboyer/cleanshave/issues\">issue</a>.</p>\n\n<p>Thanks! </p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"An Angular 2 and ASP.NET 5 SPA Template giving you the best tech now.","meta_description":"Use the fastest SPA framework in Angular 2 with the best server framework ASP.NET 5 on any OS.  A SPA template for today using tomorrow's technology.","author_id":1,"created_at":1447431561660,"created_by":1,"updated_at":1448118408382,"updated_by":1,"published_at":1447438773579,"published_by":1},{"id":58,"uuid":"e27bdbdf-3c30-455a-a4ea-c74739be21f5","title":"Preparing for dotnet cli","slug":"preparing-for-dotnet-cli","markdown":"There was a ton of cool that came out of the Connect()(http://connect2015.visualstudio.com/) event. For me the announcement of ASP.NET 5 going RC was a great milestone. \n\n* Go Live License with support\n* Linux, Windows, OS X\n* Installers available - http://get.asp.net \n\n>Checkout [_Cleanshave_](http://github.com/spboyer/cleanshave) available on GitHub an ASP.NET 5 & Angular 2 template called .\n\nThere were a bunch of other items announced such as open sourcing **Visual Studio Code** ([http://github.com/microsoft/vscode](http://github.com/microsoft/vscode)) and showing off [**Glimpse**](http://getglimpse.com/).\n\n###What's Next\nOne of the things shown was the **dotnet cli**. This is the next iteration of the command line tooling for .NET. Currently we are typing `dnx run` for console applications or `dnx web` for web apps. The `dnu restore` command is used to download and install the packages from nuget. And there are a list of other commands related to `dnx`,`dnu`. \n\nIn the next release, **RC2**, slated for sometime in Q1 2016. The commands will be reduced to:\n\n```\ndotnet run\ndotnet compile\ndotnet pack\ndotnet restore\ndotnet publish\n```\n\nNotice that consistency with the actual command name **dotnet**? If you have been in other technologies like node.js, ruby or python; the cli is similar on that platform.  Typing **node [arg]** or **python [arg]**.\n\nIn the interest of getting the fingers ready, I created a simple function/alias for the current _common_ `dnx`,`dnu` commands and mapped them to the new `dotnet` command for my OS X dev machine.\n\nI added this to my `~/.bashrc` and now to run my ASP.NET 5 web apps I can type `dotnet restore` and `dotnet run`.\n\n```\n### dnvm list ...\n### dnx web -> dotnet run\n### dnx run -> dotnet run\n### dnu publish -> dotnet publish\n### dnu build -> dotnet compile\n### dnu restore -> dotnet restore\n### dnu install -> dotnet install\n\nfunction dotnet() {\n     local c=$1;\n     local args=$2;\n     local opt=$3\n\ncase $c in\n'run')      dnx web\n            ;;\n'publish')  dnu publish $args $opt\n            ;;\n'compile') dnu build $args $opt\n           ;;\n'restore') dnu restore\n           ;;\n'install') dnu install $args $opt\n           ;;\n'list')    dnvm list\n           ;;\n esac\n}\n\n```\n####Summary\nOf course, some of this is subject to change. And the `dnx` and `dnu` commands are still valid and operable.  Feel free to share. \n\n####Links\nScott Hanselman Summary of Connect() - http://www.hanselman.com/blog/ASPNET5AndNETCoreRC1InContextPlusAllTheConnect2015News.aspx ","html":"<p>There was a ton of cool that came out of the Connect()(<a href=\"http://connect2015.visualstudio.com/\">http://connect2015.visualstudio.com/</a>) event. For me the announcement of ASP.NET 5 going RC was a great milestone. </p>\n\n<ul>\n<li>Go Live License with support</li>\n<li>Linux, Windows, OS X</li>\n<li>Installers available - <a href=\"http://get.asp.net\">http://get.asp.net</a> </li>\n</ul>\n\n<blockquote>\n  <p>Checkout <a href=\"http://github.com/spboyer/cleanshave\"><em>Cleanshave</em></a> available on GitHub an ASP.NET 5 &amp; Angular 2 template called .</p>\n</blockquote>\n\n<p>There were a bunch of other items announced such as open sourcing <strong>Visual Studio Code</strong> (<a href=\"http://github.com/microsoft/vscode\">http://github.com/microsoft/vscode</a>) and showing off <a href=\"http://getglimpse.com/\"><strong>Glimpse</strong></a>.</p>\n\n<h3 id=\"whatsnext\">What's Next</h3>\n\n<p>One of the things shown was the <strong>dotnet cli</strong>. This is the next iteration of the command line tooling for .NET. Currently we are typing <code>dnx run</code> for console applications or <code>dnx web</code> for web apps. The <code>dnu restore</code> command is used to download and install the packages from nuget. And there are a list of other commands related to <code>dnx</code>,<code>dnu</code>. </p>\n\n<p>In the next release, <strong>RC2</strong>, slated for sometime in Q1 2016. The commands will be reduced to:</p>\n\n<pre><code>dotnet run  \ndotnet compile  \ndotnet pack  \ndotnet restore  \ndotnet publish  \n</code></pre>\n\n<p>Notice that consistency with the actual command name <strong>dotnet</strong>? If you have been in other technologies like node.js, ruby or python; the cli is similar on that platform.  Typing <strong>node [arg]</strong> or <strong>python [arg]</strong>.</p>\n\n<p>In the interest of getting the fingers ready, I created a simple function/alias for the current <em>common</em> <code>dnx</code>,<code>dnu</code> commands and mapped them to the new <code>dotnet</code> command for my OS X dev machine.</p>\n\n<p>I added this to my <code>~/.bashrc</code> and now to run my ASP.NET 5 web apps I can type <code>dotnet restore</code> and <code>dotnet run</code>.</p>\n\n<pre><code>### dnvm list ...\n### dnx web -&gt; dotnet run\n### dnx run -&gt; dotnet run\n### dnu publish -&gt; dotnet publish\n### dnu build -&gt; dotnet compile\n### dnu restore -&gt; dotnet restore\n### dnu install -&gt; dotnet install\n\nfunction dotnet() {  \n     local c=$1;\n     local args=$2;\n     local opt=$3\n\ncase $c in  \n'run')      dnx web  \n            ;;\n'publish')  dnu publish $args $opt  \n            ;;\n'compile') dnu build $args $opt  \n           ;;\n'restore') dnu restore  \n           ;;\n'install') dnu install $args $opt  \n           ;;\n'list')    dnvm list  \n           ;;\n esac\n}\n</code></pre>\n\n<h4 id=\"summary\">Summary</h4>\n\n<p>Of course, some of this is subject to change. And the <code>dnx</code> and <code>dnu</code> commands are still valid and operable.  Feel free to share. </p>\n\n<h4 id=\"links\">Links</h4>\n\n<p>Scott Hanselman Summary of Connect() - <a href=\"http://www.hanselman.com/blog/ASPNET5AndNETCoreRC1InContextPlusAllTheConnect2015News.aspx\">http://www.hanselman.com/blog/ASPNET5AndNETCoreRC1InContextPlusAllTheConnect2015News.aspx</a> </p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1448041908023,"created_by":1,"updated_at":1448279050273,"updated_by":1,"published_at":1448044090912,"published_by":1},{"id":59,"uuid":"32d12956-c7a1-48b4-92d4-340be4902d4e","title":"All about that npm no Bower","slug":"all-about-that-config-no-bower","markdown":"One of the many new features of ASP.NET 5, and the \"new\" Microsoft as some would call it, is the implementation or integration of the open tooling and other package managers in the OSS world.  Node, grunt, gulp and Bower are terms not unbeknownst to web developers using other platforms.\n\nHowever, with all of this comes more setup or management of tooling or \"what to use when\" etc, and some of the feedback from the community within ASP.NET has been around this very topic.\n\n###Converting Web Application to use npm\nHere is a quick conversion of the basic web application from using Bower to using npm.\n\n* delete .bowerrc\n\nSince we are not using Bower, there is no need for the file. The purpose of the file, FYI, is to set the installation location of the libraries downloaded and in this case it was set to `wwwroot/lib`.\n\n* npm install the items in bower.json \n```\nnpm install bootstrap jquery jquery-validation --save\n```\nThis adds **bootstrap**, **jquery** and **jquery-validation** to the `package.json` file in the dependencies node.\n```\n,\n  \"dependencies\": {\n    \"bootstrap\": \"^3.3.6\",\n    \"jquery\": \"^2.1.4\",\n    \"jquery-validation\": \"^1.14.0\"\n  }\n```\nThe last JavaScript resource used, is **jquery-validation-unobtrusive** from the ASP.NET team, but this is not currently available in the npm registry, however there is a [pending PR](https://github.com/aspnet/jquery-validation-unobtrusive/pull/16) to get this resolved. \n\nIn order to get it added, simply npm install with the url of the git repository.\n\n```\nnpm install https://github.com/aspnet/jquery-validation-unobtrusive --save\n```\nThere are some changes need for the `gulpfile.js` setup and tasks.  First, setup the configuration for the sources and destinations of the resources.\n\n```language:javascript\nvar library = {\n  base: \"node_modules\",\n  destination: \"lib\",\n  source: [\n    // glob pattern to get the dirname and match only js and min.js file wanted\n    path.dirname(require.resolve('ASP.NET/jquery.validate.unobtrusive.js')) + '/*unobtrusive**.js',\n    // alternative of declaring each file\n    require.resolve('bootstrap/dist/js/bootstrap.js'),\n    require.resolve('bootstrap/dist/js/bootstrap.min.js'),\n    require.resolve('bootstrap/dist/css/bootstrap.css'),\n    // glob pattern to get all files within the directory\n    path.dirname(require.resolve('bootstrap/dist/fonts/glyphicons-halflings-regular.woff')) + '/**',\n    // declare each file\n    require.resolve('jquery/dist/jquery.js'),\n    require.resolve('jquery/dist/jquery.min.js'),\n    // only one file is distributed\n    require.resolve('jquery-validation/dist/jquery.validate.js')\n  ]\n}\n```\nNext, we need to add the copy task to get the resources moved to `\\lib` folder.\n\n```\ngulp.task(\"lib\", function () {\n  return gulp.src(library.source, { base: library.base })\n    .pipe(gulp.dest(paths.webroot + library.destination));\n});\n```\n\nAdd a `clean:lib` task as well to follow the pattern for resetting the `\\lib` folder \n\n```\ngulp.task(\"clean:lib\", function (cb) {\n  rimraf(library.destination, cb);\n});\n```\n\nFinally, to put it all together. Add the `clean:lib` task to the `clean` task. \n\n```\ngulp.task(\"clean\", [\"clean:js\", \"clean:css\", \"clean:lib\"]);\n```\n\nThen two additional tasks `build` and `default` will round out the gulp file.\n\n```\ngulp.task(\"build\", [\"clean\", \"min\", \"lib\"]);\n\ngulp.task(\"default\", [\"build\"]);\n```\n\nThere are no other changes needed to the project to convert from Bower to npm. By making some minor changes to the gulp file to handle copying the files; it is a very minimal change and now there is a one less repository & config file.  If you are using Visual Studio 2015; a pre-build binding to the `build` gulp task would be recommended as well.\n\nCode before and after available on github: http://github.com/spboyer/bowertonpm\n\n\nComment, share, and enjoy!\n\n\n\n\n\n\n\n","html":"<p>One of the many new features of ASP.NET 5, and the \"new\" Microsoft as some would call it, is the implementation or integration of the open tooling and other package managers in the OSS world.  Node, grunt, gulp and Bower are terms not unbeknownst to web developers using other platforms.</p>\n\n<p>However, with all of this comes more setup or management of tooling or \"what to use when\" etc, and some of the feedback from the community within ASP.NET has been around this very topic.</p>\n\n<h3 id=\"convertingwebapplicationtousenpm\">Converting Web Application to use npm</h3>\n\n<p>Here is a quick conversion of the basic web application from using Bower to using npm.</p>\n\n<ul>\n<li>delete .bowerrc</li>\n</ul>\n\n<p>Since we are not using Bower, there is no need for the file. The purpose of the file, FYI, is to set the installation location of the libraries downloaded and in this case it was set to <code>wwwroot/lib</code>.</p>\n\n<ul>\n<li>npm install the items in bower.json </li>\n</ul>\n\n<pre><code>npm install bootstrap jquery jquery-validation --save  \n</code></pre>\n\n<p>This adds <strong>bootstrap</strong>, <strong>jquery</strong> and <strong>jquery-validation</strong> to the <code>package.json</code> file in the dependencies node.  </p>\n\n<pre><code>,\n  \"dependencies\": {\n    \"bootstrap\": \"^3.3.6\",\n    \"jquery\": \"^2.1.4\",\n    \"jquery-validation\": \"^1.14.0\"\n  }\n</code></pre>\n\n<p>The last JavaScript resource used, is <strong>jquery-validation-unobtrusive</strong> from the ASP.NET team, but this is not currently available in the npm registry, however there is a <a href=\"https://github.com/aspnet/jquery-validation-unobtrusive/pull/16\">pending PR</a> to get this resolved. </p>\n\n<p>In order to get it added, simply npm install with the url of the git repository.</p>\n\n<pre><code>npm install https://github.com/aspnet/jquery-validation-unobtrusive --save  \n</code></pre>\n\n<p>There are some changes need for the <code>gulpfile.js</code> setup and tasks.  First, setup the configuration for the sources and destinations of the resources.</p>\n\n<pre><code class=\"language-language:javascript\">var library = {  \n  base: \"node_modules\",\n  destination: \"lib\",\n  source: [\n    // glob pattern to get the dirname and match only js and min.js file wanted\n    path.dirname(require.resolve('ASP.NET/jquery.validate.unobtrusive.js')) + '/*unobtrusive**.js',\n    // alternative of declaring each file\n    require.resolve('bootstrap/dist/js/bootstrap.js'),\n    require.resolve('bootstrap/dist/js/bootstrap.min.js'),\n    require.resolve('bootstrap/dist/css/bootstrap.css'),\n    // glob pattern to get all files within the directory\n    path.dirname(require.resolve('bootstrap/dist/fonts/glyphicons-halflings-regular.woff')) + '/**',\n    // declare each file\n    require.resolve('jquery/dist/jquery.js'),\n    require.resolve('jquery/dist/jquery.min.js'),\n    // only one file is distributed\n    require.resolve('jquery-validation/dist/jquery.validate.js')\n  ]\n}\n</code></pre>\n\n<p>Next, we need to add the copy task to get the resources moved to <code>\\lib</code> folder.</p>\n\n<pre><code>gulp.task(\"lib\", function () {  \n  return gulp.src(library.source, { base: library.base })\n    .pipe(gulp.dest(paths.webroot + library.destination));\n});\n</code></pre>\n\n<p>Add a <code>clean:lib</code> task as well to follow the pattern for resetting the <code>\\lib</code> folder </p>\n\n<pre><code>gulp.task(\"clean:lib\", function (cb) {  \n  rimraf(library.destination, cb);\n});\n</code></pre>\n\n<p>Finally, to put it all together. Add the <code>clean:lib</code> task to the <code>clean</code> task. </p>\n\n<pre><code>gulp.task(\"clean\", [\"clean:js\", \"clean:css\", \"clean:lib\"]);  \n</code></pre>\n\n<p>Then two additional tasks <code>build</code> and <code>default</code> will round out the gulp file.</p>\n\n<pre><code>gulp.task(\"build\", [\"clean\", \"min\", \"lib\"]);\n\ngulp.task(\"default\", [\"build\"]);  \n</code></pre>\n\n<p>There are no other changes needed to the project to convert from Bower to npm. By making some minor changes to the gulp file to handle copying the files; it is a very minimal change and now there is a one less repository &amp; config file.  If you are using Visual Studio 2015; a pre-build binding to the <code>build</code> gulp task would be recommended as well.</p>\n\n<p>Code before and after available on github: <a href=\"http://github.com/spboyer/bowertonpm\">http://github.com/spboyer/bowertonpm</a></p>\n\n<p>Comment, share, and enjoy!</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1448386018072,"created_by":1,"updated_at":1448915750641,"updated_by":1,"published_at":1448915750641,"published_by":1},{"id":60,"uuid":"349f9df1-37a1-4a8e-9de9-37e73046855c","title":"A Quick ASP.NET Core App on Any OS","slug":"play-by-play-aspnetcore","markdown":"Anytime I have the opportunity to sit and run through showing another developer the latest thing I'm into a few things are likely to happen. First, we'll both probably learn something (let's hope). Secondly, it's just great to be able to \"play\" around with the tech and see where it leads.\n\nThat's what I was able to do recently with John Papa, check out our [Play by Play here](http://spboyer.me/pbpaspnetspboyer). The code and samples are available on [github](http://github.com/spboyer/trails).\n\nHere is the description from the video...\n> [In this course](http://spboyer.me/pbpaspnetspboyer), Shayne Boyer shows how to build a web app with ASP.NET Core 1.0 from scratch, in real time. Since ASP.NET Core works cross-platform, Shayne develops and runs the app entirely on OSX. Shayne ups the ante by creating an Angular client that will communicate with an ASP.NET Web API. Learn from Shayne's expertise as he writes code that serves static assets, makes HTTP requests, and handles modern JavaScript client needs such as routing.\n\n![John and Shayne](/content/images/2016/02/jpapa-spboyer-pbp.png)","html":"<p>Anytime I have the opportunity to sit and run through showing another developer the latest thing I'm into a few things are likely to happen. First, we'll both probably learn something (let's hope). Secondly, it's just great to be able to \"play\" around with the tech and see where it leads.</p>\n\n<p>That's what I was able to do recently with John Papa, check out our <a href=\"http://spboyer.me/pbpaspnetspboyer\">Play by Play here</a>. The code and samples are available on <a href=\"http://github.com/spboyer/trails\">github</a>.</p>\n\n<p>Here is the description from the video...  </p>\n\n<blockquote>\n  <p><a href=\"http://spboyer.me/pbpaspnetspboyer\">In this course</a>, Shayne Boyer shows how to build a web app with ASP.NET Core 1.0 from scratch, in real time. Since ASP.NET Core works cross-platform, Shayne develops and runs the app entirely on OSX. Shayne ups the ante by creating an Angular client that will communicate with an ASP.NET Web API. Learn from Shayne's expertise as he writes code that serves static assets, makes HTTP requests, and handles modern JavaScript client needs such as routing.</p>\n</blockquote>\n\n<p><img src=\"/content/images/2016/02/jpapa-spboyer-pbp.png\" alt=\"John and Shayne\" /></p>","image":"/content/images/2016/02/jpapa-spboyer-pbp.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1454731029369,"created_by":1,"updated_at":1461341015406,"updated_by":1,"published_at":1454673600000,"published_by":1},{"id":61,"uuid":"193bce2c-c45c-4d36-9491-b4fc6228b65a","title":"Legion of Heroes: haproxy, nginx, Angular 2, ASP.NET Core, Redis and Docker","slug":"legion-of-heroes-haproxy-nginx-angular2-aspnetcore-redis-docker","markdown":"![legion_image](/content/images/2016/02/Legion-of-Heroes.png)\n\nI have been following the Angular 2 and ASP.NET Core stories pretty close over the past year, and of course not ignoring Docker.  I wanted to take some time and see what it would be like to take all of these different technologies, put each of them in a Docker container, start up the entire application with `docker-compose` and then scale each layer.\n\n\n> <a href=\"http://spboyer.me/pbpaspnetcore\" target=\"_blank\">Be sure to checkout my <a href=\"http://spboyer.me/pbpaspnetcore\" target=\"_blank\">Plurasight Play by Play</a> w/ John Papa on ASP.NET Core on Any OS <a href=\"http://spboyer.me/pbpaspnetcore\" target=\"_blank\">here</a>.\n\n###Angular 2\nThe Angular 2 Team has done a great job with their documentation and provided an awesome [tutorial](https://angular.io/docs/ts/latest/tutorial/) called Tour of Heroes developed by John Papa ([@john_papa](http://twitter.com/john_papa)). I grabbed that code from the tutorial and made a few changes in the `heroes.service.ts` and `dashboard.component.ts` to change it from Promises to Observables. Why? Because I wanted to get more familiar with using them and, at least for now, the tutorial just returns a static array from a class; I wanted to actually hit an url from an endpoint.\n\n*heroes.services.ts* - First we will need to import the reactive js module.\n\n```\nimport 'rxjs/Rx';\n```\n\nNext in the `getHeroes()` function we need to change it out to the following to call the `/api/heroes` endpoint and then use the `.map()` function to pass the json property (our heroes _json_) to the subscriber.\n\n```\ngetHeroes() {\n         return this._http.get('/api/heroes')\n            .map( response => response.json() );\n    }\n```\n\n*dashboard.component.ts* - Add the import of the **Observable** and **Subscription** classes from the _rxjs_ module.\n\n```\nimport { Observable, Subscription } from 'rxjs';\n```\n\nand then the `ngOnInit()` function needs to be altered to change the Promise implementation of `.then()` to the Observable method of `.subscribe()`.\n\n```\nngOnInit() {\n    this._heroService.getHeroes()\n        .subscribe(heroes => this.heroes = heroes);\n}\n```\n\nFinally, since we are going to be using `Http`, the `HTTP_PROVIDERS` must be instantiated and put into the dependency injection system. \n\nIn `app.component.ts` add the following import statement and also `HTTP_PROVIDERS` to the `providers:`. The constructor in the `HeroService` class (hero.service.ts) relies on it for calling the web api endpoints.\n\n```\nimport { HTTP_PROVIDERS } from 'angular2/http';\n...\n...\n...\n providers: [HeroService, ROUTER_PROVIDERS, HTTP_PROVIDERS]\n```\n\n###Creating the container\nThe docker container is a simple nginx container, where the base image is debian:jessie.\n\n```\nFROM nginx:latest\n\nEXPOSE 8080\n\nCOPY src /var/www\nCOPY conf/nginx.conf /etc/nginx/nginx.conf\n```\n\nThe first `COPY` command copies the application files to the **src** folder within the container and the next `COPY` command will replace the default nginx configuration with a new version.\n\nThe config is pretty standard with some additions for routing for deep linking and setting the default page.\n\n```\nserver {\n        listen 80;\n        index index.html;\n        server_name localhost;\n        error_log  /var/log/nginx/error.log;\n        access_log /var/log/nginx/access.log;\n        root /var/www/public/;\n\n        location / {\n           try_files $uri$args $uri$args/ $uri/ /index.html =404;\n        }\n    }\n```\n\nThe important portion of the conf file here is the `location` line; this line is the \"deep link\" configuration for the SPA. So if a user browses to *http://`<server-name>`/detail/1* the nginx server will pass this down to index.html to handle if it cannot resolve. \n\nNext, let's look at the ASP.NET Core Web API portion.\n\n###ASP.NET Core Web API\nThis is a pretty basic web api solution. I used the yeoman generator to scaffold the project. \n\n>See more about creating applications with generator-aspnet and Yeoman on <a href=\"\">Creating an Application w/ VS Code and Yeoman</a> or http://github.com/omnisharp/generator-aspnet.\n\nSome of my favorite features are the configuration and dependency injection portions of ASP.NET Core. Using Redis as a cache for the data; a **StorageService** (Storage.cs) is created for an interface to Redis and added to the middleware pipeline in `Startup.cs`\n\n><a href=\"https://github.com/StackExchange/StackExchange.Redis/tree/CoreCLR\" target=\"_blank\">StackExchange.Redis</a> is a popular, recommended and fast .NET provider for Redis. However at the time of writing this post, the ASP.NET coreclr version of the provider was not ready.  This implementation uses <a href=\"https://github.com/nicolasff/webdis\" target=\"_blank\">webdis</a>; an http REST interface over Redis.\n\n_Adding the Storage Services to the pipeline in `ConfigureServices()`_\n```\n// Add Storage Service\nservices.AddSingleton<Common.IStorage, Common.Storage>();\n```\n\nAs a part of using Redis, the server name and port need to be passed into the StorageService. With the new Configuration options now available; the server and port are added to the appsettings.json file.\n\n```\n{\n  \"Logging\": {\n    \"IncludeScopes\": false,\n    \"LogLevel\": {\n      \"Default\": \"Verbose\",\n      \"System\": \"Information\",\n      \"Microsoft\": \"Information\"\n    }\n  },\n  \"AppSettings\": {\n        \"RedisServer\": \"redis\",\n        \"RedisPort\":  \"7379\"\n    }\n}\n```\n\nand then in `Startup()` the file can be added into the `Configuration` and we can also add the use of **EnvironmentVariables**. This allows for different configurations in DEV, TEST, Prod etc. and note that the last option wins. In this case, Environment variables.\n\n```\npublic Startup(IHostingEnvironment env)\n{\n    // Set up configuration sources.\n    var builder = new ConfigurationBuilder()\n        .AddJsonFile(\"appsettings.json\")\n        .AddEnvironmentVariables();\n    Configuration = builder.Build();\n}\n```\n\nThe AppSettings will also need to be added into the pipeline, just as the StorageService.\n\n```\nservices.Configure<AppSettings>(Configuration.GetSection(\"AppSettings\"));\n```\n\nThe AppSettings class will be injected into the StorageService class for the Redis server and port number. The `Configurations.GetSection()` line grabs that portion from the `appsettings.json` file and then when it is injected into the **StorageService** class the json is mapped to the AppSettings class using the IOptions interface making it a hard typed class, and the properties are accessible like `Settings.Value.RedisServer`\n\n_AppSettings.cs_\n```\npublic class AppSettings\n{\n   public string RedisServer { get; set; }\n   public string RedisPort { get; set; }\n}\n```\n_StorageService constructor_\n```\nprivate IOptions<AppSettings> Settings;\npublic Storage(IOptions<AppSettings> appSettings)\n{\n   Settings = appSettings;\n}\n```\n\n####Data Model\nBecause this is a quick demo project, generating some quick data was a need but because there is some context needed around the \"type\" of data we need, I chose to use GenFu ([http://genfu.io/](http://genfu.io/)) a great .NET library for doing exactly that.  The StorageService has a `PrimeData()` method which loads the data into the Redis container for the web api service to use.  \n\n```\npublic void PrimeData()\n{\n      var exists = KeyExists(\"heroes\");\n      if (!exists)\n      {\n          var heroes = A.ListOf<Hero>(); // \"A\" is GenFu\n          heroes.ForEach(async h =>\n          {\n              if (!string.IsNullOrWhiteSpace(h.SuperName))\n                  await AddItemToArray(\"heroes\", h.SuperName);\n          });\n\n          SetItem(\"primed\", \"true\");\n      }\n}\n```\n\nThe **TourHero** class, the model returned to the client, is essentially a DTO (data transfer object); however when returning this object even as json then casing of the object properties must match when trying to map to the JavaScript object.  For instance, mapping `Name` to `name` can not happen automatically using the `.map()` function without some extra work.  \n\nIn order to make this easier, we can add a single line to the **Startup.cs** to make the json returned camel cased. Add the following to the `.AddMvc()` call in `ConfigureServices()`\n\n```\nservices.AddMvc().AddJsonOptions(options => {\n                options.SerializerSettings.ContractResolver =\n                   new CamelCasePropertyNamesContractResolver();\n            });\n```\n\nIn doing so will change the return of TourHero from:\n\n```\n{\n \"Id\": 1,\n \"Name\": Jumper Guy\n}\n```\nto\n```\n{\n \"id\": 1,\n \"name\": Jumper Guy\n}\n```\n\n####Creating the the container\nThe yeoman generator creates the docker file for the project when it is scaffolded. However, there are a few changes needed since the goal of the project is run it strictly under coreclr.\n\nFirst change the base image being used.\n\n```\nFROM microsoft/aspnet:1.0.0-rc1-update1-coreclr\n```\n\nNext, in **project.json**, we need to set the server url that is exposed for the application.  If you run the web api application locally, by running `dnx web`, you'd typically browse to _http://localhost:5001/_. However when running the app within a docker container you cannot get to \"localhost\" from another container. So, in the **commands** section add the `--server.urls` to expose all IPs on port 5001 for the app.\n\n```\n\"commands\": {\n    \"web\": \"Microsoft.AspNet.Server.Kestrel --server.urls http://0.0.0.0:5001\"\n  },\n```\n\nThis completes the setup of the ASP.NET Core Web API and making it Docker ready.\n\n###Redis / Webdis\n**Redis** is a uber fast memcache key/value store. In this project we are using it as a way to store the Hero data. \n\n**[Webdis](https://github.com/nicolasff/webdis)** is an http REST interface that allows for communication to the Redis store. For instance we can `SET` and `GET` a key \"Hello\" with a valueof \"Word\" this way.\n\n```\nhttp://192.168.99.100:3739/SET/Hello/World\n\nhttp://192.168.99.100:3739/GET/Hello\nreturns:\n{\n  \"GET\" : \"World\"\n}\n```\n\nThis is only a \"band aid\" solution for now as the [StackExchange.Redis](https://github.com/StackExchange/StackExchange.Redis/tree/CoreCLR) provider for coreclr is not complete.\n\nBoth of theses components are running inside a single Docker container. \n\n####Docker & docker-compose\n\nEach of these pieces can be started by using docker to create and/or pull the image and then start the container.  For instance, to we could execute the following commands to:\n\n* Build the webapi image\n* Pull and start the redis/webdis container\n* Start the web api image\n\n```\n$ docker build -t webapi /webpi\n$ docker run -d -p 7379:7379 -e LOCAL_REDIS=true anapsix/webdis\n$ docker run -d --name \"webapi\" -p 5001:5001 webapi\n```\n\nThen browse to the IP of the docker machine, typically **192.168.99.100/api/heroes** to see the api return.\n\nBut executing the 3 commands doesn't emulate a scenario of production, nor does it allow for a seamless scaling solution should we need to scale the webapi layer per se.\n\nThis is where docker-compose comes in. Using a **docker-compose.yml** file we can define multiple containers, link them which allows for the underlying networking stack to be established, as well as setting environment variables for each container.\n\nLet's build a docker-compose file for this solution taking each container one by one.\n\nFirst, the Angular 2 application. We are telling compose to `build` the image using the **DockerFile** from the `/web` directory. Then defining an `environment` variable of `VIRTUAL_HOST` with a value of `*/*`.  This is telling the HAPROXY to route and request to the Angular2/nginx container.\n\n```\nweb:\n  build: web\n  environment:\n    VIRTUAL_HOST: \"*/*\"\n```\n\nSecond, the ASP.NET Core Web API Application. We are telling compose to `build` the image using the **DockerFile** from the `/webapi` directory. Then defining an `environment` variable of `VIRTUAL_HOST` with a value of `*/api, */api/*`.  This is telling the HAPROXY to route and request to this container. Finally, there is a `link` item that sets up the networking to the next container, redis, so we can call it from the webapi container by name.\n\n```\nwebapi:\n  build: webapi\n  environment:\n    VIRTUAL_HOST: \"*/api, */api/*\"\n    ASPNET_ENV: Development\n  links:\n    - redis\n```\n\nThe redis container is a slight bit different in since that the image is being pulled from **hub.docker.com** and not built as in the web and webapi. Compose will first look locally for the image, if it is not found will then go to the registry to pull it. An `environment` variable is set to install the redis server within the container and `ports` are exposed.\n\n```\nredis:\n  image: anapsix/webdis\n  environment:\n    LOCAL_REDIS: true\n  ports:\n    - \"7379:7379\"\n```\n\nFinally, the load balancer image \"**lb**\" is another image `tutum/haproxy` being pulled from the docker hub.  I am using this one because it it ready out of the box to with some networking and proxy \"stuff\" that I do not need to know how to setup but \"just use\".  `links` are set to the **web** and **webapi** containers, and finally `ports` **80** is defined for the entry point.\n\n```\nlb:\n  image: tutum/haproxy\n  links:\n    - web\n    - webapi\n  ports:\n    - \"80:80\"\n```\n\nThis is the complete docker-compose.yml file.\n\n```\nweb:\n  build: web\n  environment:\n    VIRTUAL_HOST: \"*/*\"\nwebapi:\n  build: webapi\n  environment:\n    VIRTUAL_HOST: \"*/api, */api/*\"\n    ASPNET_ENV: Development\n  links:\n    - redis\nredis:\n  image: anapsix/webdis\n  environment:\n    LOCAL_REDIS: true\n  ports:\n    - \"7379:7379\"\nlb:\n  image: tutum/haproxy\n  links:\n    - web\n    - webapi\n  ports:\n    - \"80:80\"\n```\n\nTo start the full application, use docker compose and execute:\n\n```\n$ docker-compose up -d\nCreating haproxyplayground_web_1...\nCreating haproxyplayground_redis_1...\nCreating haproxyplayground_webapi_1...\nCreating haproxyplayground_lb_1...\n```\n\nto see what is running use `docker-compose ps`\n```\n$ docker-compose ps\n           Name                      Command           State                   Ports\n----------------------------------------------------------------------------------------------------\nhaproxyplayground_lb_1       python /haproxy/main.py   Up      1936/tcp, 443/tcp, 0.0.0.0:80->80/tcp\nhaproxyplayground_redis_1    /entrypoint.sh            Up      0.0.0.0:7379->7379/tcp\nhaproxyplayground_web_1      nginx -g daemon off;      Up      443/tcp, 80/tcp, 8080/tcp\nhaproxyplayground_webapi_1   dnx -p project.json web   Up      5001/tcp\n```\n\n> `-d` runs it in detached mode. And now browse to **http://192.168.99.100** You can find the IP Address of your docker-machine by using `docker-machine IP default`\n\nIf you want to scale the web app up to 3 instances, we use the `docker-compose scale web=<instances>` command\n\n```\n$ docker-compose scale web=3\nCreating and starting 2... done\nCreating and starting 3... done\n```\n\nNow run the `docker-compose ps` to see the instances\n\n```\n$ docker-compose ps\n           Name                      Command           State                   Ports\n----------------------------------------------------------------------------------------------------\nhaproxyplayground_lb_1       python /haproxy/main.py   Up      1936/tcp, 443/tcp, 0.0.0.0:80->80/tcp\nhaproxyplayground_redis_1    /entrypoint.sh            Up      0.0.0.0:7379->7379/tcp\nhaproxyplayground_web_1      nginx -g daemon off;      Up      443/tcp, 80/tcp, 8080/tcp\nhaproxyplayground_web_2      nginx -g daemon off;      Up      443/tcp, 80/tcp, 8080/tcp\nhaproxyplayground_web_3      nginx -g daemon off;      Up      443/tcp, 80/tcp, 8080/tcp\nhaproxyplayground_webapi_1   dnx -p project.json web   Up      5001/tcp\n```\n\nAnd you can see that there are now 3 instances of the web application, 1 of the webapi.\n\nShutting them all down is easy with `docker-compose stop` and removing the containers with `docker-compose rm`.\n\n###Wrapping Up\n\nBeing able to select the various technologies you want to use, independently deploy and scale them is where you ultimately strive to be in any application development and deployment plan.  Here I was able to use Angular 2, ASP.NET Core Web API, Redis, haproxy, and ngnix to create an end-end application in a development environment that would ultimately emulate TEST, QA and Production environments in this scenario. Scaling of the application can be accomplished using Docker Swarm or Mesos with a similar .yml or .json configuration file as we had in the docker-compose file should you need that in your cloud provider.\n\n###Resources\n* github repo - https://github.com/spboyer/haproxy-playground\n* Angular 2 - http://angular.io\n* Tour of Heroes tutorial - https://angular.io/docs/ts/latest/tutorial/\n* Docker - http://docker.com\n* ASP.NET Core - http://get.asp.net","html":"<p><img src=\"/content/images/2016/02/Legion-of-Heroes.png\" alt=\"legion_image\" /></p>\n\n<p>I have been following the Angular 2 and ASP.NET Core stories pretty close over the past year, and of course not ignoring Docker.  I wanted to take some time and see what it would be like to take all of these different technologies, put each of them in a Docker container, start up the entire application with <code>docker-compose</code> and then scale each layer.</p>\n\n<blockquote>\n  <p><a href=\"http://spboyer.me/pbpaspnetcore\" target=\"_blank\">Be sure to checkout my <a href=\"http://spboyer.me/pbpaspnetcore\" target=\"_blank\">Plurasight Play by Play</a> w/ John Papa on ASP.NET Core on Any OS <a href=\"http://spboyer.me/pbpaspnetcore\" target=\"_blank\">here</a>.</p>\n</blockquote>\n\n<h3 id=\"angular2\">Angular 2</h3>\n\n<p>The Angular 2 Team has done a great job with their documentation and provided an awesome <a href=\"https://angular.io/docs/ts/latest/tutorial/\">tutorial</a> called Tour of Heroes developed by John Papa (<a href=\"http://twitter.com/john_papa\">@john_papa</a>). I grabbed that code from the tutorial and made a few changes in the <code>heroes.service.ts</code> and <code>dashboard.component.ts</code> to change it from Promises to Observables. Why? Because I wanted to get more familiar with using them and, at least for now, the tutorial just returns a static array from a class; I wanted to actually hit an url from an endpoint.</p>\n\n<p><em>heroes.services.ts</em> - First we will need to import the reactive js module.</p>\n\n<pre><code>import 'rxjs/Rx';  \n</code></pre>\n\n<p>Next in the <code>getHeroes()</code> function we need to change it out to the following to call the <code>/api/heroes</code> endpoint and then use the <code>.map()</code> function to pass the json property (our heroes <em>json</em>) to the subscriber.</p>\n\n<pre><code>getHeroes() {  \n         return this._http.get('/api/heroes')\n            .map( response =&gt; response.json() );\n    }\n</code></pre>\n\n<p><em>dashboard.component.ts</em> - Add the import of the <strong>Observable</strong> and <strong>Subscription</strong> classes from the <em>rxjs</em> module.</p>\n\n<pre><code>import { Observable, Subscription } from 'rxjs';  \n</code></pre>\n\n<p>and then the <code>ngOnInit()</code> function needs to be altered to change the Promise implementation of <code>.then()</code> to the Observable method of <code>.subscribe()</code>.</p>\n\n<pre><code>ngOnInit() {  \n    this._heroService.getHeroes()\n        .subscribe(heroes =&gt; this.heroes = heroes);\n}\n</code></pre>\n\n<p>Finally, since we are going to be using <code>Http</code>, the <code>HTTP_PROVIDERS</code> must be instantiated and put into the dependency injection system. </p>\n\n<p>In <code>app.component.ts</code> add the following import statement and also <code>HTTP_PROVIDERS</code> to the <code>providers:</code>. The constructor in the <code>HeroService</code> class (hero.service.ts) relies on it for calling the web api endpoints.</p>\n\n<pre><code>import { HTTP_PROVIDERS } from 'angular2/http';  \n...\n...\n...\n providers: [HeroService, ROUTER_PROVIDERS, HTTP_PROVIDERS]\n</code></pre>\n\n<h3 id=\"creatingthecontainer\">Creating the container</h3>\n\n<p>The docker container is a simple nginx container, where the base image is debian:jessie.</p>\n\n<pre><code>FROM nginx:latest\n\nEXPOSE 8080\n\nCOPY src /var/www  \nCOPY conf/nginx.conf /etc/nginx/nginx.conf  \n</code></pre>\n\n<p>The first <code>COPY</code> command copies the application files to the <strong>src</strong> folder within the container and the next <code>COPY</code> command will replace the default nginx configuration with a new version.</p>\n\n<p>The config is pretty standard with some additions for routing for deep linking and setting the default page.</p>\n\n<pre><code>server {  \n        listen 80;\n        index index.html;\n        server_name localhost;\n        error_log  /var/log/nginx/error.log;\n        access_log /var/log/nginx/access.log;\n        root /var/www/public/;\n\n        location / {\n           try_files $uri$args $uri$args/ $uri/ /index.html =404;\n        }\n    }\n</code></pre>\n\n<p>The important portion of the conf file here is the <code>location</code> line; this line is the \"deep link\" configuration for the SPA. So if a user browses to <em><a href=\"http://<code>&lt;server-name&gt;</code>/detail/1\">http://<code>&lt;server-name&gt;</code>/detail/1</a></em> the nginx server will pass this down to index.html to handle if it cannot resolve. </p>\n\n<p>Next, let's look at the ASP.NET Core Web API portion.</p>\n\n<h3 id=\"aspnetcorewebapi\">ASP.NET Core Web API</h3>\n\n<p>This is a pretty basic web api solution. I used the yeoman generator to scaffold the project. </p>\n\n<blockquote>\n  <p>See more about creating applications with generator-aspnet and Yeoman on <a href=\"\">Creating an Application w/ VS Code and Yeoman</a> or <a href=\"http://github.com/omnisharp/generator-aspnet\">http://github.com/omnisharp/generator-aspnet</a>.</p>\n</blockquote>\n\n<p>Some of my favorite features are the configuration and dependency injection portions of ASP.NET Core. Using Redis as a cache for the data; a <strong>StorageService</strong> (Storage.cs) is created for an interface to Redis and added to the middleware pipeline in <code>Startup.cs</code></p>\n\n<blockquote>\n  <p><a href=\"https://github.com/StackExchange/StackExchange.Redis/tree/CoreCLR\" target=\"_blank\">StackExchange.Redis</a> is a popular, recommended and fast .NET provider for Redis. However at the time of writing this post, the ASP.NET coreclr version of the provider was not ready.  This implementation uses <a href=\"https://github.com/nicolasff/webdis\" target=\"_blank\">webdis</a>; an http REST interface over Redis.</p>\n</blockquote>\n\n<p><em>Adding the Storage Services to the pipeline in <code>ConfigureServices()</code></em>  </p>\n\n<pre><code>// Add Storage Service\nservices.AddSingleton&lt;Common.IStorage, Common.Storage&gt;();  \n</code></pre>\n\n<p>As a part of using Redis, the server name and port need to be passed into the StorageService. With the new Configuration options now available; the server and port are added to the appsettings.json file.</p>\n\n<pre><code>{\n  \"Logging\": {\n    \"IncludeScopes\": false,\n    \"LogLevel\": {\n      \"Default\": \"Verbose\",\n      \"System\": \"Information\",\n      \"Microsoft\": \"Information\"\n    }\n  },\n  \"AppSettings\": {\n        \"RedisServer\": \"redis\",\n        \"RedisPort\":  \"7379\"\n    }\n}\n</code></pre>\n\n<p>and then in <code>Startup()</code> the file can be added into the <code>Configuration</code> and we can also add the use of <strong>EnvironmentVariables</strong>. This allows for different configurations in DEV, TEST, Prod etc. and note that the last option wins. In this case, Environment variables.</p>\n\n<pre><code>public Startup(IHostingEnvironment env)  \n{\n    // Set up configuration sources.\n    var builder = new ConfigurationBuilder()\n        .AddJsonFile(\"appsettings.json\")\n        .AddEnvironmentVariables();\n    Configuration = builder.Build();\n}\n</code></pre>\n\n<p>The AppSettings will also need to be added into the pipeline, just as the StorageService.</p>\n\n<pre><code>services.Configure&lt;AppSettings&gt;(Configuration.GetSection(\"AppSettings\"));  \n</code></pre>\n\n<p>The AppSettings class will be injected into the StorageService class for the Redis server and port number. The <code>Configurations.GetSection()</code> line grabs that portion from the <code>appsettings.json</code> file and then when it is injected into the <strong>StorageService</strong> class the json is mapped to the AppSettings class using the IOptions interface making it a hard typed class, and the properties are accessible like <code>Settings.Value.RedisServer</code></p>\n\n<p><em>AppSettings.cs</em>  </p>\n\n<pre><code>public class AppSettings  \n{\n   public string RedisServer { get; set; }\n   public string RedisPort { get; set; }\n}\n</code></pre>\n\n<p><em>StorageService constructor</em>  </p>\n\n<pre><code>private IOptions&lt;AppSettings&gt; Settings;  \npublic Storage(IOptions&lt;AppSettings&gt; appSettings)  \n{\n   Settings = appSettings;\n}\n</code></pre>\n\n<h4 id=\"datamodel\">Data Model</h4>\n\n<p>Because this is a quick demo project, generating some quick data was a need but because there is some context needed around the \"type\" of data we need, I chose to use GenFu (<a href=\"http://genfu.io/\">http://genfu.io/</a>) a great .NET library for doing exactly that.  The StorageService has a <code>PrimeData()</code> method which loads the data into the Redis container for the web api service to use.  </p>\n\n<pre><code>public void PrimeData()  \n{\n      var exists = KeyExists(\"heroes\");\n      if (!exists)\n      {\n          var heroes = A.ListOf&lt;Hero&gt;(); // \"A\" is GenFu\n          heroes.ForEach(async h =&gt;\n          {\n              if (!string.IsNullOrWhiteSpace(h.SuperName))\n                  await AddItemToArray(\"heroes\", h.SuperName);\n          });\n\n          SetItem(\"primed\", \"true\");\n      }\n}\n</code></pre>\n\n<p>The <strong>TourHero</strong> class, the model returned to the client, is essentially a DTO (data transfer object); however when returning this object even as json then casing of the object properties must match when trying to map to the JavaScript object.  For instance, mapping <code>Name</code> to <code>name</code> can not happen automatically using the <code>.map()</code> function without some extra work.  </p>\n\n<p>In order to make this easier, we can add a single line to the <strong>Startup.cs</strong> to make the json returned camel cased. Add the following to the <code>.AddMvc()</code> call in <code>ConfigureServices()</code></p>\n\n<pre><code>services.AddMvc().AddJsonOptions(options =&gt; {  \n                options.SerializerSettings.ContractResolver =\n                   new CamelCasePropertyNamesContractResolver();\n            });\n</code></pre>\n\n<p>In doing so will change the return of TourHero from:</p>\n\n<pre><code>{\n \"Id\": 1,\n \"Name\": Jumper Guy\n}\n</code></pre>\n\n<p>to  </p>\n\n<pre><code>{\n \"id\": 1,\n \"name\": Jumper Guy\n}\n</code></pre>\n\n<h4 id=\"creatingthethecontainer\">Creating the the container</h4>\n\n<p>The yeoman generator creates the docker file for the project when it is scaffolded. However, there are a few changes needed since the goal of the project is run it strictly under coreclr.</p>\n\n<p>First change the base image being used.</p>\n\n<pre><code>FROM microsoft/aspnet:1.0.0-rc1-update1-coreclr  \n</code></pre>\n\n<p>Next, in <strong>project.json</strong>, we need to set the server url that is exposed for the application.  If you run the web api application locally, by running <code>dnx web</code>, you'd typically browse to <em><a href=\"http://localhost:5001/\">http://localhost:5001/</a></em>. However when running the app within a docker container you cannot get to \"localhost\" from another container. So, in the <strong>commands</strong> section add the <code>--server.urls</code> to expose all IPs on port 5001 for the app.</p>\n\n<pre><code>\"commands\": {\n    \"web\": \"Microsoft.AspNet.Server.Kestrel --server.urls http://0.0.0.0:5001\"\n  },\n</code></pre>\n\n<p>This completes the setup of the ASP.NET Core Web API and making it Docker ready.</p>\n\n<h3 id=\"rediswebdis\">Redis / Webdis</h3>\n\n<p><strong>Redis</strong> is a uber fast memcache key/value store. In this project we are using it as a way to store the Hero data. </p>\n\n<p><strong><a href=\"https://github.com/nicolasff/webdis\">Webdis</a></strong> is an http REST interface that allows for communication to the Redis store. For instance we can <code>SET</code> and <code>GET</code> a key \"Hello\" with a valueof \"Word\" this way.</p>\n\n<pre><code>http://192.168.99.100:3739/SET/Hello/World\n\nhttp://192.168.99.100:3739/GET/Hello  \nreturns:  \n{\n  \"GET\" : \"World\"\n}\n</code></pre>\n\n<p>This is only a \"band aid\" solution for now as the <a href=\"https://github.com/StackExchange/StackExchange.Redis/tree/CoreCLR\">StackExchange.Redis</a> provider for coreclr is not complete.</p>\n\n<p>Both of theses components are running inside a single Docker container. </p>\n\n<h4 id=\"dockerdockercompose\">Docker &amp; docker-compose</h4>\n\n<p>Each of these pieces can be started by using docker to create and/or pull the image and then start the container.  For instance, to we could execute the following commands to:</p>\n\n<ul>\n<li>Build the webapi image</li>\n<li>Pull and start the redis/webdis container</li>\n<li>Start the web api image</li>\n</ul>\n\n<pre><code>$ docker build -t webapi /webpi\n$ docker run -d -p 7379:7379 -e LOCAL_REDIS=true anapsix/webdis\n$ docker run -d --name \"webapi\" -p 5001:5001 webapi\n</code></pre>\n\n<p>Then browse to the IP of the docker machine, typically <strong>192.168.99.100/api/heroes</strong> to see the api return.</p>\n\n<p>But executing the 3 commands doesn't emulate a scenario of production, nor does it allow for a seamless scaling solution should we need to scale the webapi layer per se.</p>\n\n<p>This is where docker-compose comes in. Using a <strong>docker-compose.yml</strong> file we can define multiple containers, link them which allows for the underlying networking stack to be established, as well as setting environment variables for each container.</p>\n\n<p>Let's build a docker-compose file for this solution taking each container one by one.</p>\n\n<p>First, the Angular 2 application. We are telling compose to <code>build</code> the image using the <strong>DockerFile</strong> from the <code>/web</code> directory. Then defining an <code>environment</code> variable of <code>VIRTUAL_HOST</code> with a value of <code>*/*</code>.  This is telling the HAPROXY to route and request to the Angular2/nginx container.</p>\n\n<pre><code>web:  \n  build: web\n  environment:\n    VIRTUAL_HOST: \"*/*\"\n</code></pre>\n\n<p>Second, the ASP.NET Core Web API Application. We are telling compose to <code>build</code> the image using the <strong>DockerFile</strong> from the <code>/webapi</code> directory. Then defining an <code>environment</code> variable of <code>VIRTUAL_HOST</code> with a value of <code>*/api, */api/*</code>.  This is telling the HAPROXY to route and request to this container. Finally, there is a <code>link</code> item that sets up the networking to the next container, redis, so we can call it from the webapi container by name.</p>\n\n<pre><code>webapi:  \n  build: webapi\n  environment:\n    VIRTUAL_HOST: \"*/api, */api/*\"\n    ASPNET_ENV: Development\n  links:\n    - redis\n</code></pre>\n\n<p>The redis container is a slight bit different in since that the image is being pulled from <strong>hub.docker.com</strong> and not built as in the web and webapi. Compose will first look locally for the image, if it is not found will then go to the registry to pull it. An <code>environment</code> variable is set to install the redis server within the container and <code>ports</code> are exposed.</p>\n\n<pre><code>redis:  \n  image: anapsix/webdis\n  environment:\n    LOCAL_REDIS: true\n  ports:\n    - \"7379:7379\"\n</code></pre>\n\n<p>Finally, the load balancer image \"<strong>lb</strong>\" is another image <code>tutum/haproxy</code> being pulled from the docker hub.  I am using this one because it it ready out of the box to with some networking and proxy \"stuff\" that I do not need to know how to setup but \"just use\".  <code>links</code> are set to the <strong>web</strong> and <strong>webapi</strong> containers, and finally <code>ports</code> <strong>80</strong> is defined for the entry point.</p>\n\n<pre><code>lb:  \n  image: tutum/haproxy\n  links:\n    - web\n    - webapi\n  ports:\n    - \"80:80\"\n</code></pre>\n\n<p>This is the complete docker-compose.yml file.</p>\n\n<pre><code>web:  \n  build: web\n  environment:\n    VIRTUAL_HOST: \"*/*\"\nwebapi:  \n  build: webapi\n  environment:\n    VIRTUAL_HOST: \"*/api, */api/*\"\n    ASPNET_ENV: Development\n  links:\n    - redis\nredis:  \n  image: anapsix/webdis\n  environment:\n    LOCAL_REDIS: true\n  ports:\n    - \"7379:7379\"\nlb:  \n  image: tutum/haproxy\n  links:\n    - web\n    - webapi\n  ports:\n    - \"80:80\"\n</code></pre>\n\n<p>To start the full application, use docker compose and execute:</p>\n\n<pre><code>$ docker-compose up -d\nCreating haproxyplayground_web_1...  \nCreating haproxyplayground_redis_1...  \nCreating haproxyplayground_webapi_1...  \nCreating haproxyplayground_lb_1...  \n</code></pre>\n\n<p>to see what is running use <code>docker-compose ps</code>  </p>\n\n<pre><code>$ docker-compose ps\n           Name                      Command           State                   Ports\n----------------------------------------------------------------------------------------------------\nhaproxyplayground_lb_1       python /haproxy/main.py   Up      1936/tcp, 443/tcp, 0.0.0.0:80-&gt;80/tcp  \nhaproxyplayground_redis_1    /entrypoint.sh            Up      0.0.0.0:7379-&gt;7379/tcp  \nhaproxyplayground_web_1      nginx -g daemon off;      Up      443/tcp, 80/tcp, 8080/tcp  \nhaproxyplayground_webapi_1   dnx -p project.json web   Up      5001/tcp  \n</code></pre>\n\n<blockquote>\n  <p><code>-d</code> runs it in detached mode. And now browse to <strong><a href=\"http://192.168.99.100\">http://192.168.99.100</a></strong> You can find the IP Address of your docker-machine by using <code>docker-machine IP default</code></p>\n</blockquote>\n\n<p>If you want to scale the web app up to 3 instances, we use the <code>docker-compose scale web=&lt;instances&gt;</code> command</p>\n\n<pre><code>$ docker-compose scale web=3\nCreating and starting 2... done  \nCreating and starting 3... done  \n</code></pre>\n\n<p>Now run the <code>docker-compose ps</code> to see the instances</p>\n\n<pre><code>$ docker-compose ps\n           Name                      Command           State                   Ports\n----------------------------------------------------------------------------------------------------\nhaproxyplayground_lb_1       python /haproxy/main.py   Up      1936/tcp, 443/tcp, 0.0.0.0:80-&gt;80/tcp  \nhaproxyplayground_redis_1    /entrypoint.sh            Up      0.0.0.0:7379-&gt;7379/tcp  \nhaproxyplayground_web_1      nginx -g daemon off;      Up      443/tcp, 80/tcp, 8080/tcp  \nhaproxyplayground_web_2      nginx -g daemon off;      Up      443/tcp, 80/tcp, 8080/tcp  \nhaproxyplayground_web_3      nginx -g daemon off;      Up      443/tcp, 80/tcp, 8080/tcp  \nhaproxyplayground_webapi_1   dnx -p project.json web   Up      5001/tcp  \n</code></pre>\n\n<p>And you can see that there are now 3 instances of the web application, 1 of the webapi.</p>\n\n<p>Shutting them all down is easy with <code>docker-compose stop</code> and removing the containers with <code>docker-compose rm</code>.</p>\n\n<h3 id=\"wrappingup\">Wrapping Up</h3>\n\n<p>Being able to select the various technologies you want to use, independently deploy and scale them is where you ultimately strive to be in any application development and deployment plan.  Here I was able to use Angular 2, ASP.NET Core Web API, Redis, haproxy, and ngnix to create an end-end application in a development environment that would ultimately emulate TEST, QA and Production environments in this scenario. Scaling of the application can be accomplished using Docker Swarm or Mesos with a similar .yml or .json configuration file as we had in the docker-compose file should you need that in your cloud provider.</p>\n\n<h3 id=\"resources\">Resources</h3>\n\n<ul>\n<li>github repo - <a href=\"https://github.com/spboyer/haproxy-playground\">https://github.com/spboyer/haproxy-playground</a></li>\n<li>Angular 2 - <a href=\"http://angular.io\">http://angular.io</a></li>\n<li>Tour of Heroes tutorial - <a href=\"https://angular.io/docs/ts/latest/tutorial/\">https://angular.io/docs/ts/latest/tutorial/</a></li>\n<li>Docker - <a href=\"http://docker.com\">http://docker.com</a></li>\n<li>ASP.NET Core - <a href=\"http://get.asp.net\">http://get.asp.net</a></li>\n</ul>","image":"/content/images/2016/02/Legion-of-Heroes.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1455312231663,"created_by":1,"updated_at":1461339514510,"updated_by":1,"published_at":1455314400000,"published_by":1},{"id":62,"uuid":"36f57dc5-5cc1-4d5d-9a90-1b486392cd73","title":"DEVIntersection Spring 2016","slug":"devintersection-spring-2014","markdown":"\n<div style=\"float:right\">\n     <img src=\"/content/images/2016/02/swanhotel.jpg\" />\n</div>\nCome out to Orlando, **April 16-22** at the Disney Swan Hotel and see me and my friends speak about all of the latest and greatest technology.\n\n[REGISTER](https://www.devintersection.com/#!/register) using the code **[BOYER](https://www.devintersection.com/#!/register)** and save $$$.  [Register](https://www.devintersection.com/#!/register) before March 1 for a workshop package and get your choice of **Microsoft Band 2**, **Surface 3**, or **XBOX ONE**. \n\nI'll talking about **Getting Started with the Modern Web Toolchain** - Bower, gulp, npm may or may not be new terms to you when sitting down for your next application. Getting an understanding of what these tools can do to help inside and outside of your IDE will streamline your development team to a faster path to production. Check out this session for a quick intro into these tools.\n\n####Countdown to DEVIntersection 2016 from Richard Campbell\n\n<iframe src=\"https://channel9.msdn.com/Shows/The-DEVintersection-Countdown-Show/Welcome-to-DevIntersection-Spring-2016-CountDown-Show-1/player\" width=\"560\" height=\"315\" allowFullScreen frameBorder=\"0\"></iframe>","html":"<div style=\"float:right\">  \n     <img src=\"/content/images/2016/02/swanhotel.jpg\" />\n</div>  \n\n<p>Come out to Orlando, <strong>April 16-22</strong> at the Disney Swan Hotel and see me and my friends speak about all of the latest and greatest technology.</p>\n\n<p><a href=\"https://www.devintersection.com/#!/register\">REGISTER</a> using the code <strong><a href=\"https://www.devintersection.com/#!/register\">BOYER</a></strong> and save $$$.  <a href=\"https://www.devintersection.com/#!/register\">Register</a> before March 1 for a workshop package and get your choice of <strong>Microsoft Band 2</strong>, <strong>Surface 3</strong>, or <strong>XBOX ONE</strong>. </p>\n\n<p>I'll talking about <strong>Getting Started with the Modern Web Toolchain</strong> - Bower, gulp, npm may or may not be new terms to you when sitting down for your next application. Getting an understanding of what these tools can do to help inside and outside of your IDE will streamline your development team to a faster path to production. Check out this session for a quick intro into these tools.</p>\n\n<h4 id=\"countdowntodevintersection2016fromrichardcampbell\">Countdown to DEVIntersection 2016 from Richard Campbell</h4>\n\n<iframe src=\"https://channel9.msdn.com/Shows/The-DEVintersection-Countdown-Show/Welcome-to-DevIntersection-Spring-2016-CountDown-Show-1/player\" width=\"560\" height=\"315\" allowFullScreen frameBorder=\"0\"></iframe>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1455717922423,"created_by":1,"updated_at":1455733247835,"updated_by":1,"published_at":1455674400000,"published_by":1},{"id":64,"uuid":"d20ae400-3ad1-4c75-99ff-eae1139f6275","title":"A Chat on Adventures in Angular: Episode 82","slug":"adventures-in-angular-82","markdown":"<a href=\"http://adventuresinangular.com/\" target=\"_blank\"><img src=\"/content/images/2016/03/AiA-logo-sm.png\" style=\"margin:10px; float:left;border:0;\" /></a>\n\nI recently had an opportunity to sit with the team on the [Adventures in Angular](http://adventuresinangular.com/) podcast and talk about my NON experience with Angular 1 and how my path into Angular 2 was going given I had some in depth TypeScript knowledge.\n\nAiA is a regular listen for me, the guest and panel are often either friends in the community or people to pay attention to and the content is always great.\n\nOf course we cover TypeScript & Angular 2 but also talked about node.js, ASP.NET Core, ReactiveX and more.\n\nCheck out the show - https://devchat.tv/adventures-in-angular/082-aia-getting-started-with-angular-2-with-no-angular-1-experience-with-shayne-boyer\n\nBe sure to checkout my [Pluralsight Play by Play with John Papa as well on ASP.NET Core 1.0 on Any OS](http://spboyer.me/pbpaspnetcore)","html":"<p><a href=\"http://adventuresinangular.com/\" target=\"_blank\"><img src=\"/content/images/2016/03/AiA-logo-sm.png\" style=\"margin:10px; float:left;border:0;\" /></a></p>\n\n<p>I recently had an opportunity to sit with the team on the <a href=\"http://adventuresinangular.com/\">Adventures in Angular</a> podcast and talk about my NON experience with Angular 1 and how my path into Angular 2 was going given I had some in depth TypeScript knowledge.</p>\n\n<p>AiA is a regular listen for me, the guest and panel are often either friends in the community or people to pay attention to and the content is always great.</p>\n\n<p>Of course we cover TypeScript &amp; Angular 2 but also talked about node.js, ASP.NET Core, ReactiveX and more.</p>\n\n<p>Check out the show - <a href=\"https://devchat.tv/adventures-in-angular/082-aia-getting-started-with-angular-2-with-no-angular-1-experience-with-shayne-boyer\">https://devchat.tv/adventures-in-angular/082-aia-getting-started-with-angular-2-with-no-angular-1-experience-with-shayne-boyer</a></p>\n\n<p>Be sure to checkout my <a href=\"http://spboyer.me/pbpaspnetcore\">Pluralsight Play by Play with John Papa as well on ASP.NET Core 1.0 on Any OS</a></p>","image":"/content/images/2016/04/IMG_3163.JPG","featured":1,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1457100379417,"created_by":1,"updated_at":1461337525031,"updated_by":1,"published_at":1457101748161,"published_by":1},{"id":65,"uuid":"6fc5d82e-2a89-420c-8ae5-ea00d41c0ee9","title":"yo aspnet : UI Options Coming Soon!","slug":"yo-aspnet-ui-options-coming-soon","markdown":"Just a quick update on what the **yo aspnet** team has been working on. \n\nBootstrap (aka Twitter Bootstrap) is the very well known UI layout engine and has been the standard for the ASP.NET generator. However, there was a contributor - **[Josh Williams](https://github.com/jackjwilliams)** pitching the idea of using <a href=\"http://semantic-ui.com/\" target=\"_blank\">Semantic UI</a> (http://semantic-ui.com/) as an alternative.\n\nAfter some conversation with other members of the team, we decided that **choice** would prevail and offer the following options.\n\n```\n$ yo aspnet\n\n     _-----_\n    |       |    .--------------------------.\n    |--(o)--|    |      Welcome to the      |\n   `---------´   |  marvelous ASP.NET Core |\n    ( _´U`_ )    |      1.0 generator!      |\n    /___A___\\    '--------------------------'\n     |  ~  |\n   __'.___.'__\n ´   `  |° ´ Y `\n\n? What type of application do you want to create? Web Application\n? Which UI framework would you like to use? (Use arrow keys)\n❯ Bootstrap (3.3.5)\n  Semantic UI (2.1.8)\n  Material Design Lite (1.1.2)\n```\n\n###Semantic UI###\nHere is a quick look at the template. Contributed to the project by **[Josh Williams](https://github.com/jackjwilliams)**. More information on Semantic UI on <a href=\"http://semantic-ui.com/\" target=\"_blank\">http://semantic-ui.com/</a>\n\n**Desktop**\n\n![desktop-semantic](/content/images/2016/03/Screen-Shot-2016-03-15-at-10-40-59-PM.png)\n\n**Mobile (iPhone 6s Plus)**\n\n<img src=\"/content/images/2016/03/Screen-Shot-2016-03-15-at-10-42-27-PM.png\"  style=\"width: 400px;display: block;\n    margin-left: auto;\n    margin-right: auto\">\n\n<img src=\"/content/images/2016/03/Screen-Shot-2016-03-15-at-10-42-46-PM.png\"  style=\"width: 400px;display: block;\n    margin-left: auto;\n    margin-right: auto\">\n\n###Material Design Lite###\nThe following are screen shots from the Material Design Lite implementations currently in the works from long time contributor **[Peter Blazejewicz](https://github.com/peterblazejewicz)**.\n\n**Desktop**\n![mdl-desktop](/content/images/2016/03/20160313150115.jpg)\n\n**Tablet**\n![mdl-tablet](/content/images/2016/03/20160313145920.jpg)\n\n**Mobile (iPhone6s Plus)**\n\n<img src=\"/content/images/2016/03/20160313150041.jpg\" style=\"width: 400px;display: block;\n    margin-left: auto;\n    margin-right: auto\">\n\nBe sure to watch the repository - http://github.com/omnisharp/generator-aspnet for updates. Follow us on twitter and github.\n\n* @omnisharp - https://github.com/OmniSharp & https://twitter.com/OmniSharp\n* @spboyer - https://github.com/spboyer & https://twitter.com/spboyer\n* @peterblazejewicz - https://github.com/peterblazejewicz & https://twitter.com/peterblazejewicz\n","html":"<p>Just a quick update on what the <strong>yo aspnet</strong> team has been working on. </p>\n\n<p>Bootstrap (aka Twitter Bootstrap) is the very well known UI layout engine and has been the standard for the ASP.NET generator. However, there was a contributor - <strong><a href=\"https://github.com/jackjwilliams\">Josh Williams</a></strong> pitching the idea of using <a href=\"http://semantic-ui.com/\" target=\"_blank\">Semantic UI</a> (<a href=\"http://semantic-ui.com/\">http://semantic-ui.com/</a>) as an alternative.</p>\n\n<p>After some conversation with other members of the team, we decided that <strong>choice</strong> would prevail and offer the following options.</p>\n\n<pre><code>$ yo aspnet\n\n     _-----_\n    |       |    .--------------------------.\n    |--(o)--|    |      Welcome to the      |\n   `---------´   |  marvelous ASP.NET Core |\n    ( _´U`_ )    |      1.0 generator!      |\n    /___A___\\    '--------------------------'\n     |  ~  |\n   __'.___.'__\n ´   `  |° ´ Y `\n\n? What type of application do you want to create? Web Application\n? Which UI framework would you like to use? (Use arrow keys)\n❯ Bootstrap (3.3.5)\n  Semantic UI (2.1.8)\n  Material Design Lite (1.1.2)\n</code></pre>\n\n<h3 id=\"semanticui\">Semantic UI</h3>\n\n<p>Here is a quick look at the template. Contributed to the project by <strong><a href=\"https://github.com/jackjwilliams\">Josh Williams</a></strong>. More information on Semantic UI on <a href=\"http://semantic-ui.com/\" target=\"_blank\">http://semantic-ui.com/</a></p>\n\n<p><strong>Desktop</strong></p>\n\n<p><img src=\"/content/images/2016/03/Screen-Shot-2016-03-15-at-10-40-59-PM.png\" alt=\"desktop-semantic\" /></p>\n\n<p><strong>Mobile (iPhone 6s Plus)</strong></p>\n\n<p><img src=\"/content/images/2016/03/Screen-Shot-2016-03-15-at-10-42-27-PM.png\"  style=\"width: 400px;display: block; <br />\n    margin-left: auto;\n    margin-right: auto\"></p>\n\n<p><img src=\"/content/images/2016/03/Screen-Shot-2016-03-15-at-10-42-46-PM.png\"  style=\"width: 400px;display: block; <br />\n    margin-left: auto;\n    margin-right: auto\"></p>\n\n<h3 id=\"materialdesignlite\">Material Design Lite</h3>\n\n<p>The following are screen shots from the Material Design Lite implementations currently in the works from long time contributor <strong><a href=\"https://github.com/peterblazejewicz\">Peter Blazejewicz</a></strong>.</p>\n\n<p><strong>Desktop</strong>\n<img src=\"/content/images/2016/03/20160313150115.jpg\" alt=\"mdl-desktop\" /></p>\n\n<p><strong>Tablet</strong>\n<img src=\"/content/images/2016/03/20160313145920.jpg\" alt=\"mdl-tablet\" /></p>\n\n<p><strong>Mobile (iPhone6s Plus)</strong></p>\n\n<p><img src=\"/content/images/2016/03/20160313150041.jpg\" style=\"width: 400px;display: block; <br />\n    margin-left: auto;\n    margin-right: auto\"></p>\n\n<p>Be sure to watch the repository - <a href=\"http://github.com/omnisharp/generator-aspnet\">http://github.com/omnisharp/generator-aspnet</a> for updates. Follow us on twitter and github.</p>\n\n<ul>\n<li>@omnisharp - <a href=\"https://github.com/OmniSharp\">https://github.com/OmniSharp</a> &amp; <a href=\"https://twitter.com/OmniSharp\">https://twitter.com/OmniSharp</a></li>\n<li>@spboyer - <a href=\"https://github.com/spboyer\">https://github.com/spboyer</a> &amp; <a href=\"https://twitter.com/spboyer\">https://twitter.com/spboyer</a></li>\n<li>@peterblazejewicz - <a href=\"https://github.com/peterblazejewicz\">https://github.com/peterblazejewicz</a> &amp; <a href=\"https://twitter.com/peterblazejewicz\">https://twitter.com/peterblazejewicz</a></li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1458095440135,"created_by":1,"updated_at":1458097408749,"updated_by":1,"published_at":1458097408749,"published_by":1},{"id":66,"uuid":"82e9edc1-daae-4c9b-ae12-fe1b26e2f402","title":"ASP.NET Core Slack Community","slug":"asp-net-core-slack-community","markdown":"![aspnet-slack](/content/images/2016/05/dotnetslack-1.png)\n*update the team has been renamed to .NET from ASP.NET to not exclude anyone* -\n[sign up page here](http://tattoocoder.com/aspnet-slack-sign-up/)\n\n[![Slack Status](https://aspnetcoreslack.herokuapp.com/badge.svg)](http://tattoocoder.com/aspnet-slack-sign-up/)\n\n<img src=\"/content/images/2016/03/slack.png\" style=\"float:right;margin: 10px\"> I'm a big fan of Slack.  I use it internally for work as well as for a number of teams that I'm involved with for projects or community like OrlandoDevs, Telerik Experts, Angular Beers.\n\nI find that it's a great way to quickly discuss topics of interest, created private and public rooms, share code snippets etc.\n\nFor ASP.NET I have been using Jabbr, Twitter, Email and even GitHub at times via Issues to connect with the community and engineers to get answers and discuss ideas or topics. \n\nI like that Slack give me the mobile apps, what I feel is missing from Jabbr and Github. Email feels so corporate.\n\n<!--\n<div class=\"container\">\nADD YOUR MAIN CONTENT HERE E.G. Image, Code.\n<div class=\"reference\">\n<strong>Annotation Title Here</strong>\n<p>Annotation text here.</p>\n</div>\n</div>\n-->\nThere are some mixed feelings on Slack:\n\n*\"...the meeting that never ends\"*\n\n*\"...so hard to follow, no threaded conversations\"*\n\nI created **aspnetcore.slack.com**, it's wide open for [sign up](http://tattoocoder.com/aspnet-slack-sign-up/). \n\nI have a couple of rules.\n\nThere will be no NDA material discussed within this group. It is not run Microsoft. \n\nBe a good citizen to one another, I would hope that we are all here to be helpful and learn from one another.  If need be there will be a Code of Conduct, let’s not get to that point.\n\nChannels are created to relate to the github repos within https://github.com/aspnet\n\n\nEnjoy, share, #slack\n","html":"<p><img src=\"/content/images/2016/05/dotnetslack-1.png\" alt=\"aspnet-slack\" />\n<em>update the team has been renamed to .NET from ASP.NET to not exclude anyone</em> -\n<a href=\"http://tattoocoder.com/aspnet-slack-sign-up/\">sign up page here</a></p>\n\n<p><a href=\"http://tattoocoder.com/aspnet-slack-sign-up/\"><img src=\"https://aspnetcoreslack.herokuapp.com/badge.svg\" alt=\"Slack Status\" title=\"\" /></a></p>\n\n<p><img src=\"/content/images/2016/03/slack.png\" style=\"float:right;margin: 10px\"> I'm a big fan of Slack.  I use it internally for work as well as for a number of teams that I'm involved with for projects or community like OrlandoDevs, Telerik Experts, Angular Beers.</p>\n\n<p>I find that it's a great way to quickly discuss topics of interest, created private and public rooms, share code snippets etc.</p>\n\n<p>For ASP.NET I have been using Jabbr, Twitter, Email and even GitHub at times via Issues to connect with the community and engineers to get answers and discuss ideas or topics. </p>\n\n<p>I like that Slack give me the mobile apps, what I feel is missing from Jabbr and Github. Email feels so corporate.</p>\n\n<!--  \n\n<div class=\"container\">  \nADD YOUR MAIN CONTENT HERE E.G. Image, Code.  \n<div class=\"reference\">  \n<strong>Annotation Title Here</strong>  \n<p>Annotation text here.</p>  \n</div>  \n\n</div>  \n-->\n\n<p>There are some mixed feelings on Slack:</p>\n\n<p><em>\"...the meeting that never ends\"</em></p>\n\n<p><em>\"...so hard to follow, no threaded conversations\"</em></p>\n\n<p>I created <strong>aspnetcore.slack.com</strong>, it's wide open for <a href=\"http://tattoocoder.com/aspnet-slack-sign-up/\">sign up</a>. </p>\n\n<p>I have a couple of rules.</p>\n\n<p>There will be no NDA material discussed within this group. It is not run Microsoft. </p>\n\n<p>Be a good citizen to one another, I would hope that we are all here to be helpful and learn from one another.  If need be there will be a Code of Conduct, let’s not get to that point.</p>\n\n<p>Channels are created to relate to the github repos within <a href=\"https://github.com/aspnet\">https://github.com/aspnet</a></p>\n\n<p>Enjoy, share, #slack</p>","image":"/content/images/2016/05/dotnetslack-1.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":".NET Slack Channel","meta_description":".NET Slack Channel :  Share, communicate, connect.","author_id":1,"created_at":1459258660578,"created_by":1,"updated_at":1463322227409,"updated_by":1,"published_at":1459252800000,"published_by":1},{"id":67,"uuid":"9b1fac6c-0075-4045-8897-8eca6298b6d4","title":"Notes on Server Stacks, API Design, Architecture","slug":"notes-on-server-stacks-api-design-architecture","markdown":"# Static Server Stack FAQ\n\n> The RA recommends node.js with express for a static server\n\n## What is a static server in the RA context?\n\nWe use a configuration that uses two (2) web servers, we use a node/ and restify server to serve API's (typically JSON data) and we use another web server to serve static assets (.js, .css, .html and media). More details here [Web API FAQ](web-api-faq.md)\n\n## So what web servers are we looking at for the static server?\n\n* [node.js](http://nodejs.org) with [Express] (http://expressjs.com)\n* [nginx](http://nginx.org/en/)\n* [Apache](http://httpd.apache.org)\n\n## What is the criteria for choosing one?\n\n* Performance\n* Scalability\n* Stability\n* Ease of configuration and extension\n\nFor your interest here is a list of articles comparing these products on performance and scalability, these favor node.\n\n* [node vs nginx](http://centminmod.com/siegebenchmarks/2013/020313/index.html)\n\nOf course dependent on task and configuration you can find benchmarks and advice favoring nginx or even  [lighttpd](http://www.lighttpd.net).\n\n## Conclusion\n\nWe recommend that node.js and express be used for the static component of the server stack.\n\n## Why we chose to recommend node.js and express for our static server\n\nWe found that the possible performance and stability enhancements of using nginx or lighttpd was in our case trumped by the ease of extension and programmability of using node.js and Express. We rely on grunt and yeoman for our deployment and generator tasks and we wouldn't be able to reconfigure our servers as easily and efficiently as we can with node.js with any of the other candidates.\nWe also found that adding middleware for security, http headers, exception handling and other custom features suited our architectural needs at the current level of maturity we are currently at.\n\n## Factors supporting this conclusion\n\nAt the load required to make a measurable speed difference between each of these 3 (Express, nginx and lighttpd) it becomes a very moot point which to chose from a performance perspective.\nApache lags in the performance stakes because it uses multi-threaded IO and that thread management slows it down. For light loads it is a little inflexible and slow, for a steady number of requestors it is very very stable and performs adequately, unfortunately that is not the use case we are choosing a static web server for.\n\nTo see any meaningful difference between these 3 servers we need a load  (depending on server size) between 1000 and 4000 concurrent requests. That would be a wonderful place to be in for our public facing web sites, and remember this doesn't even include clustering, we are nowhere near that level of load. So maybe performance is not the differentiator we thought it was, so how about stability?\n\n## Stability?\n\nWhew! How many opinions do you want? If all you had was a web server with no monitoring or clustering then go Apache it is well known to be pretty bullet proof but... we do use monitoring etc etc and we can spin up servers very quickly and bring them down very quickly too.\n\nDoes it matter, really? I guess so; lots of people have a lot of things to say about it. A lightweight server is easier to maintain and deploy. And you can extend it very easily.\n\nThe knock on node.js and express is that it runs on a LVM (language VM) so it can't be as stable as nginx which is finely crafted c++; you will go a long way to find a server that doesn't run in a VM of some kind, it might not be a LVM but it is still a VM.\n\nThere might be a sliver of truth that node can be less stable but bad code can exist on any server.\n\n# Ease of configuration and extension\n\nNo contest node.js rules this area. Because you build the server yourself you can extend it to do anything you want.\n\n#Web API and Node.js FAQ\n\n## What is the Web API?\n\nThe web api is the server side part of the mobile or SPA application.\n\n## What is it?\n\nIt is a Node.js application.\n\n## Why Node.js?\n\n1. **API Designed for a UI** - Building a web server and its API's in javascript is a huge win because it means a client developer can tweak his API to suit his application perfectly. Effectively, the Web API is an extension of the UI.\n2. **Super-fast IO** - Node.js uses (wherever possible) asynchronous IO, hence it is optimized for throughput and concurrency. It is super fast for lightweight Web API apps that serve predominantly JSON documents.\n3. **Developer Productivity** - Developers are very productive because they can take advantage of JavaScript on both the client and the server without swtiching context.\n4. **Large Plug-in Ecosystem** - There is a huge ecosystem of Node.js modules and middleware in npm (node package manager) ecosystem, with many stable packages used by large corporations.\n\nWe found upwards of 67% performance throughput increase comparing our POC to the current stage environment; what was even more impressive was that our servers were tiny compared to the stage environment.\n\n## How is it configured?\n\nThere are 2 node web servers in the RA guidance, these are named static and API. They are typically packaged in the same node application serving different ports for a single client application. For example, a static server running node.js and express to server static assets and a Web API server running node.js and restify.\n\n## Why 2 servers?\n\n### static\nA static web server serves static content i.e. js, css, html and media assets. This type of web server is usually optimized differently than an API server i.e. for cache busting etc. For our static server we are currently using node and the Express package. Learn more about the static server here at [Server Stack FAQ](server-stack-faq.md).\n\n### API\nAn API server provides the following services\n\n* Orchestration\n* Data mapping\n* Aggregation\n* Transport handling (i.e. access to XML, JSON and other backend services)\n* REST\n* Plugins for standard RA building blocks like Logasaurus, Timer and ALRM\n* Logging, errors and diagnostics\n\nWe are currently using node and [Restify](http://mcavage.me/node-restify/) for the api server. Here are our thoughts on [what framework to use](serving-apis.md).\n\n<a name=\"orchestration\"></a>\n## What is Orchestration?\n\nAll orchestration does is allow a development team to call multiple back-end services asynchronously and map the resulting data as required for the client. The Web API must also provide PUT and POST endpoints for clients.\n\n### What about assembling data for the Views?\n\nOne of the roles of orchestration is to assemble the data for the Views in the UI. This is often beneficial when there are several back end services that provide data that a View needs. This data needs to be assembled for the Views. Let's explore how this would work if it were to be done in the backend in Java or .NET, in the Web API layer in Node.js, or in the client browser.\n\n#### Browser assembly - Least efficient and not recommended\nIf the browser has to assemble the data for the Views this would require numerous HTTP requests, a lot more data coming to the client than is needed, and additional processing on the browser to assemble the data. This is not a logical location for assembly due to these factors.\n\n#### Web API Layer - Recommended\nThe Node.js Web API layer is closer to tha back end services that have the View specific data and can make the HTTP requests faster. It also has a faster pipeline to the back end services to get quick responses. Node.js can assemble data quickly in the JSON format. This layer also provides the browser the exact format and smallest payload in a single request, making it much more efficient for the browser. This is an ideal location for assembly when the data is already in JSON format.\n\nAnother option is to create a .NET or Java assembly layer that sits between the back end services and the Node.js Web API layer that aggregates and assembles the View specific data. This might be most efficent if there is heavy transformation of data formats (i.e. SOAP/XML/RPC to JSON).\n\n#### Back-End Services Layer\nThe Java or .NET back end services layer can also assemble the data for the Views. Often these services serve many clients and cannot be tailored for specific clients.\n\n## REST\n\nWe recommend using a separate routes folder in your applications.  We also encourage people to use HTTP correctly with the correct codes and verbs. [Here are our guidelines for REST](webapi-design-guidelines.md)\n\n## Data Mapping\n\nWe have tooling available to use template based JSON mapping services to transform your JSON documents from humdrum to awesome.\n\n## Asynchronous & Promise Libraries for the web api\n\nWe recommend you use [Bluebird](https://www.npmjs.org/package/bluebird) for Node.js. We have used async.js, q.js and fibers in our own projects and in the POC however we believe Bluebird shows the most promise and encourage standardizing on that. Here is our own [Promises](./UI%20RA%20Async%20Promises%20PoV.md) research\n\n## Logging and error handling\n\nWe have created a simple logging package called  [wdpr-node-logasaurus](https://github.disney.com/WDPR-RA-UI/wdpr-node-logasaurus). Logasaurus is packaged as part of the [wdpr-node-alrm](https://github.disney.com/WDPR-RA-UI/wdpr-node-alrm) (Alerting, Logging, Reporting and Monitoring) package however you can require it on it's own. We use  [bunyan](https://github.com/trentm/node-bunyan) as our logger npm package.\n\nError handling will be an integral part of the Web API, this will take care of reporting and gracefully handling any exceptions you may get. We've got client side synchronous & asynchronous error handling caught, logged to the client, and to the server (in Node.js). Using RA tooling, you'll know when and where you have errors, anywhere in the stack.\n\n## What sort of code lives in the web api?\n\nWe want to keep the node layer lightweight and zippy. If you find yourself writing business logic and complicated workflows in the node layer that is the wrong place, please cease and desist. That sort of stuff should be moved down into either the presentation services (java or .NET) layer or the backend services layer. Here is our guidance on [that subject]\n(./prescriptions/arch-layers.md)\n\n## Caching\n\nCaching should be used sparingly and in the appropriate layer. For example, the browser can cache non volatile HTTP responses and other non PII data, with expirations. Often in a browser based model the User stays on the client and thus does not need to go back to the server to go from page to page, which reduces the need to cache on the server for client data.\n\n## Session\n\nThe Single Page Application (SPA) and browser based architecture helps keep the User on the client browser. The server page driven architectures (i.e. ASP.NET, Spring, JSP, PHP) make  round trips between each View where it then is helpful to maintain session based data accessible to the Web Server. With a SPA model the user makes less round trips and stays on the client between View changes, thus reducing the helpfulness of Session state on the Web Server.\n\nWhen moving from SPA to SPA non PII state can be transferred using QueryString parameters, Cookies, Local Storage, headers, or tokens. Sensitive state data should be saved to a persistant store (i.e. shopping cart) accessible via services.\n\nUser security tokens can be stored in a secure and http-only cookie.\n\nUser profile data should be accessed via a Web API service and returned to the browser and then stored in memory.\n\n# Web API Design Guidelines\nGuidelines to design the interface of a specialized RESTful Web API to serve client applications, including single-page Web applications and mobile applications.\n\nCreating modern user interfaces for existing business systems is challenging because these systems typically expose services that do not meet the needs of UI clients and are time-consuming and costly to adapt. Furthermore, while user interfaces are expected to be responsive and serve multiple form factors, each needs different data subsets that existing systems may expose in fragments which need to be aggregated, transformed, reformatted, and enriched. \n\nThe solution to this problem is to insert an intermediate API between UI clients and business services that:\n\n* is easy to implement and modify by the UI developer\n* has facilities to orchestrate services and transform, aggregate, and enrich data\n* has a variety of connectors to existing interface protocols\n* is lightweight\n* has an event-driven architecture\n\nThe API acts as a facade and mediator to:\n\n* simplify complex and disparate interfaces\n* facilitate consuming business services without re-architecting\n* reduce dependencies of the client on the inner workings of back-end systems, thus allowing more flexibility on the independent evolution of clients and back-end systems\n* front a possibly poorly designed existing collection of APIs with a single, well-designed API\n* improve performance by caching back-end responses\n\nThis document provides the guidelines that the Reference Architecture team recommends to design mediation APIs. Separate documents will provide guidelines to implement the Web API.\n\n## Resources and Representations\n\nThe API is a RESTful Web API. REST stands for [Representational State Transfer](http://en.wikipedia.org/wiki/Representational_state_transfer). In a RESTful API, the client keeps application state, but the server enables its manipulation by sending representations that describe the possible state transitions. The server keeps resource state, but the client can manipulate it by sending the server a representation describing the desired new state of a resource.\n\nWeb API representations should have the structure that UI clients present to users, not necessarily the structure presented by the back-end business services.\n\n## URL Design\n\nA resource URL must identify a resource representing a single domain entity and have the form:\n\n```\nhttp://host/<context>/<semver>/<resource>/<id>\n```\n\nwhere,\n\n* `<context>` is the API application context, typically the name of the UI application, i.e., \"fpp\"\n* `<semver>` is a [semantic version number](http://semver.org/), i.e., \"0.1.1\"\n* `<resource>` is a plural noun that denotes a resource class, i.e., \"guests\"\n* `<id>` unique identifier of a resource\n\nfor example:\n\n```\nhttp://api.disney.com/fpp/0.1.1/guests/12345\n```\n\n## Representation Format \n\nThe collection pattern shows over and over in many different domains.\nA collection is a special kind of resource. It exists mainly to group other\nresources together. Its representation focuses on links to other resources, though it may also include snippets from the representations of those other linked resources.\n\nAn individual resource whose representation is contained within a collection is called an _item_ or _member_ of the collection. However, each item has its own URL and independent existence outside of the collection. When we talk about an “item” or a “member,” we’re talking about a standalone resource that happens to be linked from a collection’s representation.\n\n_Collection+JSON_ is a JSON-based read/write hypermedia-type designed to support management and querying of simple collections. Collection+JSON defines both the format and the semantics in a single media type. It also includes support for Query Templates and expanded write support through the use of a Write Template. We therefore recommend that the Web API implement the collections pattern using a variation of this media type. The Web API should then serve collections of representations with the `application/vnd.collection+json` VND. Here is an example:\n\n    { \"collection\":\n\t\t{\n\t\t\t\"version\" : \"1.0\",\n\t\t\t\"href\" : \"http://api.disney.com/fpp/guests/\",\n\t\t\t\"representations\" : [\"basic\", \"partial\", \"full\"],\n\t\t\t\"items\" : [\n\t\t\t\t{ \"href\" : \"/fpp/guests/1234\",\n\t\t\t\t\t\"data\" : [\n\t\t\t\t\t\t{ \"name\" : \"name\", \"value\" : \"John Doe\" },\n\t\t\t\t\t\t{ \"name\" : \"phone\", \"value\" : \"(727)345-6587\" }\n\t\t\t\t\t],\n\t\t\t\t\t\"links\" : []\n\t\t\t\t},\n\t\t\t\t{ \"href\" : \"/fpp/guests/4567\",\n\t\t\t\t\t\"data\" : [\n\t\t\t\t\t\t{ \"name\" : \"name\", \"value\" : \"Jane Smith\" },\n\t\t\t\t\t\t{ \"name\" : \"phone\", \"value\" : \"(813)123-8709\" }\n\t\t\t\t\t],\n\t\t\t\t\t\"links\" : []\n\t\t\t\t}\t\t\t\n\t\t\t],\n\t\t\t\"links\" : [\n\t\t\t\t{\"href\" : \"/logo.png\", \"rel\" : \"icon\", \"render\" : \"image\"}\n\t\t\t],\n\t\t\t\"queries\" : [\n\t\t\t\t{ \"href\" : \"/fpp/guests/search\",\n\t\t\t\t\t\"rel\" : \"search\",\n\t\t\t\t\t\"prompt\" : \"Search guests by last name\",\n\t\t\t\t\t\"data\" : [ {\"name\" : \"byLastName\", \"value\" : \"\"} ]\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"template\" : {\n\t\t\t\t\"data\" : [\n\t\t\t\t\t{\"prompt\" : \"Guest name\", \"name\" : \"name\", \"value\" : \"\"},\n\t\t\t\t\t{\"prompt\" : \"Guest phone\", \"name\" : \"phone\", \"value\" : \"\"}\n\t\t\t\t]\n\t\t\t}\n\t\t}\n    }\n\nwhere,\n\n* `href : \"http://api.disney.com/fpp/guests/\"` is a permanent link to the collection itself\n* `items` is an array of links to the members of the collection and partial representations of them\n* `links` is an array of links to other resources related to the collection\n* `queries` is an array of Hypermedia controls for searching the collection\n* `template` is a Hypermedia control to add items to the collection\n\n### Item Representations\n\nLet's focus on an item in the `items` array. Consider this example:\n\n\t{ \"href\" : \"/fpp/guests/1234\",\n\t\t\"data\" : [\n\t\t\t{ \"name\" : \"name\", \"value\" : \"John Doe\" },\n\t\t\t{ \"name\" : \"phone\", \"value\" : \"(727)345-6587\" }\n\t\t],\n\t\t\"links\" : []\n\t},\n\nwhere,\n\n* `href` is a permanent link to the item's standalone resource\n* `links` is an array of links to other resources related to the item\n* `data` is a partial representation of the standalone resource\n\nAlternatively, we can have a terser, more readable non-generic representation:\n\n\t{ \"href\" : \"/fpp/guests/1234\",\n\t\t\"data\" : [\n\t\t\t{ \"name\" : \"John Doe\" },\n\t\t\t{ \"phone\" : \"(727)345-6587\" }\n\t\t],\n\t\t\"links\" : []\n\t},\n\n### An Item's Permanent Link\n\nA member’s `href` attribute is a link to the resource outside the context of its collection. Invoking a GET on that link, the API will respond with a Collection+JSON representation of a single item. For example:\n\n    { \"collection\":\n\t\t{\n\t\t\t\"version\" : \"1.0\",\n\t\t\t\"href\" : \"http://api.disney.com/fpp/guests/\",\n\t\t\t\"items\" : [\n\t\t\t\t{ \"href\" : \"/fpp/guests/1234\",\n\t\t\t\t\t\"data\" : [\n\t\t\t\t\t\t{ \"name\" : \"name\", \"value\" : \"John Doe\" },\n\t\t\t\t\t\t{ \"name\" : \"phone\", \"value\" : \"(727)345-6587\" }\n\t\t\t\t\t],\n\t\t\t\t\t\"links\" : []\n\t\t\t\t}\n\t\t\t]\n\t\t}\n    }\n\nOr, alternatively,\n\n    { \"collection\":\n\t\t{\n\t\t\t\"version\" : \"1.0\",\n\t\t\t\"href\" : \"http://api.disney.com/fpp/guests/\",\n\t\t\t\"items\" : [\n\t\t\t\t{ \"href\" : \"/fpp/guests/1234\",\n\t\t\t\t\t\"data\" : [\n\t\t\t\t\t\t{ \"name\" : \"John Doe\" },\n\t\t\t\t\t\t{ \"phone\" : \"(727)345-6587\" }\n\t\t\t\t\t],\n\t\t\t\t\t\"links\" : []\n\t\t\t\t}\n\t\t\t]\n\t\t}\n    }\n\nAs further explained below, you may be able to modify an item with a `HTTP PUT` to its permanent link, or delete it with a `HTTP DELETE` to its permanent link.\n\n### An Item's Data and Representation\n\nAn item's `data` attribute contains a partial representation of the resource. The API will offer a set of named representations available to the client in an array in the `representations` attribute. The first representation in the array is the default. If the client desires another representation, it must include the `representation` parameter in a `GET` request. For example:\n\n\tGET /fpp/guests/search?byLastName=Smith&representation=full HTTP/1.1\n\tHost: api.disney.com\n\n### An Item's Links\n\nAn item's `href` attribute contains a relative link to the item's standalone resource:\n\n`\"href\" : \"/fpp/guests/1234\"`\n\nAn item's representation may also contain an array of links to other resources related to the item's resource in the `links` attribute. Here is an example of this type of link:\n\n\t{\n\t\t\"name\" : \"reservation\",\n\t\t\"rel\" : \"reservation\",\n\t\t\"href\" : \"/fpp/reservations/8754\",\n\t\t\"render\" : \"link\"\n\t}\n\nNote that there is nothing that prevents an item's resource from having one-to-many relationships with other resources of the same type. For example:\n\n\t[\n\t\t{\n\t\t\t\"name\" : \"reservation\",\n\t\t\t\"rel\" : \"reservation\",\n\t\t\t\"href\" : \"/fpp/reservations/8754\",\n\t\t\t\"render\" : \"link\"\n\t\t},\n\t\t{\n\t\t\t\"name\" : \"reservation\",\n\t\t\t\"rel\" : \"reservation\",\n\t\t\t\"href\" : \"/fpp/reservations/6587\",\n\t\t\t\"render\" : \"link\"\n\t\t}\n\t]\n \n\n### Collection Search Templates\n\nIf a collection has a large number of items, the API should offer queries to filter the items it returns. The `queries` attribute contains an array of templates that can be populated to create queries. For example:\n\n\t\"queries\" : [\n\t\t{ \"href\" : \"/fpp/guests/search\",\n\t\t\t\"rel\" : \"search\",\n\t\t\t\"prompt\" : \"Search guests by last name\",\n\t\t\t\"data\" : [ {\"name\" : \"byLastName\", \"value\" : \"\"} ]\n\t\t}\n\t]\n\nor, alternatively,\n\n\t\"queries\" : [\n\t\t{ \"href\" : \"/fpp/guests/search?byLastName={lastName}\",\n\t\t\t\"rel\" : \"search\",\n\t\t}\n\t]\n\nTo search the collection, send a `GET` request with the query's populated template to the `href` attribute, as in:\n\n\tGET /fpp/guests/search?byLastName=Smith HTTP/1.1\n\tHost: api.disney.com\n\n#### Sorting\n\nTo sort the items returned in the collection, pass the `orderBy` parameter in a `GET` with a comma-separated list of the names of the representation fields to be used to sort. For example:\n\n\tGET /fpp/guests/search?orderBye=name,phone HTTP/1.1\n\tHost: api.disney.com\n\n#### Pagination\n\nEven a filtered collection may contain a large number of members that the API may choose not to return to the client. In that case, the API may return a pre-configured number of items in a \"page\" and include a link to the next page in the collection's `links` attribute. For example, in page 2, it may return:\n\n\t\"links\" : [\n\t\t{\n\t\t\t\"name\" : \"next_page\",\n\t\t\t\"prompt\" : \"Next\",\n\t\t\t\"rel\" : \"next\",\n\t\t\t\"href\" : \"/fpp/guests/page/3\",\n\t\t\t\"render\" : \"link\"\n\t\t},\n\t\t{\n\t\t\t\"name\" : \"previous_page\",\n\t\t\t\"prompt\" : \"Back\",\n\t\t\t\"rel\" : \"previous\",\n\t\t\t\"href\" : \"/fpp/guests/page/1\",\n\t\t\t\"render\" : \"link\"\n\t\t}\n\t]\n\nThe `next` link relation (`\"rel\"` attribute) is registered with the [IANA](http://www.iana.org/assignments/link-relations/link-relations.xhtml) to mean “the next in the series.” Following that link retrieves the second page of the collection. The client can then keep following `\"rel\" : \"next\"` links indefinitely, until it reaches the end of the collection.\n\nThere are a number of generic link relations for navigating paginated lists. These include `next`, `previous`, `first`, `last`, and `prev` (which is a synonym for “previous”). These link relations were originally defined for HTML, but now they’re registered with the IANA, so you can be used with any media type.\n\n### Collection Addition Template\n\nSuppose you want to add a new item to a collection. What `HTTP` request should you make? To answer this question, you need to look at the collection’s _write template_ defined in the `template` attribute. Here’s an example of the write template for adding a guest:\n\n\t\"template\": {\n\t\t\"data\": [\n\t\t\t{\"prompt\" : \"Guest name\", \"name\" : \"name\", \"value\" : \"\"},\n\t\t\t{\"prompt\" : \"Guest phone\", \"name\" : \"phone\", \"value\" : \"\"}\n\t\t]\n\t}\n\nor, alternatively,\n\n\t\"template\": {\n\t\t\"data\": [\n\t\t\t{ \"name\" : \"{name}\" },\n\t\t\t{ \"phone\" : \"{phone}\" }\n\t\t]\n\t}\n\n**Important:** Note that the template must contain **all** the required fields that define a guest.\n\nTo create a new resource and add the item to the collection, send a `POST` request with the populated template to the collection's `href` attribute):\n\n\tPOST /fpp/guests HTTP/1.1\n\tHost: api.disney.com\n\tContent-Type: application/vnd.collection+json\n\t{ \"template\" :\n\t\t{ \"data\" : [\n\t\t\t\t{\"prompt\" : \"Guest name\", \"name\" : \"name\", \"value\" : \"Sheri Brown\"},\n\t\t\t\t{\"prompt\" : \"Guest phone\", \"name\" : \"phone\", \"value\" : \"(312)234-6523\"}\n\t\t\t]\n\t\t}\n\t}\n\nor, alternatively,\n\n\tPOST /fpp/guests/8245 HTTP/1.1\n\tHost: api.disney.com\n\tContent-Type: application/vnd.collection+json\n\t{ \"template\" :\n\t\t{ \"data\" : [\n\t\t\t\t{ \"name\" : \"Sheri Brown\" },\n\t\t\t\t{ \"phone\" : \"(312)234-6523\" }\n\t\t\t]\n\t\t}\n\t}\n\n## Protocol Semantics\n\nThe API should support the `HTTP` methods and semantics defined in Collections+JSON and summarized in the following sections.\n\n### GET \n\nSending a `GET` request must return a `application/vnd.collection+json` representation of a resource. `GET` is a safe and idempotent `HTTP` method. It’s just a request for information. Sending a `GET` request to the server should have the same effect on resource state as not sending a `GET` request — that is, no effect at all. Incidental side effects like logging and rate limiting are OK, but a client should never make a GET request hoping that it will change the resource state.\n\n### HEAD\n\n`HEAD` is a safe method, just like `GET`. In fact, it’s best to think of `HEAD` as a lightweight version of `GET`. The API is supposed to treat a `HEAD` request exactly the same as a `GET` request, but it’s not supposed to send an entity-body — only the `HTTP` status code and the headers. Using `HEAD` instead of `GET` may save time, since the API will only have to generate the appropriate HTTP headers. It will also save bandwidth.\n\n### DELETE\n\nSending a `DELETE` request asks the API to remove a destroy and never refer to it again. The API, however, may refuse to destroy the resource if conditions such as sufficient permissions are not satisfied. The API returns the status code `204` (No Content), indicating that it has deleted the resource and has nothing more to say about it except for:\n\n\tHTTP/1.1 204 No Content\n\nThe API may return code `202` if it chooses to delete the resource later.\n\nIf a client tries to `GET` a resource that has been DELETEd, the server will return an error response code, usually `404` (Not Found) or `410` (Gone):\n\n### POST-to-Append\n\nSending a POST request to a collection resource creates a new resource and adds it as its last member. When a client sends a POST-to-append request, it sends a representation of the resource it wants to create in the request’s entity-body. The most common response code to a POST-to-append request is `201` (Created) - It lets the client know that a new resource was created. The `Location` header lets the client know the URL to this new resource. Another common response code is `202` (Accepted), which means that the server intends to create a new resource based on the given representation, but hasn’t actually created it yet.\n\n### PUT\n\nA `PUT` request is a request to modify resource state. The client takes the collection template it got from a `GET` request, populates it, and sends it back as the payload of a `PUT` request. here is an example:\n\n\tPUT /fpp/guests/2183 HTTP/1.1\n\tHost: api.disney.com\n\tContent-Type: application/vnd.collection+json\n\t{ \"template\" :\n\t\t{ \"data\" : [\n\t\t\t\t{ \"name\" : \"Sheri Green\" },\n\t\t\t\t{ \"phone\" : \"(312)234-6523\" }\n\t\t\t]\n\t\t}\n\t}\n\nThe API is free to reject a `PUT` request because the entity-body doesn’t make sense, because the entity-body tries to change a bit of resource state the server considers read-only, or really for any reason at all. If the API decides to accept a `PUT` request, the API changes the resource state to match what the client says in the representation, and usually sends either `200` (OK) or `204` (No Content).\n\n### LINK and UNLINK\n\nThe `LINK` method creates a link between two resources. Presumably, when resource A is linked to resource B, a hypermedia link to B will start showing up in the representations of A, standalone or in an item in a collection. But how is the link actually created? Sending a `LINK` request to the URL of resource A mentioning the URL of resource B in the `Link` header. For example:\n\n\tLINK /fpp/guests/8245 HTTP/1.1\n\tHost: api.disney.com\n\tLink: http://api.disney.com/fpp/reservations/8754;rel=reservation\n\nConversely, you can use the `UNLINK` method to remove a link between two resources:\n\n\tUNLINK /fpp/guests/8245 HTTP/1.1\n\tHost: api.disney.com\n\tLink: http://api.disney.com/fpp/reservations/8754;rel=reservation\n\n# References \n\n[Collection+JSON - Hypermedia Type](http://amundsen.com/media-types/collection/)\n\n[HTTP Status Codes](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html)","html":"<h1 id=\"staticserverstackfaq\">Static Server Stack FAQ</h1>\n\n<blockquote>\n  <p>The RA recommends node.js with express for a static server</p>\n</blockquote>\n\n<h2 id=\"whatisastaticserverintheracontext\">What is a static server in the RA context?</h2>\n\n<p>We use a configuration that uses two (2) web servers, we use a node/ and restify server to serve API's (typically JSON data) and we use another web server to serve static assets (.js, .css, .html and media). More details here <a href=\"web-api-faq.md\">Web API FAQ</a></p>\n\n<h2 id=\"sowhatwebserversarewelookingatforthestaticserver\">So what web servers are we looking at for the static server?</h2>\n\n<ul>\n<li><a href=\"http://nodejs.org\">node.js</a> with [Express] (<a href=\"http://expressjs.com\">http://expressjs.com</a>)</li>\n<li><a href=\"http://nginx.org/en/\">nginx</a></li>\n<li><a href=\"http://httpd.apache.org\">Apache</a></li>\n</ul>\n\n<h2 id=\"whatisthecriteriaforchoosingone\">What is the criteria for choosing one?</h2>\n\n<ul>\n<li>Performance</li>\n<li>Scalability</li>\n<li>Stability</li>\n<li>Ease of configuration and extension</li>\n</ul>\n\n<p>For your interest here is a list of articles comparing these products on performance and scalability, these favor node.</p>\n\n<ul>\n<li><a href=\"http://centminmod.com/siegebenchmarks/2013/020313/index.html\">node vs nginx</a></li>\n</ul>\n\n<p>Of course dependent on task and configuration you can find benchmarks and advice favoring nginx or even  <a href=\"http://www.lighttpd.net\">lighttpd</a>.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>We recommend that node.js and express be used for the static component of the server stack.</p>\n\n<h2 id=\"whywechosetorecommendnodejsandexpressforourstaticserver\">Why we chose to recommend node.js and express for our static server</h2>\n\n<p>We found that the possible performance and stability enhancements of using nginx or lighttpd was in our case trumped by the ease of extension and programmability of using node.js and Express. We rely on grunt and yeoman for our deployment and generator tasks and we wouldn't be able to reconfigure our servers as easily and efficiently as we can with node.js with any of the other candidates. <br />\nWe also found that adding middleware for security, http headers, exception handling and other custom features suited our architectural needs at the current level of maturity we are currently at.</p>\n\n<h2 id=\"factorssupportingthisconclusion\">Factors supporting this conclusion</h2>\n\n<p>At the load required to make a measurable speed difference between each of these 3 (Express, nginx and lighttpd) it becomes a very moot point which to chose from a performance perspective. <br />\nApache lags in the performance stakes because it uses multi-threaded IO and that thread management slows it down. For light loads it is a little inflexible and slow, for a steady number of requestors it is very very stable and performs adequately, unfortunately that is not the use case we are choosing a static web server for.</p>\n\n<p>To see any meaningful difference between these 3 servers we need a load  (depending on server size) between 1000 and 4000 concurrent requests. That would be a wonderful place to be in for our public facing web sites, and remember this doesn't even include clustering, we are nowhere near that level of load. So maybe performance is not the differentiator we thought it was, so how about stability?</p>\n\n<h2 id=\"stability\">Stability?</h2>\n\n<p>Whew! How many opinions do you want? If all you had was a web server with no monitoring or clustering then go Apache it is well known to be pretty bullet proof but... we do use monitoring etc etc and we can spin up servers very quickly and bring them down very quickly too.</p>\n\n<p>Does it matter, really? I guess so; lots of people have a lot of things to say about it. A lightweight server is easier to maintain and deploy. And you can extend it very easily.</p>\n\n<p>The knock on node.js and express is that it runs on a LVM (language VM) so it can't be as stable as nginx which is finely crafted c++; you will go a long way to find a server that doesn't run in a VM of some kind, it might not be a LVM but it is still a VM.</p>\n\n<p>There might be a sliver of truth that node can be less stable but bad code can exist on any server.</p>\n\n<h1 id=\"easeofconfigurationandextension\">Ease of configuration and extension</h1>\n\n<p>No contest node.js rules this area. Because you build the server yourself you can extend it to do anything you want.</p>\n\n<h1 id=\"webapiandnodejsfaq\">Web API and Node.js FAQ</h1>\n\n<h2 id=\"whatisthewebapi\">What is the Web API?</h2>\n\n<p>The web api is the server side part of the mobile or SPA application.</p>\n\n<h2 id=\"whatisit\">What is it?</h2>\n\n<p>It is a Node.js application.</p>\n\n<h2 id=\"whynodejs\">Why Node.js?</h2>\n\n<ol>\n<li><strong>API Designed for a UI</strong> - Building a web server and its API's in javascript is a huge win because it means a client developer can tweak his API to suit his application perfectly. Effectively, the Web API is an extension of the UI.  </li>\n<li><strong>Super-fast IO</strong> - Node.js uses (wherever possible) asynchronous IO, hence it is optimized for throughput and concurrency. It is super fast for lightweight Web API apps that serve predominantly JSON documents.  </li>\n<li><strong>Developer Productivity</strong> - Developers are very productive because they can take advantage of JavaScript on both the client and the server without swtiching context.  </li>\n<li><strong>Large Plug-in Ecosystem</strong> - There is a huge ecosystem of Node.js modules and middleware in npm (node package manager) ecosystem, with many stable packages used by large corporations.</li>\n</ol>\n\n<p>We found upwards of 67% performance throughput increase comparing our POC to the current stage environment; what was even more impressive was that our servers were tiny compared to the stage environment.</p>\n\n<h2 id=\"howisitconfigured\">How is it configured?</h2>\n\n<p>There are 2 node web servers in the RA guidance, these are named static and API. They are typically packaged in the same node application serving different ports for a single client application. For example, a static server running node.js and express to server static assets and a Web API server running node.js and restify.</p>\n\n<h2 id=\"why2servers\">Why 2 servers?</h2>\n\n<h3 id=\"static\">static</h3>\n\n<p>A static web server serves static content i.e. js, css, html and media assets. This type of web server is usually optimized differently than an API server i.e. for cache busting etc. For our static server we are currently using node and the Express package. Learn more about the static server here at <a href=\"server-stack-faq.md\">Server Stack FAQ</a>.</p>\n\n<h3 id=\"api\">API</h3>\n\n<p>An API server provides the following services</p>\n\n<ul>\n<li>Orchestration</li>\n<li>Data mapping</li>\n<li>Aggregation</li>\n<li>Transport handling (i.e. access to XML, JSON and other backend services)</li>\n<li>REST</li>\n<li>Plugins for standard RA building blocks like Logasaurus, Timer and ALRM</li>\n<li>Logging, errors and diagnostics</li>\n</ul>\n\n<p>We are currently using node and <a href=\"http://mcavage.me/node-restify/\">Restify</a> for the api server. Here are our thoughts on <a href=\"serving-apis.md\">what framework to use</a>.</p>\n\n<p><a name=\"orchestration\"></a>  </p>\n\n<h2 id=\"whatisorchestration\">What is Orchestration?</h2>\n\n<p>All orchestration does is allow a development team to call multiple back-end services asynchronously and map the resulting data as required for the client. The Web API must also provide PUT and POST endpoints for clients.</p>\n\n<h3 id=\"whataboutassemblingdatafortheviews\">What about assembling data for the Views?</h3>\n\n<p>One of the roles of orchestration is to assemble the data for the Views in the UI. This is often beneficial when there are several back end services that provide data that a View needs. This data needs to be assembled for the Views. Let's explore how this would work if it were to be done in the backend in Java or .NET, in the Web API layer in Node.js, or in the client browser.</p>\n\n<h4 id=\"browserassemblyleastefficientandnotrecommended\">Browser assembly - Least efficient and not recommended</h4>\n\n<p>If the browser has to assemble the data for the Views this would require numerous HTTP requests, a lot more data coming to the client than is needed, and additional processing on the browser to assemble the data. This is not a logical location for assembly due to these factors.</p>\n\n<h4 id=\"webapilayerrecommended\">Web API Layer - Recommended</h4>\n\n<p>The Node.js Web API layer is closer to tha back end services that have the View specific data and can make the HTTP requests faster. It also has a faster pipeline to the back end services to get quick responses. Node.js can assemble data quickly in the JSON format. This layer also provides the browser the exact format and smallest payload in a single request, making it much more efficient for the browser. This is an ideal location for assembly when the data is already in JSON format.</p>\n\n<p>Another option is to create a .NET or Java assembly layer that sits between the back end services and the Node.js Web API layer that aggregates and assembles the View specific data. This might be most efficent if there is heavy transformation of data formats (i.e. SOAP/XML/RPC to JSON).</p>\n\n<h4 id=\"backendserviceslayer\">Back-End Services Layer</h4>\n\n<p>The Java or .NET back end services layer can also assemble the data for the Views. Often these services serve many clients and cannot be tailored for specific clients.</p>\n\n<h2 id=\"rest\">REST</h2>\n\n<p>We recommend using a separate routes folder in your applications.  We also encourage people to use HTTP correctly with the correct codes and verbs. <a href=\"webapi-design-guidelines.md\">Here are our guidelines for REST</a></p>\n\n<h2 id=\"datamapping\">Data Mapping</h2>\n\n<p>We have tooling available to use template based JSON mapping services to transform your JSON documents from humdrum to awesome.</p>\n\n<h2 id=\"asynchronouspromiselibrariesforthewebapi\">Asynchronous &amp; Promise Libraries for the web api</h2>\n\n<p>We recommend you use <a href=\"https://www.npmjs.org/package/bluebird\">Bluebird</a> for Node.js. We have used async.js, q.js and fibers in our own projects and in the POC however we believe Bluebird shows the most promise and encourage standardizing on that. Here is our own <a href=\"./UI%20RA%20Async%20Promises%20PoV.md\">Promises</a> research</p>\n\n<h2 id=\"logginganderrorhandling\">Logging and error handling</h2>\n\n<p>We have created a simple logging package called  <a href=\"https://github.disney.com/WDPR-RA-UI/wdpr-node-logasaurus\">wdpr-node-logasaurus</a>. Logasaurus is packaged as part of the <a href=\"https://github.disney.com/WDPR-RA-UI/wdpr-node-alrm\">wdpr-node-alrm</a> (Alerting, Logging, Reporting and Monitoring) package however you can require it on it's own. We use  <a href=\"https://github.com/trentm/node-bunyan\">bunyan</a> as our logger npm package.</p>\n\n<p>Error handling will be an integral part of the Web API, this will take care of reporting and gracefully handling any exceptions you may get. We've got client side synchronous &amp; asynchronous error handling caught, logged to the client, and to the server (in Node.js). Using RA tooling, you'll know when and where you have errors, anywhere in the stack.</p>\n\n<h2 id=\"whatsortofcodelivesinthewebapi\">What sort of code lives in the web api?</h2>\n\n<p>We want to keep the node layer lightweight and zippy. If you find yourself writing business logic and complicated workflows in the node layer that is the wrong place, please cease and desist. That sort of stuff should be moved down into either the presentation services (java or .NET) layer or the backend services layer. Here is our guidance on [that subject] <br />\n(./prescriptions/arch-layers.md)</p>\n\n<h2 id=\"caching\">Caching</h2>\n\n<p>Caching should be used sparingly and in the appropriate layer. For example, the browser can cache non volatile HTTP responses and other non PII data, with expirations. Often in a browser based model the User stays on the client and thus does not need to go back to the server to go from page to page, which reduces the need to cache on the server for client data.</p>\n\n<h2 id=\"session\">Session</h2>\n\n<p>The Single Page Application (SPA) and browser based architecture helps keep the User on the client browser. The server page driven architectures (i.e. ASP.NET, Spring, JSP, PHP) make  round trips between each View where it then is helpful to maintain session based data accessible to the Web Server. With a SPA model the user makes less round trips and stays on the client between View changes, thus reducing the helpfulness of Session state on the Web Server.</p>\n\n<p>When moving from SPA to SPA non PII state can be transferred using QueryString parameters, Cookies, Local Storage, headers, or tokens. Sensitive state data should be saved to a persistant store (i.e. shopping cart) accessible via services.</p>\n\n<p>User security tokens can be stored in a secure and http-only cookie.</p>\n\n<p>User profile data should be accessed via a Web API service and returned to the browser and then stored in memory.</p>\n\n<h1 id=\"webapidesignguidelines\">Web API Design Guidelines</h1>\n\n<p>Guidelines to design the interface of a specialized RESTful Web API to serve client applications, including single-page Web applications and mobile applications.</p>\n\n<p>Creating modern user interfaces for existing business systems is challenging because these systems typically expose services that do not meet the needs of UI clients and are time-consuming and costly to adapt. Furthermore, while user interfaces are expected to be responsive and serve multiple form factors, each needs different data subsets that existing systems may expose in fragments which need to be aggregated, transformed, reformatted, and enriched. </p>\n\n<p>The solution to this problem is to insert an intermediate API between UI clients and business services that:</p>\n\n<ul>\n<li>is easy to implement and modify by the UI developer</li>\n<li>has facilities to orchestrate services and transform, aggregate, and enrich data</li>\n<li>has a variety of connectors to existing interface protocols</li>\n<li>is lightweight</li>\n<li>has an event-driven architecture</li>\n</ul>\n\n<p>The API acts as a facade and mediator to:</p>\n\n<ul>\n<li>simplify complex and disparate interfaces</li>\n<li>facilitate consuming business services without re-architecting</li>\n<li>reduce dependencies of the client on the inner workings of back-end systems, thus allowing more flexibility on the independent evolution of clients and back-end systems</li>\n<li>front a possibly poorly designed existing collection of APIs with a single, well-designed API</li>\n<li>improve performance by caching back-end responses</li>\n</ul>\n\n<p>This document provides the guidelines that the Reference Architecture team recommends to design mediation APIs. Separate documents will provide guidelines to implement the Web API.</p>\n\n<h2 id=\"resourcesandrepresentations\">Resources and Representations</h2>\n\n<p>The API is a RESTful Web API. REST stands for <a href=\"http://en.wikipedia.org/wiki/Representational_state_transfer\">Representational State Transfer</a>. In a RESTful API, the client keeps application state, but the server enables its manipulation by sending representations that describe the possible state transitions. The server keeps resource state, but the client can manipulate it by sending the server a representation describing the desired new state of a resource.</p>\n\n<p>Web API representations should have the structure that UI clients present to users, not necessarily the structure presented by the back-end business services.</p>\n\n<h2 id=\"urldesign\">URL Design</h2>\n\n<p>A resource URL must identify a resource representing a single domain entity and have the form:</p>\n\n<pre><code>http://host/&lt;context&gt;/&lt;semver&gt;/&lt;resource&gt;/&lt;id&gt;  \n</code></pre>\n\n<p>where,</p>\n\n<ul>\n<li><code>&lt;context&gt;</code> is the API application context, typically the name of the UI application, i.e., \"fpp\"</li>\n<li><code>&lt;semver&gt;</code> is a <a href=\"http://semver.org/\">semantic version number</a>, i.e., \"0.1.1\"</li>\n<li><code>&lt;resource&gt;</code> is a plural noun that denotes a resource class, i.e., \"guests\"</li>\n<li><code>&lt;id&gt;</code> unique identifier of a resource</li>\n</ul>\n\n<p>for example:</p>\n\n<pre><code>http://api.disney.com/fpp/0.1.1/guests/12345  \n</code></pre>\n\n<h2 id=\"representationformat\">Representation Format</h2>\n\n<p>The collection pattern shows over and over in many different domains. <br />\nA collection is a special kind of resource. It exists mainly to group other <br />\nresources together. Its representation focuses on links to other resources, though it may also include snippets from the representations of those other linked resources.</p>\n\n<p>An individual resource whose representation is contained within a collection is called an <em>item</em> or <em>member</em> of the collection. However, each item has its own URL and independent existence outside of the collection. When we talk about an “item” or a “member,” we’re talking about a standalone resource that happens to be linked from a collection’s representation.</p>\n\n<p><em>Collection+JSON</em> is a JSON-based read/write hypermedia-type designed to support management and querying of simple collections. Collection+JSON defines both the format and the semantics in a single media type. It also includes support for Query Templates and expanded write support through the use of a Write Template. We therefore recommend that the Web API implement the collections pattern using a variation of this media type. The Web API should then serve collections of representations with the <code>application/vnd.collection+json</code> VND. Here is an example:</p>\n\n<pre><code>{ \"collection\":\n    {\n        \"version\" : \"1.0\",\n        \"href\" : \"http://api.disney.com/fpp/guests/\",\n        \"representations\" : [\"basic\", \"partial\", \"full\"],\n        \"items\" : [\n            { \"href\" : \"/fpp/guests/1234\",\n                \"data\" : [\n                    { \"name\" : \"name\", \"value\" : \"John Doe\" },\n                    { \"name\" : \"phone\", \"value\" : \"(727)345-6587\" }\n                ],\n                \"links\" : []\n            },\n            { \"href\" : \"/fpp/guests/4567\",\n                \"data\" : [\n                    { \"name\" : \"name\", \"value\" : \"Jane Smith\" },\n                    { \"name\" : \"phone\", \"value\" : \"(813)123-8709\" }\n                ],\n                \"links\" : []\n            }           \n        ],\n        \"links\" : [\n            {\"href\" : \"/logo.png\", \"rel\" : \"icon\", \"render\" : \"image\"}\n        ],\n        \"queries\" : [\n            { \"href\" : \"/fpp/guests/search\",\n                \"rel\" : \"search\",\n                \"prompt\" : \"Search guests by last name\",\n                \"data\" : [ {\"name\" : \"byLastName\", \"value\" : \"\"} ]\n            }\n        ],\n        \"template\" : {\n            \"data\" : [\n                {\"prompt\" : \"Guest name\", \"name\" : \"name\", \"value\" : \"\"},\n                {\"prompt\" : \"Guest phone\", \"name\" : \"phone\", \"value\" : \"\"}\n            ]\n        }\n    }\n}\n</code></pre>\n\n<p>where,</p>\n\n<ul>\n<li><code>href : \"http://api.disney.com/fpp/guests/\"</code> is a permanent link to the collection itself</li>\n<li><code>items</code> is an array of links to the members of the collection and partial representations of them</li>\n<li><code>links</code> is an array of links to other resources related to the collection</li>\n<li><code>queries</code> is an array of Hypermedia controls for searching the collection</li>\n<li><code>template</code> is a Hypermedia control to add items to the collection</li>\n</ul>\n\n<h3 id=\"itemrepresentations\">Item Representations</h3>\n\n<p>Let's focus on an item in the <code>items</code> array. Consider this example:</p>\n\n<pre><code>{ \"href\" : \"/fpp/guests/1234\",\n    \"data\" : [\n        { \"name\" : \"name\", \"value\" : \"John Doe\" },\n        { \"name\" : \"phone\", \"value\" : \"(727)345-6587\" }\n    ],\n    \"links\" : []\n},\n</code></pre>\n\n<p>where,</p>\n\n<ul>\n<li><code>href</code> is a permanent link to the item's standalone resource</li>\n<li><code>links</code> is an array of links to other resources related to the item</li>\n<li><code>data</code> is a partial representation of the standalone resource</li>\n</ul>\n\n<p>Alternatively, we can have a terser, more readable non-generic representation:</p>\n\n<pre><code>{ \"href\" : \"/fpp/guests/1234\",\n    \"data\" : [\n        { \"name\" : \"John Doe\" },\n        { \"phone\" : \"(727)345-6587\" }\n    ],\n    \"links\" : []\n},\n</code></pre>\n\n<h3 id=\"anitemspermanentlink\">An Item's Permanent Link</h3>\n\n<p>A member’s <code>href</code> attribute is a link to the resource outside the context of its collection. Invoking a GET on that link, the API will respond with a Collection+JSON representation of a single item. For example:</p>\n\n<pre><code>{ \"collection\":\n    {\n        \"version\" : \"1.0\",\n        \"href\" : \"http://api.disney.com/fpp/guests/\",\n        \"items\" : [\n            { \"href\" : \"/fpp/guests/1234\",\n                \"data\" : [\n                    { \"name\" : \"name\", \"value\" : \"John Doe\" },\n                    { \"name\" : \"phone\", \"value\" : \"(727)345-6587\" }\n                ],\n                \"links\" : []\n            }\n        ]\n    }\n}\n</code></pre>\n\n<p>Or, alternatively,</p>\n\n<pre><code>{ \"collection\":\n    {\n        \"version\" : \"1.0\",\n        \"href\" : \"http://api.disney.com/fpp/guests/\",\n        \"items\" : [\n            { \"href\" : \"/fpp/guests/1234\",\n                \"data\" : [\n                    { \"name\" : \"John Doe\" },\n                    { \"phone\" : \"(727)345-6587\" }\n                ],\n                \"links\" : []\n            }\n        ]\n    }\n}\n</code></pre>\n\n<p>As further explained below, you may be able to modify an item with a <code>HTTP PUT</code> to its permanent link, or delete it with a <code>HTTP DELETE</code> to its permanent link.</p>\n\n<h3 id=\"anitemsdataandrepresentation\">An Item's Data and Representation</h3>\n\n<p>An item's <code>data</code> attribute contains a partial representation of the resource. The API will offer a set of named representations available to the client in an array in the <code>representations</code> attribute. The first representation in the array is the default. If the client desires another representation, it must include the <code>representation</code> parameter in a <code>GET</code> request. For example:</p>\n\n<pre><code>GET /fpp/guests/search?byLastName=Smith&amp;representation=full HTTP/1.1\nHost: api.disney.com\n</code></pre>\n\n<h3 id=\"anitemslinks\">An Item's Links</h3>\n\n<p>An item's <code>href</code> attribute contains a relative link to the item's standalone resource:</p>\n\n<p><code>\"href\" : \"/fpp/guests/1234\"</code></p>\n\n<p>An item's representation may also contain an array of links to other resources related to the item's resource in the <code>links</code> attribute. Here is an example of this type of link:</p>\n\n<pre><code>{\n    \"name\" : \"reservation\",\n    \"rel\" : \"reservation\",\n    \"href\" : \"/fpp/reservations/8754\",\n    \"render\" : \"link\"\n}\n</code></pre>\n\n<p>Note that there is nothing that prevents an item's resource from having one-to-many relationships with other resources of the same type. For example:</p>\n\n<pre><code>[\n    {\n        \"name\" : \"reservation\",\n        \"rel\" : \"reservation\",\n        \"href\" : \"/fpp/reservations/8754\",\n        \"render\" : \"link\"\n    },\n    {\n        \"name\" : \"reservation\",\n        \"rel\" : \"reservation\",\n        \"href\" : \"/fpp/reservations/6587\",\n        \"render\" : \"link\"\n    }\n]\n</code></pre>\n\n<h3 id=\"collectionsearchtemplates\">Collection Search Templates</h3>\n\n<p>If a collection has a large number of items, the API should offer queries to filter the items it returns. The <code>queries</code> attribute contains an array of templates that can be populated to create queries. For example:</p>\n\n<pre><code>\"queries\" : [\n    { \"href\" : \"/fpp/guests/search\",\n        \"rel\" : \"search\",\n        \"prompt\" : \"Search guests by last name\",\n        \"data\" : [ {\"name\" : \"byLastName\", \"value\" : \"\"} ]\n    }\n]\n</code></pre>\n\n<p>or, alternatively,</p>\n\n<pre><code>\"queries\" : [\n    { \"href\" : \"/fpp/guests/search?byLastName={lastName}\",\n        \"rel\" : \"search\",\n    }\n]\n</code></pre>\n\n<p>To search the collection, send a <code>GET</code> request with the query's populated template to the <code>href</code> attribute, as in:</p>\n\n<pre><code>GET /fpp/guests/search?byLastName=Smith HTTP/1.1\nHost: api.disney.com\n</code></pre>\n\n<h4 id=\"sorting\">Sorting</h4>\n\n<p>To sort the items returned in the collection, pass the <code>orderBy</code> parameter in a <code>GET</code> with a comma-separated list of the names of the representation fields to be used to sort. For example:</p>\n\n<pre><code>GET /fpp/guests/search?orderBye=name,phone HTTP/1.1\nHost: api.disney.com\n</code></pre>\n\n<h4 id=\"pagination\">Pagination</h4>\n\n<p>Even a filtered collection may contain a large number of members that the API may choose not to return to the client. In that case, the API may return a pre-configured number of items in a \"page\" and include a link to the next page in the collection's <code>links</code> attribute. For example, in page 2, it may return:</p>\n\n<pre><code>\"links\" : [\n    {\n        \"name\" : \"next_page\",\n        \"prompt\" : \"Next\",\n        \"rel\" : \"next\",\n        \"href\" : \"/fpp/guests/page/3\",\n        \"render\" : \"link\"\n    },\n    {\n        \"name\" : \"previous_page\",\n        \"prompt\" : \"Back\",\n        \"rel\" : \"previous\",\n        \"href\" : \"/fpp/guests/page/1\",\n        \"render\" : \"link\"\n    }\n]\n</code></pre>\n\n<p>The <code>next</code> link relation (<code>\"rel\"</code> attribute) is registered with the <a href=\"http://www.iana.org/assignments/link-relations/link-relations.xhtml\">IANA</a> to mean “the next in the series.” Following that link retrieves the second page of the collection. The client can then keep following <code>\"rel\" : \"next\"</code> links indefinitely, until it reaches the end of the collection.</p>\n\n<p>There are a number of generic link relations for navigating paginated lists. These include <code>next</code>, <code>previous</code>, <code>first</code>, <code>last</code>, and <code>prev</code> (which is a synonym for “previous”). These link relations were originally defined for HTML, but now they’re registered with the IANA, so you can be used with any media type.</p>\n\n<h3 id=\"collectionadditiontemplate\">Collection Addition Template</h3>\n\n<p>Suppose you want to add a new item to a collection. What <code>HTTP</code> request should you make? To answer this question, you need to look at the collection’s <em>write template</em> defined in the <code>template</code> attribute. Here’s an example of the write template for adding a guest:</p>\n\n<pre><code>\"template\": {\n    \"data\": [\n        {\"prompt\" : \"Guest name\", \"name\" : \"name\", \"value\" : \"\"},\n        {\"prompt\" : \"Guest phone\", \"name\" : \"phone\", \"value\" : \"\"}\n    ]\n}\n</code></pre>\n\n<p>or, alternatively,</p>\n\n<pre><code>\"template\": {\n    \"data\": [\n        { \"name\" : \"{name}\" },\n        { \"phone\" : \"{phone}\" }\n    ]\n}\n</code></pre>\n\n<p><strong>Important:</strong> Note that the template must contain <strong>all</strong> the required fields that define a guest.</p>\n\n<p>To create a new resource and add the item to the collection, send a <code>POST</code> request with the populated template to the collection's <code>href</code> attribute):</p>\n\n<pre><code>POST /fpp/guests HTTP/1.1\nHost: api.disney.com\nContent-Type: application/vnd.collection+json\n{ \"template\" :\n    { \"data\" : [\n            {\"prompt\" : \"Guest name\", \"name\" : \"name\", \"value\" : \"Sheri Brown\"},\n            {\"prompt\" : \"Guest phone\", \"name\" : \"phone\", \"value\" : \"(312)234-6523\"}\n        ]\n    }\n}\n</code></pre>\n\n<p>or, alternatively,</p>\n\n<pre><code>POST /fpp/guests/8245 HTTP/1.1\nHost: api.disney.com\nContent-Type: application/vnd.collection+json\n{ \"template\" :\n    { \"data\" : [\n            { \"name\" : \"Sheri Brown\" },\n            { \"phone\" : \"(312)234-6523\" }\n        ]\n    }\n}\n</code></pre>\n\n<h2 id=\"protocolsemantics\">Protocol Semantics</h2>\n\n<p>The API should support the <code>HTTP</code> methods and semantics defined in Collections+JSON and summarized in the following sections.</p>\n\n<h3 id=\"get\">GET</h3>\n\n<p>Sending a <code>GET</code> request must return a <code>application/vnd.collection+json</code> representation of a resource. <code>GET</code> is a safe and idempotent <code>HTTP</code> method. It’s just a request for information. Sending a <code>GET</code> request to the server should have the same effect on resource state as not sending a <code>GET</code> request — that is, no effect at all. Incidental side effects like logging and rate limiting are OK, but a client should never make a GET request hoping that it will change the resource state.</p>\n\n<h3 id=\"head\">HEAD</h3>\n\n<p><code>HEAD</code> is a safe method, just like <code>GET</code>. In fact, it’s best to think of <code>HEAD</code> as a lightweight version of <code>GET</code>. The API is supposed to treat a <code>HEAD</code> request exactly the same as a <code>GET</code> request, but it’s not supposed to send an entity-body — only the <code>HTTP</code> status code and the headers. Using <code>HEAD</code> instead of <code>GET</code> may save time, since the API will only have to generate the appropriate HTTP headers. It will also save bandwidth.</p>\n\n<h3 id=\"delete\">DELETE</h3>\n\n<p>Sending a <code>DELETE</code> request asks the API to remove a destroy and never refer to it again. The API, however, may refuse to destroy the resource if conditions such as sufficient permissions are not satisfied. The API returns the status code <code>204</code> (No Content), indicating that it has deleted the resource and has nothing more to say about it except for:</p>\n\n<pre><code>HTTP/1.1 204 No Content\n</code></pre>\n\n<p>The API may return code <code>202</code> if it chooses to delete the resource later.</p>\n\n<p>If a client tries to <code>GET</code> a resource that has been DELETEd, the server will return an error response code, usually <code>404</code> (Not Found) or <code>410</code> (Gone):</p>\n\n<h3 id=\"posttoappend\">POST-to-Append</h3>\n\n<p>Sending a POST request to a collection resource creates a new resource and adds it as its last member. When a client sends a POST-to-append request, it sends a representation of the resource it wants to create in the request’s entity-body. The most common response code to a POST-to-append request is <code>201</code> (Created) - It lets the client know that a new resource was created. The <code>Location</code> header lets the client know the URL to this new resource. Another common response code is <code>202</code> (Accepted), which means that the server intends to create a new resource based on the given representation, but hasn’t actually created it yet.</p>\n\n<h3 id=\"put\">PUT</h3>\n\n<p>A <code>PUT</code> request is a request to modify resource state. The client takes the collection template it got from a <code>GET</code> request, populates it, and sends it back as the payload of a <code>PUT</code> request. here is an example:</p>\n\n<pre><code>PUT /fpp/guests/2183 HTTP/1.1\nHost: api.disney.com\nContent-Type: application/vnd.collection+json\n{ \"template\" :\n    { \"data\" : [\n            { \"name\" : \"Sheri Green\" },\n            { \"phone\" : \"(312)234-6523\" }\n        ]\n    }\n}\n</code></pre>\n\n<p>The API is free to reject a <code>PUT</code> request because the entity-body doesn’t make sense, because the entity-body tries to change a bit of resource state the server considers read-only, or really for any reason at all. If the API decides to accept a <code>PUT</code> request, the API changes the resource state to match what the client says in the representation, and usually sends either <code>200</code> (OK) or <code>204</code> (No Content).</p>\n\n<h3 id=\"linkandunlink\">LINK and UNLINK</h3>\n\n<p>The <code>LINK</code> method creates a link between two resources. Presumably, when resource A is linked to resource B, a hypermedia link to B will start showing up in the representations of A, standalone or in an item in a collection. But how is the link actually created? Sending a <code>LINK</code> request to the URL of resource A mentioning the URL of resource B in the <code>Link</code> header. For example:</p>\n\n<pre><code>LINK /fpp/guests/8245 HTTP/1.1\nHost: api.disney.com\nLink: http://api.disney.com/fpp/reservations/8754;rel=reservation\n</code></pre>\n\n<p>Conversely, you can use the <code>UNLINK</code> method to remove a link between two resources:</p>\n\n<pre><code>UNLINK /fpp/guests/8245 HTTP/1.1\nHost: api.disney.com\nLink: http://api.disney.com/fpp/reservations/8754;rel=reservation\n</code></pre>\n\n<h1 id=\"references\">References</h1>\n\n<p><a href=\"http://amundsen.com/media-types/collection/\">Collection+JSON - Hypermedia Type</a></p>\n\n<p><a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html\">HTTP Status Codes</a></p>","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1460053673034,"created_by":1,"updated_at":1460053904359,"updated_by":1,"published_at":null,"published_by":null},{"id":68,"uuid":"4103c4ec-e71a-4ea6-89c2-edcfed2f1304","title":"Kestrel as a Static Server for Angular","slug":"kestrel-as-a-static-server-for-angular","markdown":"Available on github : https://github.com/spboyer/ng2-kestrel-appserver\n\nSelecting the server architecture may or may not be a pivotal point in your application design...but it maybe it should.\n\nMicro-services, SOA, 12 Factor, ZDD and all of the other buzzwords do in fact have merit, getting away from the monolith application and \"putting all of you eggs in one basket\" server apps are a think of the past. Right?\n\nThe core message here is \"do one thing and do it well\". So why would you couple your dynamic and static content into a single application? \n\nStatic content doesn't change (often), scaling needs aren't 1:1 with the web api layers. However, there are some needs that the simple use of a CDN (Content Delivery Network) like cloudfare or Akamai just won't solve.\n\n1. Caching\n1. Compression\n1. Deep Linking\n1. SEO \n1. Internationalization (i18n)\n1. Custom Routing\n\nThis is where using nginx or node.js w/Express fits the bill.\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">What web server do you use for angular in production? <a href=\"https://twitter.com/hashtag/angular?src=hash\">#angular</a> <a href=\"https://twitter.com/angularjs\">@angularjs</a></p>&mdash; Shayne Boyer (@spboyer) <a href=\"https://twitter.com/spboyer/status/719667199091335170\">April 11, 2016</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n##nginx vs. node.js\n**nginx** is a very popular server, provides capabilities beyond web server functions such as comparable features to ha-proxy.  However, in the event you need to write custom modules, extend or support; C or C++ is the language of choice.\n\n**node.js**, with Express performs very well, scales and would be hard to argue its uptake in the tech world for use in this case. Another large benefit with node.js is that it's JavaScript, offers a large and ever growing community for middleware to fit the needs mentioned above as well as any business specific module you would need to write.\n\n##Using node.js\n\nUsing Express with node.js, a static web server is pretty simple to put together.\n\ngist: https://gist.github.com/spboyer/1aa7ac47bf0631a30d9eafd7b1af1186\n\n```javascript\nvar express = require('express'),\n    path = require('path'),\n    fs = require('fs');\n\nvar app = express();\nvar staticRoot = __dirname + '/';\napp.set('port', (process.env.PORT || 3000));\napp.use(express.static(staticRoot));\n\napp.use(function(req, res, next){\n    // if the request is not html then move along\n    var accept = req.accepts('html', 'json', 'xml');\n    if(accept !== 'html'){\n        return next();\n    }\n\n    // if the request has a '.' assume that it's for a file, move along\n    var ext = path.extname(req.path);\n    if (ext !== ''){\n        return next();\n    }\n    fs.createReadStream(staticRoot + 'index.html').pipe(res);\n});\n\napp.listen(app.get('port'), function() {\n    console.log('app running on port', app.get('port'));\n});\n```\n\nPretty straight forward:\n\n* index.html is the default file\n* if the request has a '.', assume it's a file and try to serve it\n* if the request has an 'accept' header of html, xml, or json serve it.\n* otherwise assume its a route in the SPA and send it along to Angular.\n\nThis example doesn't have compression (gzip) included but we could easily add it with a middleware component.\n\n```\nvar compression = require('compression');\napp.use(compression())\n```\n\nA easy solution, couple lines and done. A big benefit and there are a ton of middleware components available - http://expressjs.com/en/resources/middleware.html\n\n##Using Kestrel\nSo if node is fitting the bill, why would we want to use Kestrel? First, it's 6x faster than node.js for static / plain text operations - https://github.com/aspnet/benchmarks#plain-text-with-http-pipelining. Second, node.js is great at a number of things:\n\n* JavaScript on the server - good because the UI is a large front end language too allowing for re-use on both sides of the app\n* Fast I/O - asynchronous IO, optimized for throughput and concurrency. \n* Large Community - this helps for the middleware plug in parts and leveraging the ecosystem\n\nHowever, application needs like database connectivity, message queue, heavy business logic/processing is not what node.js is made for and where .NET and Java comes in to serve these needs.\n\nASP.NET core brings the best of what node.js offers and what .NET has always been good at (heavy processing) but at lightspeed. \n\n###kestrel static server example\n\n*This is written using the RC2 bits, and the dotnet cli. Install the dotnet-cli & SDK from https://github.com/dotnet/cli#installers-and-binaries .*\n\n** Startup.cs **\n\n```csharp\n       public Startup(IHostingEnvironment env)\n        {\n            // Set up configuration sources.\n            var builder = new ConfigurationBuilder()\n                .SetBasePath(env.ContentRootPath)\n                .AddJsonFile(\"appsettings.json\")\n                .AddEnvironmentVariables();\n            Configuration = builder.Build();\n        }\n\n        // This method gets called by the runtime. Use this method to add services to the container.\n        // For more information on how to configure your application, visit http://go.microsoft.com/fwlink/?LinkID=398940\n        public void ConfigureServices(IServiceCollection services)\n        {\n            // Map the #SpaSettings section to the <see cref=SpaSettings /> class\n            services.Configure<SpaSettings>(Configuration.GetSection(\"SpaSettings\"));\n        }\n\n        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory, IOptions<SpaSettings> spaSettings)\n        {\n            loggerFactory.AddConsole(LogLevel.Debug);\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseDefaultFiles();\n            app.UseStaticFiles();\n            ConfigureRoutes(app, spaSettings.Value);\n        }\n\n        private void ConfigureRoutes(IApplicationBuilder app, SpaSettings spaSettings)\n        {\n            // If the route contains '.' then assume a file to be served\n            // and try to serve using StaticFiles\n            // if the route is spa route then let it fall through to the\n            // spa index file and have it resolved by the spa application\n            app.MapWhen(context => {\n                var path = context.Request.Path.Value;\n                return !path.Contains(\".\");\n            },\n            spa => {\n                spa.Use((context, next) =>\n                {\n                    context.Request.Path = new PathString(\"/\" + spaSettings.DefaultPage);\n                    return next();\n                });\n\n                spa.UseStaticFiles();\n            });\n\n        }\n    }\n}\n```\n\nThe **ConfigureRoutes()** method is handing the static routing of looking for the requested path / file. \n\nJust like in node, ASP.NET Core is a pay for play model, meaning that if you want a feature you must add the dependency in your project.json and also add the middleware. In the following snippet, the **index.html** is served by default by using `app.UseDefaultFiles()` and static files are enabled using `app.UseStaticFiles`.\n\n```\napp.UseDefaultFiles();\napp.UseStaticFiles();\n```\nThese are available from `Microsoft.AspNetCore.StaticFiles`\n\nThe filename of the default file is being stored in the **appsettings.json** file which is loaded using the **ConfigurationBuilder.AddJsonFile()**, then added to the services collection and mapped to the class `SpaSettings`, this also makes it available in our IoC container and available throughout the application.\n\n```javascript\n{\n  \"Logging\": {\n    \"IncludeScopes\": false,\n    \"LogLevel\": {\n      \"Default\": \"Verbose\",\n      \"System\": \"Information\",\n      \"Microsoft\": \"Information\"\n    }\n  },\n  \"SpaSettings\":{\n      \"DefaultPage\" : \"index.html\",\n      \"ApplicationName\" : \"My First Angular 2 Application\"\n  }\n}\n```\n\n```csharp\n services.Configure<SpaSettings>(Configuration.GetSection(\"SpaSettings\"));\n```\n\nAfter installing the dotnet cli, simply run using the new dotnet commands and browse to the application on http://localhost:5000\n\n```bash\ndotnet restore\ndotnet run\n```\nThe application running.\n![app](/content/images/2016/04/Screen-Shot-2016-04-11-at-11-30-47-PM.png)\nConsole Output\n![console](/content/images/2016/04/Screen-Shot-2016-04-11-at-11-30-16-PM.png)\n\nEverything is available on github : https://github.com/spboyer/ng2-kestrel-appserver - please help make it better contribute, comment, submit requests for features.","html":"<p>Available on github : <a href=\"https://github.com/spboyer/ng2-kestrel-appserver\">https://github.com/spboyer/ng2-kestrel-appserver</a></p>\n\n<p>Selecting the server architecture may or may not be a pivotal point in your application design...but it maybe it should.</p>\n\n<p>Micro-services, SOA, 12 Factor, ZDD and all of the other buzzwords do in fact have merit, getting away from the monolith application and \"putting all of you eggs in one basket\" server apps are a think of the past. Right?</p>\n\n<p>The core message here is \"do one thing and do it well\". So why would you couple your dynamic and static content into a single application? </p>\n\n<p>Static content doesn't change (often), scaling needs aren't 1:1 with the web api layers. However, there are some needs that the simple use of a CDN (Content Delivery Network) like cloudfare or Akamai just won't solve.</p>\n\n<ol>\n<li>Caching  </li>\n<li>Compression  </li>\n<li>Deep Linking  </li>\n<li>SEO  </li>\n<li>Internationalization (i18n)  </li>\n<li>Custom Routing</li>\n</ol>\n\n<p>This is where using nginx or node.js w/Express fits the bill.  </p>\n\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">What web server do you use for angular in production? <a href=\"https://twitter.com/hashtag/angular?src=hash\">#angular</a> <a href=\"https://twitter.com/angularjs\">@angularjs</a></p>&mdash; Shayne Boyer (@spboyer) <a href=\"https://twitter.com/spboyer/status/719667199091335170\">April 11, 2016</a></blockquote>  \n\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<h2 id=\"nginxvsnodejs\">nginx vs. node.js</h2>\n\n<p><strong>nginx</strong> is a very popular server, provides capabilities beyond web server functions such as comparable features to ha-proxy.  However, in the event you need to write custom modules, extend or support; C or C++ is the language of choice.</p>\n\n<p><strong>node.js</strong>, with Express performs very well, scales and would be hard to argue its uptake in the tech world for use in this case. Another large benefit with node.js is that it's JavaScript, offers a large and ever growing community for middleware to fit the needs mentioned above as well as any business specific module you would need to write.</p>\n\n<h2 id=\"usingnodejs\">Using node.js</h2>\n\n<p>Using Express with node.js, a static web server is pretty simple to put together.</p>\n\n<p>gist: <a href=\"https://gist.github.com/spboyer/1aa7ac47bf0631a30d9eafd7b1af1186\">https://gist.github.com/spboyer/1aa7ac47bf0631a30d9eafd7b1af1186</a></p>\n\n<pre><code class=\"language-javascript\">var express = require('express'),  \n    path = require('path'),\n    fs = require('fs');\n\nvar app = express();  \nvar staticRoot = __dirname + '/';  \napp.set('port', (process.env.PORT || 3000));  \napp.use(express.static(staticRoot));\n\napp.use(function(req, res, next){  \n    // if the request is not html then move along\n    var accept = req.accepts('html', 'json', 'xml');\n    if(accept !== 'html'){\n        return next();\n    }\n\n    // if the request has a '.' assume that it's for a file, move along\n    var ext = path.extname(req.path);\n    if (ext !== ''){\n        return next();\n    }\n    fs.createReadStream(staticRoot + 'index.html').pipe(res);\n});\n\napp.listen(app.get('port'), function() {  \n    console.log('app running on port', app.get('port'));\n});\n</code></pre>\n\n<p>Pretty straight forward:</p>\n\n<ul>\n<li>index.html is the default file</li>\n<li>if the request has a '.', assume it's a file and try to serve it</li>\n<li>if the request has an 'accept' header of html, xml, or json serve it.</li>\n<li>otherwise assume its a route in the SPA and send it along to Angular.</li>\n</ul>\n\n<p>This example doesn't have compression (gzip) included but we could easily add it with a middleware component.</p>\n\n<pre><code>var compression = require('compression');  \napp.use(compression())  \n</code></pre>\n\n<p>A easy solution, couple lines and done. A big benefit and there are a ton of middleware components available - <a href=\"http://expressjs.com/en/resources/middleware.html\">http://expressjs.com/en/resources/middleware.html</a></p>\n\n<h2 id=\"usingkestrel\">Using Kestrel</h2>\n\n<p>So if node is fitting the bill, why would we want to use Kestrel? First, it's 6x faster than node.js for static / plain text operations - <a href=\"https://github.com/aspnet/benchmarks#plain-text-with-http-pipelining\">https://github.com/aspnet/benchmarks#plain-text-with-http-pipelining</a>. Second, node.js is great at a number of things:</p>\n\n<ul>\n<li>JavaScript on the server - good because the UI is a large front end language too allowing for re-use on both sides of the app</li>\n<li>Fast I/O - asynchronous IO, optimized for throughput and concurrency. </li>\n<li>Large Community - this helps for the middleware plug in parts and leveraging the ecosystem</li>\n</ul>\n\n<p>However, application needs like database connectivity, message queue, heavy business logic/processing is not what node.js is made for and where .NET and Java comes in to serve these needs.</p>\n\n<p>ASP.NET core brings the best of what node.js offers and what .NET has always been good at (heavy processing) but at lightspeed. </p>\n\n<h3 id=\"kestrelstaticserverexample\">kestrel static server example</h3>\n\n<p><em>This is written using the RC2 bits, and the dotnet cli. Install the dotnet-cli &amp; SDK from <a href=\"https://github.com/dotnet/cli#installers-and-binaries\">https://github.com/dotnet/cli#installers-and-binaries</a> .</em></p>\n\n<p><em>* Startup.cs *</em></p>\n\n<pre><code class=\"language-csharp\">       public Startup(IHostingEnvironment env)\n        {\n            // Set up configuration sources.\n            var builder = new ConfigurationBuilder()\n                .SetBasePath(env.ContentRootPath)\n                .AddJsonFile(\"appsettings.json\")\n                .AddEnvironmentVariables();\n            Configuration = builder.Build();\n        }\n\n        // This method gets called by the runtime. Use this method to add services to the container.\n        // For more information on how to configure your application, visit http://go.microsoft.com/fwlink/?LinkID=398940\n        public void ConfigureServices(IServiceCollection services)\n        {\n            // Map the #SpaSettings section to the &lt;see cref=SpaSettings /&gt; class\n            services.Configure&lt;SpaSettings&gt;(Configuration.GetSection(\"SpaSettings\"));\n        }\n\n        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory, IOptions&lt;SpaSettings&gt; spaSettings)\n        {\n            loggerFactory.AddConsole(LogLevel.Debug);\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseDefaultFiles();\n            app.UseStaticFiles();\n            ConfigureRoutes(app, spaSettings.Value);\n        }\n\n        private void ConfigureRoutes(IApplicationBuilder app, SpaSettings spaSettings)\n        {\n            // If the route contains '.' then assume a file to be served\n            // and try to serve using StaticFiles\n            // if the route is spa route then let it fall through to the\n            // spa index file and have it resolved by the spa application\n            app.MapWhen(context =&gt; {\n                var path = context.Request.Path.Value;\n                return !path.Contains(\".\");\n            },\n            spa =&gt; {\n                spa.Use((context, next) =&gt;\n                {\n                    context.Request.Path = new PathString(\"/\" + spaSettings.DefaultPage);\n                    return next();\n                });\n\n                spa.UseStaticFiles();\n            });\n\n        }\n    }\n}\n</code></pre>\n\n<p>The <strong>ConfigureRoutes()</strong> method is handing the static routing of looking for the requested path / file. </p>\n\n<p>Just like in node, ASP.NET Core is a pay for play model, meaning that if you want a feature you must add the dependency in your project.json and also add the middleware. In the following snippet, the <strong>index.html</strong> is served by default by using <code>app.UseDefaultFiles()</code> and static files are enabled using <code>app.UseStaticFiles</code>.</p>\n\n<pre><code>app.UseDefaultFiles();  \napp.UseStaticFiles();  \n</code></pre>\n\n<p>These are available from <code>Microsoft.AspNetCore.StaticFiles</code></p>\n\n<p>The filename of the default file is being stored in the <strong>appsettings.json</strong> file which is loaded using the <strong>ConfigurationBuilder.AddJsonFile()</strong>, then added to the services collection and mapped to the class <code>SpaSettings</code>, this also makes it available in our IoC container and available throughout the application.</p>\n\n<pre><code class=\"language-javascript\">{\n  \"Logging\": {\n    \"IncludeScopes\": false,\n    \"LogLevel\": {\n      \"Default\": \"Verbose\",\n      \"System\": \"Information\",\n      \"Microsoft\": \"Information\"\n    }\n  },\n  \"SpaSettings\":{\n      \"DefaultPage\" : \"index.html\",\n      \"ApplicationName\" : \"My First Angular 2 Application\"\n  }\n}\n</code></pre>\n\n<pre><code class=\"language-csharp\"> services.Configure&lt;SpaSettings&gt;(Configuration.GetSection(\"SpaSettings\"));\n</code></pre>\n\n<p>After installing the dotnet cli, simply run using the new dotnet commands and browse to the application on <a href=\"http://localhost:5000\">http://localhost:5000</a></p>\n\n<pre><code class=\"language-bash\">dotnet restore  \ndotnet run  \n</code></pre>\n\n<p>The application running. <br />\n<img src=\"/content/images/2016/04/Screen-Shot-2016-04-11-at-11-30-47-PM.png\" alt=\"app\" />\nConsole Output <br />\n<img src=\"/content/images/2016/04/Screen-Shot-2016-04-11-at-11-30-16-PM.png\" alt=\"console\" /></p>\n\n<p>Everything is available on github : <a href=\"https://github.com/spboyer/ng2-kestrel-appserver\">https://github.com/spboyer/ng2-kestrel-appserver</a> - please help make it better contribute, comment, submit requests for features.</p>","image":"/content/images/2016/04/Untitled-drawing--1-.png","featured":1,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1460426494049,"created_by":1,"updated_at":1479755819742,"updated_by":1,"published_at":1460432076466,"published_by":1},{"id":69,"uuid":"c10c4af1-40c4-4439-80f1-41c474568ab3","title":"Setting up ASP.NET Core debugging in VS Code","slug":"setting-up-asp-net-core-debugging-in-vs-code","markdown":"**UPDATE: Now Version 1.0 of Visual Studio Released** - Same steps apply for Version 1.0.\n\nIn the most recent ASP.NET Community Standup (http://live.asp.net), Damian walked through the steps of getting RC2 debugging setup inside of Visual Studio Code - Insiders Build.\n\nHere are the steps.\n\n<h2>Install the dotnet SDK for your OS</h2>\nGo to https://github.com/dotnet/cli#installers-and-binaries and select the proper link for your OS in the **.NET Core SDK Installer** column and install this. As a note, if you have a previous version of this installed you may need to manually remove the **dotnet** folder from the installation location prior as the installer will not overwrite, and it *fails* silently.\n\nCheck that you are good to go by looking at `--info` output and checking the version number.\n```\n$ dotnet --info\n```\n\n<h2>Download Visual Studio Code - Insiders Build</h2>\nGo to http://code.visualstudio.com and click the \"March Insiders Release\" and get the proper version for your OS.\n\n![insiders](/content/images/2016/04/Screen-Shot-2016-04-14-at-9-23-00-AM-1.png)\n\n\n![insiders2](/content/images/2016/04/Screen-Shot-2016-04-14-at-9-25-16-AM.png)\n\n*If you are on OSX you'll need to extract the app and copy to your \"Applications\" folder*\n\n<h2>Download omnisharp-vscode extension</h2>\nNext, go grab the extension from the github repo - https://github.com/OmniSharp/omnisharp-vscode/releases\n![ext-repo](/content/images/2016/04/Screen-Shot-2016-04-14-at-9-33-39-AM.png)\n\nYes, it is a **.vsix** file extension.  Download this and then open the Insiders build of VS Code and do **File -> Open** this file.\n\n![fileopen](/content/images/2016/04/Screen-Shot-2016-04-14-at-9-39-45-AM.png)\n\nNothing will happen for 2-5 seconds, be patient, until you see the prompt to restart.\n\n![restart prompt](/content/images/2016/04/Screen-Shot-2016-04-14-at-9-40-05-AM.png)\n\nRestart VS Code.\n\n<h2>Clone aspnet/cli-examples repository</h2>\n\nNow we need to get a \"current\" dotnet-cli / RC2 application to open.  Best place is the **cli-samples** repo https://github.com/aspnet/cli-samples, so head there and clone the repo.\n\nOpen and of the individual projects, **HelloMvcAPI** for example. You'll see in the status bar that the .NET Core Debugger is downloading. You can open the output window as well and see the **coreclr-debug** output as well.\n\n![](/content/images/2016/04/Screen-Shot-2016-04-14-at-9-44-13-AM.png)\n\n![installed](/content/images/2016/04/Screen-Shot-2016-04-14-at-9-46-11-AM.png)\n\nHead over to the left and select the debug icon, click the \"play\" icon to start debugging.\n\n![running](/content/images/2016/04/Screen-Shot-2016-04-14-at-2-54-32-PM.png)\n\n<h2>Summary</h2>\n<img src=\"/content/images/2016/04/winning.jpg\" style=\"height:200px;float:right; padding-left: 5px;padding-right: 5px;padding-top: 15px\">\nThis is ASP.NET Core, no Mono, running on OSX. I can see and inspect the variables (top left) step through the code.  I have a built in debug console. Boom! It is in fact a new Microsoft.\n\n<br clear=\"all\" />","html":"<p><strong>UPDATE: Now Version 1.0 of Visual Studio Released</strong> - Same steps apply for Version 1.0.</p>\n\n<p>In the most recent ASP.NET Community Standup (<a href=\"http://live.asp.net\">http://live.asp.net</a>), Damian walked through the steps of getting RC2 debugging setup inside of Visual Studio Code - Insiders Build.</p>\n\n<p>Here are the steps.</p>\n\n<h2>Install the dotnet SDK for your OS</h2>  \n\n<p>Go to <a href=\"https://github.com/dotnet/cli#installers-and-binaries\">https://github.com/dotnet/cli#installers-and-binaries</a> and select the proper link for your OS in the <strong>.NET Core SDK Installer</strong> column and install this. As a note, if you have a previous version of this installed you may need to manually remove the <strong>dotnet</strong> folder from the installation location prior as the installer will not overwrite, and it <em>fails</em> silently.</p>\n\n<p>Check that you are good to go by looking at <code>--info</code> output and checking the version number.  </p>\n\n<pre><code>$ dotnet --info\n</code></pre>\n\n<h2>Download Visual Studio Code - Insiders Build</h2>  \n\n<p>Go to <a href=\"http://code.visualstudio.com\">http://code.visualstudio.com</a> and click the \"March Insiders Release\" and get the proper version for your OS.</p>\n\n<p><img src=\"/content/images/2016/04/Screen-Shot-2016-04-14-at-9-23-00-AM-1.png\" alt=\"insiders\" /></p>\n\n<p><img src=\"/content/images/2016/04/Screen-Shot-2016-04-14-at-9-25-16-AM.png\" alt=\"insiders2\" /></p>\n\n<p><em>If you are on OSX you'll need to extract the app and copy to your \"Applications\" folder</em></p>\n\n<h2>Download omnisharp-vscode extension</h2>  \n\n<p>Next, go grab the extension from the github repo - <a href=\"https://github.com/OmniSharp/omnisharp-vscode/releases\">https://github.com/OmniSharp/omnisharp-vscode/releases</a> <br />\n<img src=\"/content/images/2016/04/Screen-Shot-2016-04-14-at-9-33-39-AM.png\" alt=\"ext-repo\" /></p>\n\n<p>Yes, it is a <strong>.vsix</strong> file extension.  Download this and then open the Insiders build of VS Code and do <strong>File -> Open</strong> this file.</p>\n\n<p><img src=\"/content/images/2016/04/Screen-Shot-2016-04-14-at-9-39-45-AM.png\" alt=\"fileopen\" /></p>\n\n<p>Nothing will happen for 2-5 seconds, be patient, until you see the prompt to restart.</p>\n\n<p><img src=\"/content/images/2016/04/Screen-Shot-2016-04-14-at-9-40-05-AM.png\" alt=\"restart prompt\" /></p>\n\n<p>Restart VS Code.</p>\n\n<h2>Clone aspnet/cli-examples repository</h2>\n\n<p>Now we need to get a \"current\" dotnet-cli / RC2 application to open.  Best place is the <strong>cli-samples</strong> repo <a href=\"https://github.com/aspnet/cli-samples\">https://github.com/aspnet/cli-samples</a>, so head there and clone the repo.</p>\n\n<p>Open and of the individual projects, <strong>HelloMvcAPI</strong> for example. You'll see in the status bar that the .NET Core Debugger is downloading. You can open the output window as well and see the <strong>coreclr-debug</strong> output as well.</p>\n\n<p><img src=\"/content/images/2016/04/Screen-Shot-2016-04-14-at-9-44-13-AM.png\" alt=\"\" /></p>\n\n<p><img src=\"/content/images/2016/04/Screen-Shot-2016-04-14-at-9-46-11-AM.png\" alt=\"installed\" /></p>\n\n<p>Head over to the left and select the debug icon, click the \"play\" icon to start debugging.</p>\n\n<p><img src=\"/content/images/2016/04/Screen-Shot-2016-04-14-at-2-54-32-PM.png\" alt=\"running\" /></p>\n\n<h2>Summary</h2>  \n\n<p><img src=\"/content/images/2016/04/winning.jpg\" style=\"height:200px;float:right; padding-left: 5px;padding-right: 5px;padding-top: 15px\"> <br />\nThis is ASP.NET Core, no Mono, running on OSX. I can see and inspect the variables (top left) step through the code.  I have a built in debug console. Boom! It is in fact a new Microsoft.</p>\n\n<p><br clear=\"all\" /></p>","image":"/content/images/2016/04/Screen-Shot-2016-04-12-at-10-00-12-PM-1.png","featured":1,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1460644716819,"created_by":1,"updated_at":1461338600534,"updated_by":1,"published_at":1460674800000,"published_by":1},{"id":70,"uuid":"dc7515e8-9500-4bb8-b3f3-058ef36c8ec2","title":"ASP.NET Core Needs a Logo","slug":"asp-net-core-needs-a-logo","markdown":"![aspnetlogo-old](/content/images/2016/04/aspnet-logo-old.jpg)\nIt is not uncommon for developers to adorn their laptops, Macs, Surface Pros, etc with the sticky vinyls of the platforms, tools and frameworks of the stuff we like to use.  \n\n![mymac](/content/images/2016/04/mylaptop.jpg)\n\nUnless you have been under a rock, or just too busy to look up, ASP.NET is all new again.  It's small, fast, runs cross platform and aims to be on the radar of every new kid coming out of whatever school you name to be the framework of choice.\n\n*But where's my sticker dude?*\n\n![dotnetbot](/content/images/2016/04/at-dotnet-bot.png)\n\n**dotnet** is covered pretty well on [stickermule.com](https://www.stickermule.com/user/1070667147/stickers) as [Kristan Hellang](https://twitter.com/khellang) pointed out on the github issue - https://github.com/aspnet/Home/issues/579.\n\nI pointed out in my comment on the issue https://github.com/aspnet/Home/issues/579#issuecomment-212920050 that http://fsharp.org has an awesome logo, not sure the route that they went; approvals etc to go through but this discussion has surfaced again on twitter by some community members. \n\n![](https://camo.githubusercontent.com/3b754d03d0052ee466554afbfe5e7324d920923b/687474703a2f2f6673686172702e6f72672f696d672f6c6f676f2f6673686172703235362e706e67)\n\nIf we are looking to get into the places where .NET is not, being the kids in school using bash, zsh, node, php etc., then let's be sure to have to cool swag to go along with the effort being made so far.\n\nSeems silly I know, but it matters.\n\nIf you are a designer or have designer friends or colleagues.  Send me an idea. I'm interested to see what you have in mind.\n","html":"<p><img src=\"/content/images/2016/04/aspnet-logo-old.jpg\" alt=\"aspnetlogo-old\" />\nIt is not uncommon for developers to adorn their laptops, Macs, Surface Pros, etc with the sticky vinyls of the platforms, tools and frameworks of the stuff we like to use.  </p>\n\n<p><img src=\"/content/images/2016/04/mylaptop.jpg\" alt=\"mymac\" /></p>\n\n<p>Unless you have been under a rock, or just too busy to look up, ASP.NET is all new again.  It's small, fast, runs cross platform and aims to be on the radar of every new kid coming out of whatever school you name to be the framework of choice.</p>\n\n<p><em>But where's my sticker dude?</em></p>\n\n<p><img src=\"/content/images/2016/04/at-dotnet-bot.png\" alt=\"dotnetbot\" /></p>\n\n<p><strong>dotnet</strong> is covered pretty well on <a href=\"https://www.stickermule.com/user/1070667147/stickers\">stickermule.com</a> as <a href=\"https://twitter.com/khellang\">Kristan Hellang</a> pointed out on the github issue - <a href=\"https://github.com/aspnet/Home/issues/579\">https://github.com/aspnet/Home/issues/579</a>.</p>\n\n<p>I pointed out in my comment on the issue <a href=\"https://github.com/aspnet/Home/issues/579#issuecomment-212920050\">https://github.com/aspnet/Home/issues/579#issuecomment-212920050</a> that <a href=\"http://fsharp.org\">http://fsharp.org</a> has an awesome logo, not sure the route that they went; approvals etc to go through but this discussion has surfaced again on twitter by some community members. </p>\n\n<p><img src=\"https://camo.githubusercontent.com/3b754d03d0052ee466554afbfe5e7324d920923b/687474703a2f2f6673686172702e6f72672f696d672f6c6f676f2f6673686172703235362e706e67\" alt=\"\" /></p>\n\n<p>If we are looking to get into the places where .NET is not, being the kids in school using bash, zsh, node, php etc., then let's be sure to have to cool swag to go along with the effort being made so far.</p>\n\n<p>Seems silly I know, but it matters.</p>\n\n<p>If you are a designer or have designer friends or colleagues.  Send me an idea. I'm interested to see what you have in mind.</p>","image":"/content/images/2016/04/mylaptop-1.jpg","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1461597933287,"created_by":1,"updated_at":1461599407364,"updated_by":1,"published_at":1461599407364,"published_by":1},{"id":71,"uuid":"a8a31943-5166-48e0-8ba3-ccdda01914a0","title":"Angular 2 : Getting off the Starting Line","slug":"angular-2-getting-off-the-starting-line","markdown":"![ng2-startingline](/content/images/2016/04/ng2-startingline-header-1.png)\n\nThe Angular team created a quickstart repo over at https://github.com/angular/quickstart which is a great starter project template for basically a \"Hello World\" application.  \n\nIt provides:\n\n* [lite-server](https://github.com/johnpapa/lite-server), which is a **demo** or **local/development only** server \n* basic tests using karma\n* typescript dependencies (tsconfig, typings)\n\nGetting started is included in the README, but it's simple \n```\n# clone the repo\ngit clone https://github.com/angular/quickstart <your app name>\n\n# change directory to your app name\ncd <your app name>\n\n# delete the .git file to remove the binding from the angular repo\nrm -rf .git\n```\n\nNow the code is set for you to create your own repo, `git init`, `commit` etc.\n\n#Running the quickstart\nFirst make sure all of the npm packages are good.\n```\nnpm install\n```\nthen The npm start command first compiles the application, then simultaneously re-compiles and runs the lite-server. Both the compiler and the server watch for file changes. To stop manually, use `Ctrl-C`.\n\nThis gets you to the *starting line*.  But what the quickstart doesn't have is a build process or a production server that handles, deep linking or static file serving.  That's where [ng2-startingline](http://github.com/spboyer/ng2-startingline) comes in.  Let's add the needed pieces.\n\n#Express.js as the server\nnode.js, with Express performs very well, scales and would be hard to argue its uptake in the tech world for use in this case.\n\nThere are a couple of things we need to accomplish with the node/express server.\n\n* if the request has a '.', assume it's a file and try to serve it\n* if the request has an 'accept' header of html, xml, or json serve it.\n* otherwise assume its a route in the SPA and send it along to Angular.\n\nHere's the simple server code:\n\npackage.json\n```\n{\n    \"name\": \"ng2-startingline\",\n    \"version\": \"1.0.0\",\n    \"dependencies\": {\n        \"express\": \"4.13.4\"\n    }\n}\n```\nindex.js\n```javascript\nvar express = require('express'),\n    path = require('path'),\n    fs = require('fs');\n\nvar app = express();\nvar staticRoot = __dirname + '/';\n\napp.set('port', (process.env.PORT || 3000));\n\napp.use(express.static(staticRoot));\n\napp.use(function(req, res, next){\n\n    // if the request is not html then move along\n    var accept = req.accepts('html', 'json', 'xml');\n    if(accept !== 'html'){\n        return next();\n    }\n\n    // if the request has a '.' assume that it's for a file, move along\n    var ext = path.extname(req.path);\n    if (ext !== ''){\n        return next();\n    }\n\n    fs.createReadStream(staticRoot + 'index.html').pipe(res);\n\n});\n\napp.listen(app.get('port'), function() {\n    console.log('app running on port', app.get('port'));\n});\n```\nAdd these 2 files, `package.json`, `index.json` in a folder called **server** in the root of your project.\n\n#Adding the build process\nNext, a build process using gulp will be added to the project.  The purpose here is to:\n* create a **/build** folder for the destination of our *production* code\n* select and move the specific application javascript dependencies from node_modules to a **/lib** folder withing **/build**\n* move the application files, `index.html` and compiled `*.js` files to the **/build** folder\n* include the server\n\nAdd the gulp **devDependencies** to the `package.json` file in the root of the project.\n\n```\n,\n    \"gulp\" : \"3.9.1\",\n    \"gulp-sourcemaps\": \"2.0.0-alpha\",\n    \"del\" : \"2.2.0\"\n```\nand `npm install`. Next, add a the `gulpfile.js` in the root of the project.\n\ngulpfile.js\n```javascript\n\"use strict\";\nvar gulp = require(\"gulp\");\nvar del = require(\"del\");\nvar sourcemaps = require('gulp-sourcemaps');\n\n/**\n * Remove build directory.\n */\ngulp.task('clean', function (cb) {\n    return del([\"build\"], cb);\n});\n\n/**\n * Copy all resources that are not TypeScript files into build directory.\n */\ngulp.task(\"resources\", [\"server\", \"app\", \"assets\"], function () {\n    console.log(\"Building resources...\");\n});\n/* copy the app core files to the build folder */\ngulp.task(\"app\", ['index'], function(){\n    return gulp.src([\"app/**\", \"!app/**/*.ts\"])\n        .pipe(gulp.dest(\"build/app\"));\n});\n/* get the index file to the root of the build */\ngulp.task(\"index\", function(){\n    return gulp.src([\"index.html\"])\n        .pipe(gulp.dest(\"build\"));\n});\n/* copy node server to build folder */\ngulp.task(\"server\", function () {\n    return gulp.src([\"index.js\", \"package.json\"], { cwd: \"server/**\" })\n        .pipe(gulp.dest(\"build\"));\n});\n/* styles and other assets */\ngulp.task(\"assets\", function(){\n    return gulp.src([\"styles.css\"])\n        .pipe(gulp.dest(\"build\"));\n});\n/**\n * Copy all required libraries into build directory.\n */\ngulp.task(\"libs\", function () {\n    return gulp.src([\n        'es6-shim/es6-shim.min.js',\n        'systemjs/dist/system-polyfills.js',\n        'angular2/bundles/angular2-polyfills.js',\n        'angular2/es6/dev/src/testing/shims_for_IE.js',\n        'systemjs/dist/system.src.js',\n        'rxjs/bundles/Rx.js',\n        'angular2/bundles/angular2.dev.js',\n        'angular2/bundles/router.dev.js'\n    ], { cwd: \"node_modules/**\" }) /* Glob required here. */\n        .pipe(gulp.dest(\"build/node_modules\"));\n});\n/**\n * Build the project.\n */\ngulp.task(\"default\", ['resources', 'libs'], function () {\n    console.log(\"Building the project ...\");\n});\n\n```\nYou can run any of the gulp tasks individually\n* `gulp clean` - deletes the **/build** folder\n* `gulp server` - copies the server to the **/build** folder\n* etc\n\nor run all them by just typing `gulp` at the command or terminal.  *Note that the gulp-cli is required, install this using `npm install gulp-cli -g`\n\n##Adding npm scripts\nThere are already a number of npm scripts in the project allowing you to do a number of tasks:\n\n* npm start - runs the compiler and a server at the same time, both in \"watch mode\".\n* npm run tsc - runs the TypeScript compiler once.\n* npm run tsc:w - runs the TypeScript compiler in watch mode; the process keeps running, awaiting changes to TypeScript files and re-compiling when it sees them.\n \n...and others noted on the home [repo page](http://github.com/angular/quickstart)\n\nOpen up package.json in the root and add the following:\n```\n\"build\": \"tsc && gulp\",\n    \"prod\": \"npm run build && cd build && npm i && node index.js\"\n```\n\n* **build** - `npm run build` : runs the typescript compiler to transpile the application code to javascript, and then the gulp default task is run to create the **/build** folder.\n* **prod** - `npm run prod` : runs the `build` command above but also installs the express server and runs the production application from the **/build** folder on port 3000.  This allows you to then open a browser and navigate to http://localhost:3000 to see the application as if it was running on a live server.\n\n#Summary\nBy using the ng2-startingline repo, you now have a development and build process ready to go.  \n\n##Getting Started\n```\n# clone the repo\ngit clone https://github.com/spboyer/ng2-startingline <your app name>\n\n# change directory to your app name\ncd <your app name>\n\n# delete the .git file to remove the binding from the angular repo\nrm -rf .git \n```\n##Development\n```\nnpm install \nnpm start\n```\n\n##Build for Production\n```\n# test locally\nnpm run prod\n# browse to http://localhost:3000\n```\nDeploy the **/build** folder to [Azure websites](https://azure.microsoft.com/en-us/documentation/articles/web-sites-deploy/) via [Dropbox](https://azure.microsoft.com/en-us/blog/new-deploy-to-windows-azure-web-sites-from-dropbox/), OneDrive or Github.\n\nTry it out! Let me know what you think.","html":"<p><img src=\"/content/images/2016/04/ng2-startingline-header-1.png\" alt=\"ng2-startingline\" /></p>\n\n<p>The Angular team created a quickstart repo over at <a href=\"https://github.com/angular/quickstart\">https://github.com/angular/quickstart</a> which is a great starter project template for basically a \"Hello World\" application.  </p>\n\n<p>It provides:</p>\n\n<ul>\n<li><a href=\"https://github.com/johnpapa/lite-server\">lite-server</a>, which is a <strong>demo</strong> or <strong>local/development only</strong> server </li>\n<li>basic tests using karma</li>\n<li>typescript dependencies (tsconfig, typings)</li>\n</ul>\n\n<p>Getting started is included in the README, but it's simple  </p>\n\n<pre><code># clone the repo\ngit clone https://github.com/angular/quickstart &lt;your app name&gt;\n\n# change directory to your app name\ncd &lt;your app name&gt;\n\n# delete the .git file to remove the binding from the angular repo\nrm -rf .git  \n</code></pre>\n\n<p>Now the code is set for you to create your own repo, <code>git init</code>, <code>commit</code> etc.</p>\n\n<h1 id=\"runningthequickstart\">Running the quickstart</h1>\n\n<p>First make sure all of the npm packages are good.  </p>\n\n<pre><code>npm install  \n</code></pre>\n\n<p>then The npm start command first compiles the application, then simultaneously re-compiles and runs the lite-server. Both the compiler and the server watch for file changes. To stop manually, use <code>Ctrl-C</code>.</p>\n\n<p>This gets you to the <em>starting line</em>.  But what the quickstart doesn't have is a build process or a production server that handles, deep linking or static file serving.  That's where <a href=\"http://github.com/spboyer/ng2-startingline\">ng2-startingline</a> comes in.  Let's add the needed pieces.</p>\n\n<h1 id=\"expressjsastheserver\">Express.js as the server</h1>\n\n<p>node.js, with Express performs very well, scales and would be hard to argue its uptake in the tech world for use in this case.</p>\n\n<p>There are a couple of things we need to accomplish with the node/express server.</p>\n\n<ul>\n<li>if the request has a '.', assume it's a file and try to serve it</li>\n<li>if the request has an 'accept' header of html, xml, or json serve it.</li>\n<li>otherwise assume its a route in the SPA and send it along to Angular.</li>\n</ul>\n\n<p>Here's the simple server code:</p>\n\n<p>package.json  </p>\n\n<pre><code>{\n    \"name\": \"ng2-startingline\",\n    \"version\": \"1.0.0\",\n    \"dependencies\": {\n        \"express\": \"4.13.4\"\n    }\n}\n</code></pre>\n\n<p>index.js  </p>\n\n<pre><code class=\"language-javascript\">var express = require('express'),  \n    path = require('path'),\n    fs = require('fs');\n\nvar app = express();  \nvar staticRoot = __dirname + '/';\n\napp.set('port', (process.env.PORT || 3000));\n\napp.use(express.static(staticRoot));\n\napp.use(function(req, res, next){\n\n    // if the request is not html then move along\n    var accept = req.accepts('html', 'json', 'xml');\n    if(accept !== 'html'){\n        return next();\n    }\n\n    // if the request has a '.' assume that it's for a file, move along\n    var ext = path.extname(req.path);\n    if (ext !== ''){\n        return next();\n    }\n\n    fs.createReadStream(staticRoot + 'index.html').pipe(res);\n\n});\n\napp.listen(app.get('port'), function() {  \n    console.log('app running on port', app.get('port'));\n});\n</code></pre>\n\n<p>Add these 2 files, <code>package.json</code>, <code>index.json</code> in a folder called <strong>server</strong> in the root of your project.</p>\n\n<h1 id=\"addingthebuildprocess\">Adding the build process</h1>\n\n<p>Next, a build process using gulp will be added to the project.  The purpose here is to: <br />\n* create a <strong>/build</strong> folder for the destination of our <em>production</em> code\n* select and move the specific application javascript dependencies from node_modules to a <strong>/lib</strong> folder withing <strong>/build</strong>\n* move the application files, <code>index.html</code> and compiled <code>*.js</code> files to the <strong>/build</strong> folder\n* include the server</p>\n\n<p>Add the gulp <strong>devDependencies</strong> to the <code>package.json</code> file in the root of the project.</p>\n\n<pre><code>,\n    \"gulp\" : \"3.9.1\",\n    \"gulp-sourcemaps\": \"2.0.0-alpha\",\n    \"del\" : \"2.2.0\"\n</code></pre>\n\n<p>and <code>npm install</code>. Next, add a the <code>gulpfile.js</code> in the root of the project.</p>\n\n<p>gulpfile.js  </p>\n\n<pre><code class=\"language-javascript\">\"use strict\";\nvar gulp = require(\"gulp\");  \nvar del = require(\"del\");  \nvar sourcemaps = require('gulp-sourcemaps');\n\n/**\n * Remove build directory.\n */\ngulp.task('clean', function (cb) {  \n    return del([\"build\"], cb);\n});\n\n/**\n * Copy all resources that are not TypeScript files into build directory.\n */\ngulp.task(\"resources\", [\"server\", \"app\", \"assets\"], function () {  \n    console.log(\"Building resources...\");\n});\n/* copy the app core files to the build folder */\ngulp.task(\"app\", ['index'], function(){  \n    return gulp.src([\"app/**\", \"!app/**/*.ts\"])\n        .pipe(gulp.dest(\"build/app\"));\n});\n/* get the index file to the root of the build */\ngulp.task(\"index\", function(){  \n    return gulp.src([\"index.html\"])\n        .pipe(gulp.dest(\"build\"));\n});\n/* copy node server to build folder */\ngulp.task(\"server\", function () {  \n    return gulp.src([\"index.js\", \"package.json\"], { cwd: \"server/**\" })\n        .pipe(gulp.dest(\"build\"));\n});\n/* styles and other assets */\ngulp.task(\"assets\", function(){  \n    return gulp.src([\"styles.css\"])\n        .pipe(gulp.dest(\"build\"));\n});\n/**\n * Copy all required libraries into build directory.\n */\ngulp.task(\"libs\", function () {  \n    return gulp.src([\n        'es6-shim/es6-shim.min.js',\n        'systemjs/dist/system-polyfills.js',\n        'angular2/bundles/angular2-polyfills.js',\n        'angular2/es6/dev/src/testing/shims_for_IE.js',\n        'systemjs/dist/system.src.js',\n        'rxjs/bundles/Rx.js',\n        'angular2/bundles/angular2.dev.js',\n        'angular2/bundles/router.dev.js'\n    ], { cwd: \"node_modules/**\" }) /* Glob required here. */\n        .pipe(gulp.dest(\"build/node_modules\"));\n});\n/**\n * Build the project.\n */\ngulp.task(\"default\", ['resources', 'libs'], function () {  \n    console.log(\"Building the project ...\");\n});\n</code></pre>\n\n<p>You can run any of the gulp tasks individually <br />\n* <code>gulp clean</code> - deletes the <strong>/build</strong> folder\n* <code>gulp server</code> - copies the server to the <strong>/build</strong> folder\n* etc</p>\n\n<p>or run all them by just typing <code>gulp</code> at the command or terminal.  *Note that the gulp-cli is required, install this using <code>npm install gulp-cli -g</code></p>\n\n<h2 id=\"addingnpmscripts\">Adding npm scripts</h2>\n\n<p>There are already a number of npm scripts in the project allowing you to do a number of tasks:</p>\n\n<ul>\n<li>npm start - runs the compiler and a server at the same time, both in \"watch mode\".</li>\n<li>npm run tsc - runs the TypeScript compiler once.</li>\n<li>npm run tsc:w - runs the TypeScript compiler in watch mode; the process keeps running, awaiting changes to TypeScript files and re-compiling when it sees them.</li>\n</ul>\n\n<p>...and others noted on the home <a href=\"http://github.com/angular/quickstart\">repo page</a></p>\n\n<p>Open up package.json in the root and add the following:  </p>\n\n<pre><code>\"build\": \"tsc &amp;&amp; gulp\",\n    \"prod\": \"npm run build &amp;&amp; cd build &amp;&amp; npm i &amp;&amp; node index.js\"\n</code></pre>\n\n<ul>\n<li><strong>build</strong> - <code>npm run build</code> : runs the typescript compiler to transpile the application code to javascript, and then the gulp default task is run to create the <strong>/build</strong> folder.</li>\n<li><strong>prod</strong> - <code>npm run prod</code> : runs the <code>build</code> command above but also installs the express server and runs the production application from the <strong>/build</strong> folder on port 3000.  This allows you to then open a browser and navigate to <a href=\"http://localhost:3000\">http://localhost:3000</a> to see the application as if it was running on a live server.</li>\n</ul>\n\n<h1 id=\"summary\">Summary</h1>\n\n<p>By using the ng2-startingline repo, you now have a development and build process ready to go.  </p>\n\n<h2 id=\"gettingstarted\">Getting Started</h2>\n\n<pre><code># clone the repo\ngit clone https://github.com/spboyer/ng2-startingline &lt;your app name&gt;\n\n# change directory to your app name\ncd &lt;your app name&gt;\n\n# delete the .git file to remove the binding from the angular repo\nrm -rf .git  \n</code></pre>\n\n<h2 id=\"development\">Development</h2>\n\n<pre><code>npm install  \nnpm start  \n</code></pre>\n\n<h2 id=\"buildforproduction\">Build for Production</h2>\n\n<pre><code># test locally\nnpm run prod  \n# browse to http://localhost:3000\n</code></pre>\n\n<p>Deploy the <strong>/build</strong> folder to <a href=\"https://azure.microsoft.com/en-us/documentation/articles/web-sites-deploy/\">Azure websites</a> via <a href=\"https://azure.microsoft.com/en-us/blog/new-deploy-to-windows-azure-web-sites-from-dropbox/\">Dropbox</a>, OneDrive or Github.</p>\n\n<p>Try it out! Let me know what you think.</p>","image":"/content/images/2016/04/ng2-startingline-header.png","featured":1,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1461605628809,"created_by":1,"updated_at":1462031391510,"updated_by":1,"published_at":1461609313341,"published_by":1},{"id":72,"uuid":"873318f1-1645-4338-a63f-53cccf47d778","title":"2016 - The year of CLI","slug":"2016-the-year-of-cli","markdown":"\n<img src=\"https://www.tattoocoder.com/content/images/2016/04/littleguy.png\" style=\"float:right;padding:10px;\" /> 2016 is officially the year of the monkey, but I am calling it the year of the CLI (Command Line Interface).  \n\nOne of the recent talks I gave at DevIntersection was \"Modern Web Toolchain\". Mentioning CLI Tools and \"Modern\" does raise and eyebrow or two.<br clear=\"all\" />\n\n<br clear=\"all\" />\n<div style=\"text-align: center;\">\n<iframe src=\"https://docs.google.com/presentation/d/1hjhhcKssKb2ODrun3u72UYrSaAoqPD8YF7uvuVMEFlE/embed?start=false&loop=false&delayms=3000\" frameborder=\"0\" width=\"480\" height=\"299\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n</div>\n\nIt covers [npm](http://npmjs.org), [bower](http://bower.io), [grunt](http://gulpjs.com) (http://gruntjs.com), gulp etc. But more interestingly, about 50% of the talk is about command line tools; and more than just [Yeoman](http://yeoman.io).\n\nThere are a number of either completely new or new versions of frameworks that are in the works for a version 1.0 release in 2016 and all of which are shipping a CLI tool.\n\n* [Angular 2.0](http://github.com/angular/angular-cli)\n* [.NET Core](http://dotnet.github.io/)\n* [NativeScript](http://nativescript.org)\n* [Aurelia](http://aurelia.io)\n\nJust to mention a few, and don't forget [Docker](docker.com)!\n\nIt doesn't matter if you are on OS X, Linux or Windows; it is important to understand these tools, how to use them and how they work. If you're a Visual Studio user, there will undoubtedly be an add-in to use for \"point and click\" use. Task Runner Explorer, for example, just calls the gulp-cli and grunt-cli and surfaces the info in the GUI.\n\nHaving, a command line interface allows for -\n\n* build processes to leverage these commands for running tests harness, deployments without having to write custom code yourself\n* you can script scaffolding of new projects using your own templates or if the tool provides some, typically will adhere to a \"best practice\" for said framework\n* extending the tooling to meet your own needs or organization such as building GUI add-ins for editors etc.\n\n<img src=\"/content/images/2016/04/Screen-Shot-2016-04-27-at-3-36-06-PM-1.png\" style=\"float:right; padding:5px\" />\n\nThere are many command line tools in use, the [Azure CLI](https://azure.microsoft.com/en-us/documentation/articles/xplat-cli-install/) is another great one for scripting VMs, Websites, Scaling and more.  My point is understand what is out there, don't be afraid (I mean that in a kind way) of the shell. It's even on Windows 10 now.\n\n*T-Shirt [Learn the shell - Impress Your Friends](http://devtees.com/collections/frontpage/products/the-shell-charcoal) available at [DevTees](http://devtees.com/collections/frontpage/products/the-shell-charcoal)*\n<br clear=\"all\" />\n ","html":"<p><img src=\"https://www.tattoocoder.com/content/images/2016/04/littleguy.png\" style=\"float:right;padding:10px;\" /> 2016 is officially the year of the monkey, but I am calling it the year of the CLI (Command Line Interface).  </p>\n\n<p>One of the recent talks I gave at DevIntersection was \"Modern Web Toolchain\". Mentioning CLI Tools and \"Modern\" does raise and eyebrow or two.<br clear=\"all\" /></p>\n\n<p><br clear=\"all\" />  </p>\n\n<div style=\"text-align: center;\">  \n<iframe src=\"https://docs.google.com/presentation/d/1hjhhcKssKb2ODrun3u72UYrSaAoqPD8YF7uvuVMEFlE/embed?start=false&loop=false&delayms=3000\" frameborder=\"0\" width=\"480\" height=\"299\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>  \n</div>\n\n<p>It covers <a href=\"http://npmjs.org\">npm</a>, <a href=\"http://bower.io\">bower</a>, <a href=\"http://gulpjs.com\">grunt</a> (<a href=\"http://gruntjs.com\">http://gruntjs.com</a>), gulp etc. But more interestingly, about 50% of the talk is about command line tools; and more than just <a href=\"http://yeoman.io\">Yeoman</a>.</p>\n\n<p>There are a number of either completely new or new versions of frameworks that are in the works for a version 1.0 release in 2016 and all of which are shipping a CLI tool.</p>\n\n<ul>\n<li><a href=\"http://github.com/angular/angular-cli\">Angular 2.0</a></li>\n<li><a href=\"http://dotnet.github.io/\">.NET Core</a></li>\n<li><a href=\"http://nativescript.org\">NativeScript</a></li>\n<li><a href=\"http://aurelia.io\">Aurelia</a></li>\n</ul>\n\n<p>Just to mention a few, and don't forget <a href=\"docker.com\">Docker</a>!</p>\n\n<p>It doesn't matter if you are on OS X, Linux or Windows; it is important to understand these tools, how to use them and how they work. If you're a Visual Studio user, there will undoubtedly be an add-in to use for \"point and click\" use. Task Runner Explorer, for example, just calls the gulp-cli and grunt-cli and surfaces the info in the GUI.</p>\n\n<p>Having, a command line interface allows for -</p>\n\n<ul>\n<li>build processes to leverage these commands for running tests harness, deployments without having to write custom code yourself</li>\n<li>you can script scaffolding of new projects using your own templates or if the tool provides some, typically will adhere to a \"best practice\" for said framework</li>\n<li>extending the tooling to meet your own needs or organization such as building GUI add-ins for editors etc.</li>\n</ul>\n\n<p><img src=\"/content/images/2016/04/Screen-Shot-2016-04-27-at-3-36-06-PM-1.png\" style=\"float:right; padding:5px\" /></p>\n\n<p>There are many command line tools in use, the <a href=\"https://azure.microsoft.com/en-us/documentation/articles/xplat-cli-install/\">Azure CLI</a> is another great one for scripting VMs, Websites, Scaling and more.  My point is understand what is out there, don't be afraid (I mean that in a kind way) of the shell. It's even on Windows 10 now.</p>\n\n<p><em>T-Shirt <a href=\"http://devtees.com/collections/frontpage/products/the-shell-charcoal\">Learn the shell - Impress Your Friends</a> available at <a href=\"http://devtees.com/collections/frontpage/products/the-shell-charcoal\">DevTees</a></em>\n<br clear=\"all\" /></p>","image":"/content/images/2016/04/year-of-the-cli-image.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1461770410149,"created_by":1,"updated_at":1461786578219,"updated_by":1,"published_at":1461786032000,"published_by":1},{"id":73,"uuid":"1db048bd-b13f-4727-8b37-4306bf53f5c9","title":"How To: Visual Studio 2015 & Angular 2","slug":"how-to-vs2015-angular2","markdown":"There has been a few request I have seen lately on how to get an Angular 2 development environment going using Visual Studio 2015.\n\n<blockquote class=\"twitter-tweet\" data-partner=\"tweetdeck\"><p lang=\"en\" dir=\"ltr\">any one please guide me to video or blog, configuring Visual Studio 2015 for AngularJS 2 development using TypeScript</p>&mdash; Dhananjay Kumar (@debug_mode) <a href=\"https://twitter.com/debug_mode/status/726198164500430853\">April 29, 2016</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nMy recent post \"[Angular 2 : Getting off the Starting Line](http://tattoocoder.com/angular-2-getting-off-the-starting-line/)\" takes the Angular Team's Quickstart and adds a gulp build process, this is the project I'll use for the walkthrough.\n\nFirst, clone https://github.com/spboyer/ng2-startingline . You can either do this on the command line or within the Visual Studio 2015 Git add in.\n\nNext, **File** > **Open website** and select the folder you cloned the project to.\n![open-website](/content/images/2016/04/file_open_web_site.png)\n\nWhen you open the site, `npm restore` will automatically start to restore the dependencies from **package.json**\n![npm-restore](/content/images/2016/04/npm-restore.png)\n\nIn order to run the project, the [previous post](http://tattoocoder.com/angular-2-getting-off-the-starting-line/) states to use `npm start`.  Within the VS2015 GUI there is no built in way to do this. Luckily there is an add-in available from the gallery.\n\nUse [NPM Task Runner](https://visualstudiogallery.msdn.microsoft.com/8f2f2cbc-4da5-43ba-9de2-c9d08ade4941) Visual Studio 2015 add-in from [Mads Kristensen](https://twitter.com/mkristensen).\n\nAfter installing, and restarting Visual Studio.\n\nOpen Task Runner Explorer by right-clicking the package.json file and select Task Runner Explorer from the context menu:\n![contextimage](https://github.com/madskristensen/NpmTaskRunner/raw/master/art/open-trx.png)\n\nNow you can see all of the tasks that are declared in **package.json**\n![tskpkg](/content/images/2016/05/taskrunner-pkg.png)\n\nTo run the application. Select `start` and right click and select \"Run\". The application will compile, and launch your default browser with Browser Sync attached.  This will allow you to make changes to the **/app/*.ts** code and have it automagically compile and the browser will auto-refresh. With your changes.\n\n![running](/content/images/2016/05/2016-05-01_09-22-52.png)\n\nTo quit the process close the tab inside of Task Runner Explorer that was launched with the process. \n\nSaving the solution will provide a ***.sln** which you can then re-open the project by simply using that file instead of **File** > **Open** > **Website**. Enjoy! ","html":"<p>There has been a few request I have seen lately on how to get an Angular 2 development environment going using Visual Studio 2015.</p>\n\n<blockquote class=\"twitter-tweet\" data-partner=\"tweetdeck\"><p lang=\"en\" dir=\"ltr\">any one please guide me to video or blog, configuring Visual Studio 2015 for AngularJS 2 development using TypeScript</p>&mdash; Dhananjay Kumar (@debug_mode) <a href=\"https://twitter.com/debug_mode/status/726198164500430853\">April 29, 2016</a></blockquote>  \n\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<p>My recent post \"<a href=\"http://tattoocoder.com/angular-2-getting-off-the-starting-line/\">Angular 2 : Getting off the Starting Line</a>\" takes the Angular Team's Quickstart and adds a gulp build process, this is the project I'll use for the walkthrough.</p>\n\n<p>First, clone <a href=\"https://github.com/spboyer/ng2-startingline\">https://github.com/spboyer/ng2-startingline</a> . You can either do this on the command line or within the Visual Studio 2015 Git add in.</p>\n\n<p>Next, <strong>File</strong> > <strong>Open website</strong> and select the folder you cloned the project to. <br />\n<img src=\"/content/images/2016/04/file_open_web_site.png\" alt=\"open-website\" /></p>\n\n<p>When you open the site, <code>npm restore</code> will automatically start to restore the dependencies from <strong>package.json</strong> <br />\n<img src=\"/content/images/2016/04/npm-restore.png\" alt=\"npm-restore\" /></p>\n\n<p>In order to run the project, the <a href=\"http://tattoocoder.com/angular-2-getting-off-the-starting-line/\">previous post</a> states to use <code>npm start</code>.  Within the VS2015 GUI there is no built in way to do this. Luckily there is an add-in available from the gallery.</p>\n\n<p>Use <a href=\"https://visualstudiogallery.msdn.microsoft.com/8f2f2cbc-4da5-43ba-9de2-c9d08ade4941\">NPM Task Runner</a> Visual Studio 2015 add-in from <a href=\"https://twitter.com/mkristensen\">Mads Kristensen</a>.</p>\n\n<p>After installing, and restarting Visual Studio.</p>\n\n<p>Open Task Runner Explorer by right-clicking the package.json file and select Task Runner Explorer from the context menu: <br />\n<img src=\"https://github.com/madskristensen/NpmTaskRunner/raw/master/art/open-trx.png\" alt=\"contextimage\" /></p>\n\n<p>Now you can see all of the tasks that are declared in <strong>package.json</strong> <br />\n<img src=\"/content/images/2016/05/taskrunner-pkg.png\" alt=\"tskpkg\" /></p>\n\n<p>To run the application. Select <code>start</code> and right click and select \"Run\". The application will compile, and launch your default browser with Browser Sync attached.  This will allow you to make changes to the <strong>/app/*.ts</strong> code and have it automagically compile and the browser will auto-refresh. With your changes.</p>\n\n<p><img src=\"/content/images/2016/05/2016-05-01_09-22-52.png\" alt=\"running\" /></p>\n\n<p>To quit the process close the tab inside of Task Runner Explorer that was launched with the process. </p>\n\n<p>Saving the solution will provide a <strong>*.sln</strong> which you can then re-open the project by simply using that file instead of <strong>File</strong> > <strong>Open</strong> > <strong>Website</strong>. Enjoy! </p>","image":"/content/images/2016/05/file_open_web_site.png","featured":1,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1462032873107,"created_by":1,"updated_at":1462109159097,"updated_by":1,"published_at":1462109159097,"published_by":1},{"id":74,"uuid":"237a20fd-dec0-4436-b43f-4636917ba0b0","title":"Angular 2 : Organization Using {barrels}","slug":"angular2-barrels","markdown":"![a2barrels](https://www.shayneboyer.com/content/images/2016/05/a2barrels.png)\n\nThe import statements in Angular 2 can get pretty cumbersome if you're using a lot of services, models, directives etc in any specific component.\n\nLooking at the basic \"QuickStart\", the **app.component.ts**  doesn't seem very obtuse.\n\n```javascript\nimport {Component} from 'angular2/core';\n\n@Component({\n    selector: 'my-app',\n    template: '<h1>Quickstart</h1>'\n})\nexport class AppComponent { }\n```\n\nHowever, looking at the Tour of Heroes example:\n\n```javascript\nimport { Component } from '@angular/core';\nimport { RouteConfig, ROUTER_DIRECTIVES, ROUTER_PROVIDERS } from '@angular/router-deprecated';\n\nimport { HeroService } from './hero.service';\nimport { DashboardComponent } from './dashboard.component';\nimport { HeroesComponent } from './heroes.component';\nimport { HeroDetailComponent } from './hero-detail.component';\n\n@Component({\n  selector: 'my-app',\n  template: `\n    <h1>{{title}}</h1>\n    <nav>\n      <a [routerLink]=\"['Dashboard']\">Dashboard</a>\n      <a [routerLink]=\"['Heroes']\">Heroes</a>\n    </nav>\n    <router-outlet></router-outlet>\n  `,\n  styleUrls: ['app/app.component.css'],\n  directives: [ROUTER_DIRECTIVES],\n  providers: [\n    ROUTER_PROVIDERS,\n    HeroService\n  ]\n})\n.\n.\n.\n```\n\nYou can see how as additional parts of the application are adding to the *import* area, especially if a *clean / readable code* approach is taken.\n\nIn a recent project, adding the Material Design 2 components caused  what I call \"import noise\" so I used **barrel** to organize and reduce the impact.\n\n>**import noise** - this is an issue seen in languages where there are dependencies that need to be \"imported\", \"required\", or \"included\" and the first (1 - n) lines are non functional code.\n\n#Barrels\nIn the [Angular 2 docs](https://angular.io/docs/ts/latest/glossary.html#!#barrel), a barrel is defined as:\n\n\"*A barrel is a way to rollup exports from several modules into a single convenience module. The barrel itself is a module file that re-exports selected exports of other modules.*\"\n\n##Material Design Example\nAdding all of the components of material design takes the quickstart **app.component.ts** to this:\n\n```javascript\nimport {Component} from '@angular/core';\nimport {RouteConfig, ROUTER_DIRECTIVES, ROUTER_PROVIDERS} from '@angular/router-deprecated';\nimport {MD_SIDENAV_DIRECTIVES} from '@angular2-material/sidenav';\nimport {MdToolbar} from '@angular2-material/toolbar';\nimport {MdButton} from '@angular2-material/button';\nimport {MdCheckbox} from '@angular2-material/checkbox';\nimport {MdRadioButton} from '@angular2-material/radio';\nimport {MdRadioDispatcher} from '@angular2-material/radio/radio_dispatcher';\nimport {MdSpinner} from '@angular2-material/progress-circle';\nimport {MdProgressBar} from '@angular2-material/progress-bar';\nimport {MD_CARD_DIRECTIVES} from '@angular2-material/card';\nimport {MD_INPUT_DIRECTIVES} from '@angular2-material/input';\nimport {MD_LIST_DIRECTIVES} from '@angular2-material/list';\n\n@Component({\n  moduleId: __moduleName,\n  selector: 'my-app',\n  providers: [ROUTER_PROVIDERS, MdRadioDispatcher, MdRadioButton],\n  templateUrl: 'devsticky.component.html',\n  styleUrls: ['devsticky.component.css'],\n  directives: [ROUTER_DIRECTIVES, \n    MD_SIDENAV_DIRECTIVES,\n    MD_CARD_DIRECTIVES,\n    MdToolbar,\n    MdButton,\n    MdCheckbox,\n    MdRadioButton,\n    MdSpinner,\n    MD_INPUT_DIRECTIVES,\n    MD_LIST_DIRECTIVES,\n    MdProgressBar],\n  pipes: []\n})\n@RouteConfig([\n])\n```\n\nThat's 12 lines of just *import noise*.  Quick fix is to create another file, in this case it'll live in a folder called **/material-design** named **index.ts**\n\nSimply take all of the related modules and move the import statements from the **app.component.ts** file and mark them as \"*export * from*\"  \n\n```javascript\nexport * from '@angular2-material/toolbar';\nexport * from '@angular2-material/button';\nexport * from '@angular2-material/checkbox';\nexport * from '@angular2-material/sidenav';\nexport * from '@angular2-material/radio';\nexport * from '@angular2-material/progress-circle';\nexport * from '@angular2-material/progress-bar';\nexport * from '@angular2-material/input';\nexport * from '@angular2-material/list';\nexport * from '@angular2-material/card';\nexport * from '@angular2-material/radio/radio_dispatcher';\n```\n\nThis is an import/export of the module. Now go back to the **app.component.ts** file and just add\n\n```javascript\nimport {MdButton, MdCheckbox, MdRadioButton, MdRadioDispatcher, MdToolbar, MdSpinner, MdProgressBar, MD_CARD_DIRECTIVES, MD_INPUT_DIRECTIVES, MD_LIST_DIRECTIVES, MD_SIDENAV_DIRECTIVES} from './material-design';\n```\n\nThis takes the 12 lines to one *really long* line; which could be reduced further.\n\n```javascript\nimport * as md from './material-design';\n```\n\nThat's pretty reduced! The `* as md` imports all of the modules and aliases as `md`.  Depending on your editor, errors/warnings may show in the `directives:` portion of the component because it cannot find `MD_SIDENAV_DIRECTIVES` for instance.\n\nFix is to add the alias -> `md.MD_SIDENAV_DIRECTIVES` to this and any of the material design dependencies being used.\n\nUsing barrels will help make your code readable and maintainable. The Angular 2 source heavily uses these, browse through the code and you'll see this in places like `@angular/core`.\n\nEnjoy.","html":"<p><img src=\"https://www.shayneboyer.com/content/images/2016/05/a2barrels.png\" alt=\"a2barrels\" /></p>\n\n<p>The import statements in Angular 2 can get pretty cumbersome if you're using a lot of services, models, directives etc in any specific component.</p>\n\n<p>Looking at the basic \"QuickStart\", the <strong>app.component.ts</strong>  doesn't seem very obtuse.</p>\n\n<pre><code class=\"language-javascript\">import {Component} from 'angular2/core';\n\n@Component({\n    selector: 'my-app',\n    template: '&lt;h1&gt;Quickstart&lt;/h1&gt;'\n})\nexport class AppComponent { }  \n</code></pre>\n\n<p>However, looking at the Tour of Heroes example:</p>\n\n<pre><code class=\"language-javascript\">import { Component } from '@angular/core';  \nimport { RouteConfig, ROUTER_DIRECTIVES, ROUTER_PROVIDERS } from '@angular/router-deprecated';\n\nimport { HeroService } from './hero.service';  \nimport { DashboardComponent } from './dashboard.component';  \nimport { HeroesComponent } from './heroes.component';  \nimport { HeroDetailComponent } from './hero-detail.component';\n\n@Component({\n  selector: 'my-app',\n  template: `\n    &lt;h1&gt;{{title}}&lt;/h1&gt;\n    &lt;nav&gt;\n      &lt;a [routerLink]=\"['Dashboard']\"&gt;Dashboard&lt;/a&gt;\n      &lt;a [routerLink]=\"['Heroes']\"&gt;Heroes&lt;/a&gt;\n    &lt;/nav&gt;\n    &lt;router-outlet&gt;&lt;/router-outlet&gt;\n  `,\n  styleUrls: ['app/app.component.css'],\n  directives: [ROUTER_DIRECTIVES],\n  providers: [\n    ROUTER_PROVIDERS,\n    HeroService\n  ]\n})\n.\n.\n.\n</code></pre>\n\n<p>You can see how as additional parts of the application are adding to the <em>import</em> area, especially if a <em>clean / readable code</em> approach is taken.</p>\n\n<p>In a recent project, adding the Material Design 2 components caused  what I call \"import noise\" so I used <strong>barrel</strong> to organize and reduce the impact.</p>\n\n<blockquote>\n  <p><strong>import noise</strong> - this is an issue seen in languages where there are dependencies that need to be \"imported\", \"required\", or \"included\" and the first (1 - n) lines are non functional code.</p>\n</blockquote>\n\n<h1 id=\"barrels\">Barrels</h1>\n\n<p>In the <a href=\"https://angular.io/docs/ts/latest/glossary.html#!#barrel\">Angular 2 docs</a>, a barrel is defined as:</p>\n\n<p>\"<em>A barrel is a way to rollup exports from several modules into a single convenience module. The barrel itself is a module file that re-exports selected exports of other modules.</em>\"</p>\n\n<h2 id=\"materialdesignexample\">Material Design Example</h2>\n\n<p>Adding all of the components of material design takes the quickstart <strong>app.component.ts</strong> to this:</p>\n\n<pre><code class=\"language-javascript\">import {Component} from '@angular/core';  \nimport {RouteConfig, ROUTER_DIRECTIVES, ROUTER_PROVIDERS} from '@angular/router-deprecated';  \nimport {MD_SIDENAV_DIRECTIVES} from '@angular2-material/sidenav';  \nimport {MdToolbar} from '@angular2-material/toolbar';  \nimport {MdButton} from '@angular2-material/button';  \nimport {MdCheckbox} from '@angular2-material/checkbox';  \nimport {MdRadioButton} from '@angular2-material/radio';  \nimport {MdRadioDispatcher} from '@angular2-material/radio/radio_dispatcher';  \nimport {MdSpinner} from '@angular2-material/progress-circle';  \nimport {MdProgressBar} from '@angular2-material/progress-bar';  \nimport {MD_CARD_DIRECTIVES} from '@angular2-material/card';  \nimport {MD_INPUT_DIRECTIVES} from '@angular2-material/input';  \nimport {MD_LIST_DIRECTIVES} from '@angular2-material/list';\n\n@Component({\n  moduleId: __moduleName,\n  selector: 'my-app',\n  providers: [ROUTER_PROVIDERS, MdRadioDispatcher, MdRadioButton],\n  templateUrl: 'devsticky.component.html',\n  styleUrls: ['devsticky.component.css'],\n  directives: [ROUTER_DIRECTIVES, \n    MD_SIDENAV_DIRECTIVES,\n    MD_CARD_DIRECTIVES,\n    MdToolbar,\n    MdButton,\n    MdCheckbox,\n    MdRadioButton,\n    MdSpinner,\n    MD_INPUT_DIRECTIVES,\n    MD_LIST_DIRECTIVES,\n    MdProgressBar],\n  pipes: []\n})\n@RouteConfig([\n])\n</code></pre>\n\n<p>That's 12 lines of just <em>import noise</em>.  Quick fix is to create another file, in this case it'll live in a folder called <strong>/material-design</strong> named <strong>index.ts</strong></p>\n\n<p>Simply take all of the related modules and move the import statements from the <strong>app.component.ts</strong> file and mark them as \"<em>export * from</em>\"  </p>\n\n<pre><code class=\"language-javascript\">export * from '@angular2-material/toolbar';  \nexport * from '@angular2-material/button';  \nexport * from '@angular2-material/checkbox';  \nexport * from '@angular2-material/sidenav';  \nexport * from '@angular2-material/radio';  \nexport * from '@angular2-material/progress-circle';  \nexport * from '@angular2-material/progress-bar';  \nexport * from '@angular2-material/input';  \nexport * from '@angular2-material/list';  \nexport * from '@angular2-material/card';  \nexport * from '@angular2-material/radio/radio_dispatcher';  \n</code></pre>\n\n<p>This is an import/export of the module. Now go back to the <strong>app.component.ts</strong> file and just add</p>\n\n<pre><code class=\"language-javascript\">import {MdButton, MdCheckbox, MdRadioButton, MdRadioDispatcher, MdToolbar, MdSpinner, MdProgressBar, MD_CARD_DIRECTIVES, MD_INPUT_DIRECTIVES, MD_LIST_DIRECTIVES, MD_SIDENAV_DIRECTIVES} from './material-design';  \n</code></pre>\n\n<p>This takes the 12 lines to one <em>really long</em> line; which could be reduced further.</p>\n\n<pre><code class=\"language-javascript\">import * as md from './material-design';  \n</code></pre>\n\n<p>That's pretty reduced! The <code>* as md</code> imports all of the modules and aliases as <code>md</code>.  Depending on your editor, errors/warnings may show in the <code>directives:</code> portion of the component because it cannot find <code>MD_SIDENAV_DIRECTIVES</code> for instance.</p>\n\n<p>Fix is to add the alias -> <code>md.MD_SIDENAV_DIRECTIVES</code> to this and any of the material design dependencies being used.</p>\n\n<p>Using barrels will help make your code readable and maintainable. The Angular 2 source heavily uses these, browse through the code and you'll see this in places like <code>@angular/core</code>.</p>\n\n<p>Enjoy.</p>","image":"/content/images/2016/05/a2barrels.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1462324108780,"created_by":1,"updated_at":1479755713658,"updated_by":1,"published_at":1462327203927,"published_by":1},{"id":75,"uuid":"3d35cba9-c7f7-4166-b65a-40175dcef2c3","title":"Angular 2 : Continuous Integration to Azure using Codeship and the Angular CLI","slug":"angular2-azure-codeship-angularcli","markdown":"![header](/content/images/2016/05/pablo-1.png)\nGetting an application written is the first challenge, however having proper tests, running those tests in a continuous integration pipeline as well as deploying the application to your cloud host can be a task to setup.\n\nHere is a quickstart to create an application using the angular-cli, using [codeship](http://codeship.com) to build and run the test **using** the angular-cli and the push to a website on Azure.\n\nUsing the [angular-cli](http://cli.angular.io) we can quickly create an application by executing the commands...\n\n```\nng new quickstart-ng-cli\ncd quickstart-ng-cli\nng serve\n```\n\nOnce that is scaffolded out, create your GitHub repo and check in the source.\n\nFor a full angular-cli walk through look at my post [Angular 2: A Re-Quickstart using the CLI](http://tattoocoder.com/angular2-requickstart-using-cli/)\n\n#Codeship\nGo to [codeship.com](http://codeship.com) and login with your github account. \n\nCreate a new project, and link your github repo just created.\n![](/content/images/2016/05/newproject-cs.png)\n\nNext, configuring the tests setup.\n\nSelect \"I want to create my own commands\", and use the following script.\n\n```bash\n#install node version, 4.x is required for the angular-cli\nnvm install 4.1\n\n#install angular-cli\nnpm install angular-cli \n\n#run npm install for your project dependencies\nnpm install\n\n```\n\nUnder that script is the \"Test Pipelines\", where the script is setup to run the tests.\n\n```bash\n#serve the application adding '&' to run command in background\nng serve &\n\n#start end to end tests using protractor\nng e2e\n\n#if all of the tests pass, then build the production assets\nng build -prod\n```\n\nClick Save and go to dashboard.\n\nAt this point, your repo should be able to be cloned built and test run.  You can trigger the build be doing a commit.\n\n![testsrunning](/content/images/2016/05/tests-running.png)\n\n\n#Publishing to a Azure Website\nFor getting started with Azure, go to http://azure.com \n##Setting up the Azure Site\nCreate a new web app\n![new site](/content/images/2016/05/new-web-app.png)\n\nConfigure it to use a Local Git Repository.  We'll use this to publish to from Codeship.\n![localgit](https://acom.azurecomcdn.net/80C57D/cdn/mediahandler/docarticles/dpsmedia-prod/azure.microsoft.com/en-us/documentation/articles/app-service-deploy-local-git/20160415071221/local_git_selection.png)\n\nThe git clone url is in the Summary or Details of the application, this is the address we will need when setting up the Continuous Deployment script.\n![details](/content/images/2016/05/details.png)\n\nFinally, setup the username and password for the site in the deployment credentials sections.\n![credentials](/content/images/2016/05/credentials.png)\n\nOnce all of these steps are complete, the Azure website is setup and we can go back to Codeship to create the Continuous Deployment Script.\n\n#Codeship\nSelect the \"Set up Continuous Deployment\" option.\n![](/content/images/2016/05/cs-menu.png)\n\nThere are a number of choice of deployment options here, but not Azure.  So in this case we will be selecting a $ Custom Script. \n\nUse the following script.\n\n```bash\n#Set your git user information \ngit config user.email \"yourname@domain.com\"\ngit config user.name \"Your Name\"\n\n# $AZURE_REPO_URL needs to be set in your projects Variables section\n# and include both username and password, e.g: https://username:password@site.scm.azurewebsites.net:443/site.git\n\n# Clone Azure repository\ngit clone $AZURE_REPO_URL ~/azure\n\n# change into the local azure directory\ncd ~/azure\n\n# delete local repository azure contents\nrm -rf *\n\n# Copy /dist folder contents (our application)\ncp -rf ~/clone/dist/* .\n\ngit add -A\ngit commit --all --author \"$CI_COMMITTER_NAME <$CI_COMMITTER_EMAIL>\" --message \"$CI_MESSAGE ($CI_BUILD_URL)\"\n\n# Push changes to Azure\ngit push origin master\n```\n\n\n\nThere is an ENVIRONMENT variable that needs to be set in Codeship for this project. You will need to set the `AZURE_REPO_URL` for the Azure website.\n\n![env](/content/images/2016/05/env.png)\n\nThe format for the url will be:\n\nhttps://**username**:**password**@site.scm.azurewebsites.net:443/site.git\n\nIf you have any special characters in your password, be sure to escape them with \\ .\n\n#Testing Deployment\nSelect your project (top right of the screen), and you'll see the list of the builds.  Trigger the build again by clicking the circular arrow. and then selecting/clicking the \"row\" of that build to see the output.\n\nOnce the build starts, the output from the build and test will show in the console, and any Azure related commands will echo as well as `remote:`\n\n![deployment_script](/content/images/2016/05/deployment_script.png)\n\nIf you go to the Azure Portal and navigate to \n\n**yourapp** > Settings > Deployments > Deployment Details \n\nand select a log, you'll see the same info that was in the codeship output.\n\n![azure_log](/content/images/2016/05/deploy_log_azure.png)\n\nWhen the deployment is complete, click on the website url and you'll be presented with the application.\n\n![quickstart](/content/images/2016/05/quickstart.png)\n\n\nEnjoy!\n\nGithub repo for these : https://github.com/spboyer/quickstart-ng-cli\n\n\n\n\n\n","html":"<p><img src=\"/content/images/2016/05/pablo-1.png\" alt=\"header\" />\nGetting an application written is the first challenge, however having proper tests, running those tests in a continuous integration pipeline as well as deploying the application to your cloud host can be a task to setup.</p>\n\n<p>Here is a quickstart to create an application using the angular-cli, using <a href=\"http://codeship.com\">codeship</a> to build and run the test <strong>using</strong> the angular-cli and the push to a website on Azure.</p>\n\n<p>Using the <a href=\"http://cli.angular.io\">angular-cli</a> we can quickly create an application by executing the commands...</p>\n\n<pre><code>ng new quickstart-ng-cli  \ncd quickstart-ng-cli  \nng serve  \n</code></pre>\n\n<p>Once that is scaffolded out, create your GitHub repo and check in the source.</p>\n\n<p>For a full angular-cli walk through look at my post <a href=\"http://tattoocoder.com/angular2-requickstart-using-cli/\">Angular 2: A Re-Quickstart using the CLI</a></p>\n\n<h1 id=\"codeship\">Codeship</h1>\n\n<p>Go to <a href=\"http://codeship.com\">codeship.com</a> and login with your github account. </p>\n\n<p>Create a new project, and link your github repo just created. <br />\n<img src=\"/content/images/2016/05/newproject-cs.png\" alt=\"\" /></p>\n\n<p>Next, configuring the tests setup.</p>\n\n<p>Select \"I want to create my own commands\", and use the following script.</p>\n\n<pre><code class=\"language-bash\">#install node version, 4.x is required for the angular-cli\nnvm install 4.1\n\n#install angular-cli\nnpm install angular-cli \n\n#run npm install for your project dependencies\nnpm install\n</code></pre>\n\n<p>Under that script is the \"Test Pipelines\", where the script is setup to run the tests.</p>\n\n<pre><code class=\"language-bash\">#serve the application adding '&amp;' to run command in background\nng serve &amp;\n\n#start end to end tests using protractor\nng e2e\n\n#if all of the tests pass, then build the production assets\nng build -prod  \n</code></pre>\n\n<p>Click Save and go to dashboard.</p>\n\n<p>At this point, your repo should be able to be cloned built and test run.  You can trigger the build be doing a commit.</p>\n\n<p><img src=\"/content/images/2016/05/tests-running.png\" alt=\"testsrunning\" /></p>\n\n<h1 id=\"publishingtoaazurewebsite\">Publishing to a Azure Website</h1>\n\n<p>For getting started with Azure, go to <a href=\"http://azure.com\">http://azure.com</a>  </p>\n\n<h2 id=\"settinguptheazuresite\">Setting up the Azure Site</h2>\n\n<p>Create a new web app <br />\n<img src=\"/content/images/2016/05/new-web-app.png\" alt=\"new site\" /></p>\n\n<p>Configure it to use a Local Git Repository.  We'll use this to publish to from Codeship. <br />\n<img src=\"https://acom.azurecomcdn.net/80C57D/cdn/mediahandler/docarticles/dpsmedia-prod/azure.microsoft.com/en-us/documentation/articles/app-service-deploy-local-git/20160415071221/local_git_selection.png\" alt=\"localgit\" /></p>\n\n<p>The git clone url is in the Summary or Details of the application, this is the address we will need when setting up the Continuous Deployment script. <br />\n<img src=\"/content/images/2016/05/details.png\" alt=\"details\" /></p>\n\n<p>Finally, setup the username and password for the site in the deployment credentials sections. <br />\n<img src=\"/content/images/2016/05/credentials.png\" alt=\"credentials\" /></p>\n\n<p>Once all of these steps are complete, the Azure website is setup and we can go back to Codeship to create the Continuous Deployment Script.</p>\n\n<h1 id=\"codeship\">Codeship</h1>\n\n<p>Select the \"Set up Continuous Deployment\" option. <br />\n<img src=\"/content/images/2016/05/cs-menu.png\" alt=\"\" /></p>\n\n<p>There are a number of choice of deployment options here, but not Azure.  So in this case we will be selecting a $ Custom Script. </p>\n\n<p>Use the following script.</p>\n\n<pre><code class=\"language-bash\">#Set your git user information \ngit config user.email \"yourname@domain.com\"  \ngit config user.name \"Your Name\"\n\n# $AZURE_REPO_URL needs to be set in your projects Variables section\n# and include both username and password, e.g: https://username:password@site.scm.azurewebsites.net:443/site.git\n\n# Clone Azure repository\ngit clone $AZURE_REPO_URL ~/azure\n\n# change into the local azure directory\ncd ~/azure\n\n# delete local repository azure contents\nrm -rf *\n\n# Copy /dist folder contents (our application)\ncp -rf ~/clone/dist/* .\n\ngit add -A  \ngit commit --all --author \"$CI_COMMITTER_NAME &lt;$CI_COMMITTER_EMAIL&gt;\" --message \"$CI_MESSAGE ($CI_BUILD_URL)\"\n\n# Push changes to Azure\ngit push origin master  \n</code></pre>\n\n<p>There is an ENVIRONMENT variable that needs to be set in Codeship for this project. You will need to set the <code>AZURE_REPO_URL</code> for the Azure website.</p>\n\n<p><img src=\"/content/images/2016/05/env.png\" alt=\"env\" /></p>\n\n<p>The format for the url will be:</p>\n\n<p>https://<strong>username</strong>:<strong>password</strong>@site.scm.azurewebsites.net:443/site.git</p>\n\n<p>If you have any special characters in your password, be sure to escape them with \\ .</p>\n\n<h1 id=\"testingdeployment\">Testing Deployment</h1>\n\n<p>Select your project (top right of the screen), and you'll see the list of the builds.  Trigger the build again by clicking the circular arrow. and then selecting/clicking the \"row\" of that build to see the output.</p>\n\n<p>Once the build starts, the output from the build and test will show in the console, and any Azure related commands will echo as well as <code>remote:</code></p>\n\n<p><img src=\"/content/images/2016/05/deployment_script.png\" alt=\"deployment_script\" /></p>\n\n<p>If you go to the Azure Portal and navigate to </p>\n\n<p><strong>yourapp</strong> > Settings > Deployments > Deployment Details </p>\n\n<p>and select a log, you'll see the same info that was in the codeship output.</p>\n\n<p><img src=\"/content/images/2016/05/deploy_log_azure.png\" alt=\"azure_log\" /></p>\n\n<p>When the deployment is complete, click on the website url and you'll be presented with the application.</p>\n\n<p><img src=\"/content/images/2016/05/quickstart.png\" alt=\"quickstart\" /></p>\n\n<p>Enjoy!</p>\n\n<p>Github repo for these : <a href=\"https://github.com/spboyer/quickstart-ng-cli\">https://github.com/spboyer/quickstart-ng-cli</a></p>","image":"/content/images/2016/05/pablo.png","featured":1,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1463095231841,"created_by":1,"updated_at":1463591015612,"updated_by":1,"published_at":1463102687557,"published_by":1},{"id":76,"uuid":"ae2002e6-7c4d-4b39-9a06-0326e08049bd","title":".NET Core Slack Channel Sign Up","slug":"aspnet-slack-sign-up","markdown":"This will be the official sign up page for the **.NET Core** Slack Channel. Please share this page with your communities.  Thanks for your participation! Core team members and community members have joined, over 200 now in the last 24 hrs!\n\n\n<iframe src=\"http://spboyer.me/aspnetcoreslack\" style=\"border:0px #FFFFFF none;\" name=\"myiFrame\" scrolling=\"no\" frameborder=\"1\" marginheight=\"0px\" marginwidth=\"0px\" height=\"550px\" width=\"100%\"></iframe>\n\n\n[The post](http://tattoocoder.com/asp-net-core-slack-community/) on why I like it, why it's important.\n","html":"<p>This will be the official sign up page for the <strong>.NET Core</strong> Slack Channel. Please share this page with your communities.  Thanks for your participation! Core team members and community members have joined, over 200 now in the last 24 hrs!</p>\n\n<iframe src=\"http://spboyer.me/aspnetcoreslack\" style=\"border:0px #FFFFFF none;\" name=\"myiFrame\" scrolling=\"no\" frameborder=\"1\" marginheight=\"0px\" marginwidth=\"0px\" height=\"550px\" width=\"100%\"></iframe>\n\n<p><a href=\"http://tattoocoder.com/asp-net-core-slack-community/\">The post</a> on why I like it, why it's important.</p>","image":"/content/images/2016/05/dotnetslack.png","featured":1,"page":0,"status":"published","language":"en_US","meta_title":".NET Core Slack Channel Sign Up Page","meta_description":".NET Core Slack Channel Sign Up. Get your invite for the community channel here, created by Shayne Boyer @spboyer on twitter.","author_id":1,"created_at":1463153076770,"created_by":1,"updated_at":1463239123689,"updated_by":1,"published_at":1463153379457,"published_by":1},{"id":77,"uuid":"6532be1a-e59a-47c8-b458-c3b70e83db85","title":"Angular 2 : A Re-Quickstart using the CLI","slug":"angular2-requickstart-using-cli","markdown":"![header_image](/content/images/2016/05/pablo--1-.png)\nThe Angular team created a [quickstart](https://github.com/angular/quickstart) which is a great starter project template and I've covered that in another [post]((http://tattoocoder.com/angular-2-getting-off-the-starting-line/)) which shows adding an express server to that to get you up and running with a more complete quickstart at [Angular 2 : Getting Off the Starting Line](http://tattoocoder.com/angular-2-getting-off-the-starting-line/). Both are great starters, but **static** templates.\n\nThis *Re-Quickstart** is using the CLI (command line interface) to create the same application in a fraction of the time. \n\n\n###angular-cli\nThe angular-cli is the new command line interface for creating Angular 2 applications. Well, It's much more than that. It creates applications, follows the best practice or approved style guide, sets up the tests, runs the tests and much more. Head over to [cli.angular.io](cli.angular.io) for more info or visit the [github repo][http://github.com/angular/angular-cli].\n\n#####Installation \n```\nnpm install -g angular-cli\n```\n\n##Creating the application\n```bash\nng new quickstart-ng-cli\n```\n\nThis command will scaffold the application, install the dependencies from npm as well as init the local github repo.  \n\nNext, you can build and serve the application locally by running the `serve` command which compiles the resources to to **/dist** and starts a local web server on **http://localhost:4200**\n\n```bash\nng serve\n```\n\n![quickstart-localhost](/content/images/2016/05/qs-local.png)\n\n#####Testing\nIn the quickstart, there were pre-requisites for webdriver, some *minor* setup needed for protractor and naming structures.\n\nWith the CLI it is all \"gift with purchase\", all included.\n\nThe tests that will be run using protractor, you will want to run the following commands.\n\n```bash\n#adding the ampersand runs the command in\n#the background\nng serve &\n#start protractor\nng e2e\n```\nYou will see the default browser start and run the test and then complete with a success. Hit ctrl+c to shutdown the commands if they don't automatically.\n\nThat covers the quickstart from a CLI perspective. One command `ng new <yourappname>` to create and `ng serve` to build and serve it up.\n\nThere is a lot of baked in functionality within the CLI such as adding routes, components, directives etc., full documentation is available at http://github.com/angular/angular-cli/README.md or http://cli.angular.io and give the **Learn Clingon** by Mike Brocchi talk a watch below.\n\n<iframe width=\"854\" height=\"480\" src=\"https://www.youtube.com/embed/wHZe6gGI5RY\" frameborder=\"0\" allowfullscreen></iframe>\n\n\n#####Related Posts\n\n* [Continuous Integration to Azure using Codeship and the Angular CLI](http://tattoocoder.com/angular2-azure-codeship-angularcli)\n* [Angular 2 : Giving Your CLI a Server](http://tattoocoder.com/angular2-giving-your-cli-server)\n* Github repo for these : https://github.com/spboyer/quickstart-ng-cli","html":"<p><img src=\"/content/images/2016/05/pablo--1-.png\" alt=\"header_image\" />\nThe Angular team created a <a href=\"https://github.com/angular/quickstart\">quickstart</a> which is a great starter project template and I've covered that in another <a href=\"(http://tattoocoder.com/angular-2-getting-off-the-starting-line/)\">post</a> which shows adding an express server to that to get you up and running with a more complete quickstart at <a href=\"http://tattoocoder.com/angular-2-getting-off-the-starting-line/\">Angular 2 : Getting Off the Starting Line</a>. Both are great starters, but <strong>static</strong> templates.</p>\n\n<p>This <em>Re-Quickstart</em>* is using the CLI (command line interface) to create the same application in a fraction of the time. </p>\n\n<h3 id=\"angularcli\">angular-cli</h3>\n\n<p>The angular-cli is the new command line interface for creating Angular 2 applications. Well, It's much more than that. It creates applications, follows the best practice or approved style guide, sets up the tests, runs the tests and much more. Head over to <a href=\"cli.angular.io\">cli.angular.io</a> for more info or visit the [github repo][http://github.com/angular/angular-cli].</p>\n\n<h5 id=\"installation\">Installation</h5>\n\n<pre><code>npm install -g angular-cli  \n</code></pre>\n\n<h2 id=\"creatingtheapplication\">Creating the application</h2>\n\n<pre><code class=\"language-bash\">ng new quickstart-ng-cli  \n</code></pre>\n\n<p>This command will scaffold the application, install the dependencies from npm as well as init the local github repo.  </p>\n\n<p>Next, you can build and serve the application locally by running the <code>serve</code> command which compiles the resources to to <strong>/dist</strong> and starts a local web server on <strong><a href=\"http://localhost:4200\">http://localhost:4200</a></strong></p>\n\n<pre><code class=\"language-bash\">ng serve  \n</code></pre>\n\n<p><img src=\"/content/images/2016/05/qs-local.png\" alt=\"quickstart-localhost\" /></p>\n\n<h5 id=\"testing\">Testing</h5>\n\n<p>In the quickstart, there were pre-requisites for webdriver, some <em>minor</em> setup needed for protractor and naming structures.</p>\n\n<p>With the CLI it is all \"gift with purchase\", all included.</p>\n\n<p>The tests that will be run using protractor, you will want to run the following commands.</p>\n\n<pre><code class=\"language-bash\">#adding the ampersand runs the command in\n#the background\nng serve &amp;  \n#start protractor\nng e2e  \n</code></pre>\n\n<p>You will see the default browser start and run the test and then complete with a success. Hit ctrl+c to shutdown the commands if they don't automatically.</p>\n\n<p>That covers the quickstart from a CLI perspective. One command <code>ng new &lt;yourappname&gt;</code> to create and <code>ng serve</code> to build and serve it up.</p>\n\n<p>There is a lot of baked in functionality within the CLI such as adding routes, components, directives etc., full documentation is available at <a href=\"http://github.com/angular/angular-cli/README.md\">http://github.com/angular/angular-cli/README.md</a> or <a href=\"http://cli.angular.io\">http://cli.angular.io</a> and give the <strong>Learn Clingon</strong> by Mike Brocchi talk a watch below.</p>\n\n<iframe width=\"854\" height=\"480\" src=\"https://www.youtube.com/embed/wHZe6gGI5RY\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h5 id=\"relatedposts\">Related Posts</h5>\n\n<ul>\n<li><a href=\"http://tattoocoder.com/angular2-azure-codeship-angularcli\">Continuous Integration to Azure using Codeship and the Angular CLI</a></li>\n<li><a href=\"http://tattoocoder.com/angular2-giving-your-cli-server\">Angular 2 : Giving Your CLI a Server</a></li>\n<li>Github repo for these : <a href=\"https://github.com/spboyer/quickstart-ng-cli\">https://github.com/spboyer/quickstart-ng-cli</a></li>\n</ul>","image":"/content/images/2016/05/pablo--1-.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1463534522646,"created_by":1,"updated_at":1479755731796,"updated_by":1,"published_at":1463533200000,"published_by":1},{"id":78,"uuid":"90262e7a-7137-438c-99e3-1315d6c0c632","title":"Angular 2 : Giving Your CLI a Server","slug":"angular2-giving-your-cli-server","markdown":"![server-pic](/content/images/2016/05/pablo--2-.png)\n\n*...be sure to read [Angular 2:Re-Quickstart with the CLI](http://tattoocoder.com/angular2-requickstart-using-cli/)*\n\nAlthough the CLI includes a number of great features, the deployment of the application is a story or issue that is still under discussion ([Production deploy #326](https://github.com/angular/angular-cli/issues/326)).\n\nWhat is the right server, what are the features etc.\n\nA simple static server for Angular applications should be able to handle a few things:\n\n* static files - like that pesky fav.ico, images, css, and javascript files \n* deep links - routing to specific portion of our SPA \n* maybe something simple like compression \n\nIn this case, node.js using Express fits the bill. Let's see how to add it to the quickstart generated in the previous post.\n\nFirst, grab the index.js and package.json files from the gist https://gist.github.com/spboyer/1aa7ac47bf0631a30d9eafd7b1af1186\n\n```javascript\nvar express = require('express'),\n    path = require('path'),\n    fs = require('fs');\n\nvar app = express();\nvar staticRoot = __dirname + '/';\napp.set('port', (process.env.PORT || 3000));\napp.use(express.static(staticRoot));\n\napp.use(function(req, res, next){\n    // if the request is not html then move along\n    var accept = req.accepts('html', 'json', 'xml');\n    if(accept !== 'html'){\n        return next();\n    }\n\n    // if the request has a '.' assume that it's for a file, move along\n    var ext = path.extname(req.path);\n    if (ext !== ''){\n        return next();\n    }\n    fs.createReadStream(staticRoot + 'index.html').pipe(res);\n});\n\napp.listen(app.get('port'), function() {\n    console.log('app running on port', app.get('port'));\n});\n```\n\nand create them (server.js, project.json) in a folder in the root of the project called `node-server`.\n\nNext, we will need to add a few npm scripts to the **package.json** for a custom build script.\n\nAdd the following commands:\n```bash\n\"build:nodeserver\": \"ng build && cp nodeserver\\/* dist\",\n\"build:nodeserver-prod\": \"ng build -prod && cp nodeserver\\/* dist\",\n\"serve-build\" : \"npm run build:nodeserver && cd dist && node index.js\",\n\"serve-build-prod\": \"npm run build:nodeserver-prod && cd dist && node index.js\" \n```\n\nThe first command runs the normal `ng build` command which builds the application and places the assets into the **/dist** directory followed by a **copy** command to copy the **/node-server** files to the **/dist** folder.\n\nThe second command does the same, but passing the `-prod` option tells the CLI to bundle the application assets.\n\nExecute the command using `npm run build:nodeserver` or `npm run build:nodeserver-prod`\n\nFinally the last two commands run the application using the node server from the local machine in either dev or production mode. Browse to http://localhost:3000 to see the app running from node.js\n\nExecute the command using `npm run serve-build` or `npm run serve-build-prod`\n\n###Bonus: Adding to CI Process\nIn the [Angular 2 : Continuous Integration to Azure using Codeship and the Angular CLI](http://tattoocoder.com/angular2-azure-codeship-angularcli) post, it showed how to use the CLI and Codeship to push an app to Azure.\n\nIn that scenario, the application is being served by IIS; a perfectly and very performant static server.  However, the deep link issue is still an issue. With adding the node.js/express server above and adjusting the **\"Testing Pipelines\"** script from \n\n```bash\n#serve the application adding '&' to run command in background\nng serve &\n\n#start end to end tests using protractor\nng e2e\n\n#if all of the tests pass, then build the production assets\nng build -prod\n```\n\nto \n\n```bash\n#serve the application adding '&' to run command in background\nng serve &\n\n#start end to end tests using protractor\nng e2e\n\n#if all of the tests pass, then build the production assets\nnpm run build:nodeserver-prod\n```\n\nIt would include the node server in the **/dist** folder when pushing to Azure.  Then, Kudu (Azure's deployment engine), would see the **package.json** file in the **/dist** folder and consequently run `npm install` completing the node application install and thus running a more complete server.\n\nRelated Github repo: http://github.com/spboyer/quickstart-ng-cli","html":"<p><img src=\"/content/images/2016/05/pablo--2-.png\" alt=\"server-pic\" /></p>\n\n<p><em>...be sure to read <a href=\"http://tattoocoder.com/angular2-requickstart-using-cli/\">Angular 2:Re-Quickstart with the CLI</a></em></p>\n\n<p>Although the CLI includes a number of great features, the deployment of the application is a story or issue that is still under discussion (<a href=\"https://github.com/angular/angular-cli/issues/326\">Production deploy #326</a>).</p>\n\n<p>What is the right server, what are the features etc.</p>\n\n<p>A simple static server for Angular applications should be able to handle a few things:</p>\n\n<ul>\n<li>static files - like that pesky fav.ico, images, css, and javascript files </li>\n<li>deep links - routing to specific portion of our SPA </li>\n<li>maybe something simple like compression </li>\n</ul>\n\n<p>In this case, node.js using Express fits the bill. Let's see how to add it to the quickstart generated in the previous post.</p>\n\n<p>First, grab the index.js and package.json files from the gist <a href=\"https://gist.github.com/spboyer/1aa7ac47bf0631a30d9eafd7b1af1186\">https://gist.github.com/spboyer/1aa7ac47bf0631a30d9eafd7b1af1186</a></p>\n\n<pre><code class=\"language-javascript\">var express = require('express'),  \n    path = require('path'),\n    fs = require('fs');\n\nvar app = express();  \nvar staticRoot = __dirname + '/';  \napp.set('port', (process.env.PORT || 3000));  \napp.use(express.static(staticRoot));\n\napp.use(function(req, res, next){  \n    // if the request is not html then move along\n    var accept = req.accepts('html', 'json', 'xml');\n    if(accept !== 'html'){\n        return next();\n    }\n\n    // if the request has a '.' assume that it's for a file, move along\n    var ext = path.extname(req.path);\n    if (ext !== ''){\n        return next();\n    }\n    fs.createReadStream(staticRoot + 'index.html').pipe(res);\n});\n\napp.listen(app.get('port'), function() {  \n    console.log('app running on port', app.get('port'));\n});\n</code></pre>\n\n<p>and create them (server.js, project.json) in a folder in the root of the project called <code>node-server</code>.</p>\n\n<p>Next, we will need to add a few npm scripts to the <strong>package.json</strong> for a custom build script.</p>\n\n<p>Add the following commands:  </p>\n\n<pre><code class=\"language-bash\">\"build:nodeserver\": \"ng build &amp;&amp; cp nodeserver\\/* dist\",\n\"build:nodeserver-prod\": \"ng build -prod &amp;&amp; cp nodeserver\\/* dist\",\n\"serve-build\" : \"npm run build:nodeserver &amp;&amp; cd dist &amp;&amp; node index.js\",\n\"serve-build-prod\": \"npm run build:nodeserver-prod &amp;&amp; cd dist &amp;&amp; node index.js\" \n</code></pre>\n\n<p>The first command runs the normal <code>ng build</code> command which builds the application and places the assets into the <strong>/dist</strong> directory followed by a <strong>copy</strong> command to copy the <strong>/node-server</strong> files to the <strong>/dist</strong> folder.</p>\n\n<p>The second command does the same, but passing the <code>-prod</code> option tells the CLI to bundle the application assets.</p>\n\n<p>Execute the command using <code>npm run build:nodeserver</code> or <code>npm run build:nodeserver-prod</code></p>\n\n<p>Finally the last two commands run the application using the node server from the local machine in either dev or production mode. Browse to <a href=\"http://localhost:3000\">http://localhost:3000</a> to see the app running from node.js</p>\n\n<p>Execute the command using <code>npm run serve-build</code> or <code>npm run serve-build-prod</code></p>\n\n<h3 id=\"bonusaddingtociprocess\">Bonus: Adding to CI Process</h3>\n\n<p>In the <a href=\"http://tattoocoder.com/angular2-azure-codeship-angularcli\">Angular 2 : Continuous Integration to Azure using Codeship and the Angular CLI</a> post, it showed how to use the CLI and Codeship to push an app to Azure.</p>\n\n<p>In that scenario, the application is being served by IIS; a perfectly and very performant static server.  However, the deep link issue is still an issue. With adding the node.js/express server above and adjusting the <strong>\"Testing Pipelines\"</strong> script from </p>\n\n<pre><code class=\"language-bash\">#serve the application adding '&amp;' to run command in background\nng serve &amp;\n\n#start end to end tests using protractor\nng e2e\n\n#if all of the tests pass, then build the production assets\nng build -prod  \n</code></pre>\n\n<p>to </p>\n\n<pre><code class=\"language-bash\">#serve the application adding '&amp;' to run command in background\nng serve &amp;\n\n#start end to end tests using protractor\nng e2e\n\n#if all of the tests pass, then build the production assets\nnpm run build:nodeserver-prod  \n</code></pre>\n\n<p>It would include the node server in the <strong>/dist</strong> folder when pushing to Azure.  Then, Kudu (Azure's deployment engine), would see the <strong>package.json</strong> file in the <strong>/dist</strong> folder and consequently run <code>npm install</code> completing the node application install and thus running a more complete server.</p>\n\n<p>Related Github repo: <a href=\"http://github.com/spboyer/quickstart-ng-cli\">http://github.com/spboyer/quickstart-ng-cli</a></p>","image":"/content/images/2016/05/pablo--2-.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1463537849846,"created_by":1,"updated_at":1479755670388,"updated_by":1,"published_at":1463540400000,"published_by":1},{"id":79,"uuid":"9613ccc9-4993-4e62-98e8-f6ddb97cf88b","title":"ASP.NET Core: Watching Code","slug":"asp-net-core-watching-code","markdown":"![dotnet-watchingcode](/content/images/2016/05/dotnet-watchingcode.png)\n\nBeing able to edit code and see the changes on the fly is a big advantage when developing applications with all of the \"moving parts\" in today's tech stack.\n\nSimply hitting F5 doesn't cut it anymore. Everything needs to be compiled, minified, uglified, or transpiled to get your app to show up right.\n\nOn the node.js side of the dev stack I have been using [nodemon](https://github.com/remy/nodemon) to watch files for changes and execute whatever functions need to be run and restart the node server for my client apps during development.\n\n```javascript\nnodemon ./server.js localhost 8080\n```\n\nEarly on in the ASP.NET Core days, beta 3, I creates a nuget package called [KMon](https://github.com/henriksen/kmon) that used nodemon under the covers to watch files and restart the kestrel server.\n\n###dotnet-watch\nNow there is **dotnet-watch**, described on the [github repo](https://github.com/aspnet/dotnet-watch) page as \n\n\"*a file watcher for dotnet that restarts the specified application when changes in the source code are detected*\"\n\nInstallation is simple, just add the following to your project.json file.\n\n```javascript\n\"tools\": {\n        \"Microsoft.DotNet.Watcher.Tools\": {\n            \"version\": \"1.0.0-*\",\n            \"imports\": \"portable-net451+win8\"\n        }\n    },\n```\n\nand `dotnet restore` to make sure that you can resolve the tool from NuGet.\n\nNext, to run the application with watch \n\n```bash\n$ dotnet watch\n```\n\nAs an example output for my [ng2-kestrel-appserver](http://tattoocoder.com/kestrel-as-a-static-server-for-angular/) application\n\n```bash\nDotNetWatcher] info: Running dotnet with the following arguments: run\n[DotNetWatcher] info: dotnet process id: 27477\nProject ng2-kestrel-appserver (.NETCoreApp,Version=v1.0) will be compiled because inputs were modified\nCompiling ng2-kestrel-appserver for .NETCoreApp,Version=v1.0\nCompilation succeeded.\n    0 Warning(s)\n    0 Error(s)\nTime elapsed 00:00:04.5432721\n\ndbug: Microsoft.AspNetCore.Hosting.Internal.WebHost[3]\n      Hosting starting\ndbug: Microsoft.AspNetCore.Hosting.Internal.WebHost[4]\n      Hosting started\nHosting environment: Production\nContent root path: /ng2-kestrel-appserver\nNow listening on: http://localhost:5000\nApplication started. Press Ctrl+C to shut down.\n```\n\nThe application starts up on the defined http://url:port, in this case http://localhost:5000.  If a change is made to any of the C# application files, the *watcher* detects the change and restarts the application.\n\n*removed unecessary usings from Startup.cs*\n\n```bash\n[DotNetWatcher] info: File changed: \n/ng2-kestrel-appserver/Startup.cs\n[DotNetWatcher] info: Running dotnet with the following arguments: run\n[DotNetWatcher] info: dotnet process id: 27610\nProject ng2-kestrel-appserver (.NETCoreApp,Version=v1.0) will be compiled because inputs were modified\nCompiling ng2-kestrel-appserver for .NETCoreApp,Version=v1.0\nCompilation succeeded.\n    0 Warning(s)\n    0 Error(s)\nTime elapsed 00:00:04.4233033\n```\n\nThe re-compiliation is reasonably fast, depending on the change and size of the application. \n\nI like this option as it's a core .NET option but is limited to just .NET.\n\nIf you are building an application that is composed of C#, TypeScript and/or other file types that need compilation etc or need some other transformative process; combining the `dotnet` command(s) and npm scripts may be another option.\n\n###nodemon w/dotnet\nPrevious to **dotnet-watch** being available on OSX and Linux, I used nodemon with `dnx`, now `dotnet`, inside npm scripts to start and run my applications when in dev mode.\n\nFirst add a **package.json** file to the root of your project, you may already have one depending on the project type. \n\nThis is the **package.json** from the [ng2-kestrel-appserver](http://tattoocoder.com/kestrel-as-a-static-server-for-angular/) project mentioned before.\n\n```javascript\n{\n\"name\": \"ng2-kestrel-appserver\",\n\"version\": \"0.0.0\",\n\"devDependencies\": {\n    \"nodemon\": \"1.9.1\",\n    \"gulp\": \"3.9.1\",\n    \"gulp-cli\": \"1.2.1\"\n},\n\"scripts\": {\n     \"start\" : \"nodemon --ignore htm,html,js,json --ignore obj/ --ignore bin/ --ext cs --delay 1000ms --exec \\\"dotnet run ASPNETCORE_ENVIRONMENT=Development\\\" -V\"\n   }\n}\n``` \n\nUsing **nodemon** \n\n* ignore htm, html and javascript files as they do not need any work to be done if changed (refresh handles)\n* ignore **/bin** and **/obj** folders\n* **--ext cs** : sets the process to watch file extension *.cs* for changes\n* **--delay 1000 ms** : way 1 second before restarting\n* **--exec dotnet run ASPNETCORE_ENVIRONMENT=Development** : start this command each time\n\nTo kickoff or start the application, use the following command \n\n```bash\n$ npm start\n```\n\nIf we needed to compile TypeScript as well, for example, adding the TypeScript file type to the `--ext` and the compiler to the `--exec` would accomplish that in tandem. \n\ni.e.\n\n```bash\n \"start\" : \"nodemon --ignore htm,html,js,json --ignore obj/ --ignore bin/ --ext cs,ts --delay 1000ms --exec \\\"tsc && dotnet run ASPNETCORE_ENVIRONMENT=Development\\\" -V\"\n```\n\nCheckout the [ng2-kestrel-appserver](http://tattoocoder.com/kestrel-as-a-static-server-for-angular/) project and the [github repo](https://github.com/spboyer/ng2-kestrel-appserver).\n\nEnjoy!","html":"<p><img src=\"/content/images/2016/05/dotnet-watchingcode.png\" alt=\"dotnet-watchingcode\" /></p>\n\n<p>Being able to edit code and see the changes on the fly is a big advantage when developing applications with all of the \"moving parts\" in today's tech stack.</p>\n\n<p>Simply hitting F5 doesn't cut it anymore. Everything needs to be compiled, minified, uglified, or transpiled to get your app to show up right.</p>\n\n<p>On the node.js side of the dev stack I have been using <a href=\"https://github.com/remy/nodemon\">nodemon</a> to watch files for changes and execute whatever functions need to be run and restart the node server for my client apps during development.</p>\n\n<pre><code class=\"language-javascript\">nodemon ./server.js localhost 8080  \n</code></pre>\n\n<p>Early on in the ASP.NET Core days, beta 3, I creates a nuget package called <a href=\"https://github.com/henriksen/kmon\">KMon</a> that used nodemon under the covers to watch files and restart the kestrel server.</p>\n\n<h3 id=\"dotnetwatch\">dotnet-watch</h3>\n\n<p>Now there is <strong>dotnet-watch</strong>, described on the <a href=\"https://github.com/aspnet/dotnet-watch\">github repo</a> page as </p>\n\n<p>\"<em>a file watcher for dotnet that restarts the specified application when changes in the source code are detected</em>\"</p>\n\n<p>Installation is simple, just add the following to your project.json file.</p>\n\n<pre><code class=\"language-javascript\">\"tools\": {\n        \"Microsoft.DotNet.Watcher.Tools\": {\n            \"version\": \"1.0.0-*\",\n            \"imports\": \"portable-net451+win8\"\n        }\n    },\n</code></pre>\n\n<p>and <code>dotnet restore</code> to make sure that you can resolve the tool from NuGet.</p>\n\n<p>Next, to run the application with watch </p>\n\n<pre><code class=\"language-bash\">$ dotnet watch\n</code></pre>\n\n<p>As an example output for my <a href=\"http://tattoocoder.com/kestrel-as-a-static-server-for-angular/\">ng2-kestrel-appserver</a> application</p>\n\n<pre><code class=\"language-bash\">DotNetWatcher] info: Running dotnet with the following arguments: run  \n[DotNetWatcher] info: dotnet process id: 27477\nProject ng2-kestrel-appserver (.NETCoreApp,Version=v1.0) will be compiled because inputs were modified  \nCompiling ng2-kestrel-appserver for .NETCoreApp,Version=v1.0  \nCompilation succeeded.  \n    0 Warning(s)\n    0 Error(s)\nTime elapsed 00:00:04.5432721\n\ndbug: Microsoft.AspNetCore.Hosting.Internal.WebHost[3]  \n      Hosting starting\ndbug: Microsoft.AspNetCore.Hosting.Internal.WebHost[4]  \n      Hosting started\nHosting environment: Production  \nContent root path: /ng2-kestrel-appserver  \nNow listening on: http://localhost:5000  \nApplication started. Press Ctrl+C to shut down.  \n</code></pre>\n\n<p>The application starts up on the defined <a href=\"http://url:port\">http://url:port</a>, in this case <a href=\"http://localhost:5000\">http://localhost:5000</a>.  If a change is made to any of the C# application files, the <em>watcher</em> detects the change and restarts the application.</p>\n\n<p><em>removed unecessary usings from Startup.cs</em></p>\n\n<pre><code class=\"language-bash\">[DotNetWatcher] info: File changed: \n/ng2-kestrel-appserver/Startup.cs\n[DotNetWatcher] info: Running dotnet with the following arguments: run\n[DotNetWatcher] info: dotnet process id: 27610\nProject ng2-kestrel-appserver (.NETCoreApp,Version=v1.0) will be compiled because inputs were modified  \nCompiling ng2-kestrel-appserver for .NETCoreApp,Version=v1.0  \nCompilation succeeded.  \n    0 Warning(s)\n    0 Error(s)\nTime elapsed 00:00:04.4233033  \n</code></pre>\n\n<p>The re-compiliation is reasonably fast, depending on the change and size of the application. </p>\n\n<p>I like this option as it's a core .NET option but is limited to just .NET.</p>\n\n<p>If you are building an application that is composed of C#, TypeScript and/or other file types that need compilation etc or need some other transformative process; combining the <code>dotnet</code> command(s) and npm scripts may be another option.</p>\n\n<h3 id=\"nodemonwdotnet\">nodemon w/dotnet</h3>\n\n<p>Previous to <strong>dotnet-watch</strong> being available on OSX and Linux, I used nodemon with <code>dnx</code>, now <code>dotnet</code>, inside npm scripts to start and run my applications when in dev mode.</p>\n\n<p>First add a <strong>package.json</strong> file to the root of your project, you may already have one depending on the project type. </p>\n\n<p>This is the <strong>package.json</strong> from the <a href=\"http://tattoocoder.com/kestrel-as-a-static-server-for-angular/\">ng2-kestrel-appserver</a> project mentioned before.</p>\n\n<pre><code class=\"language-javascript\">{\n\"name\": \"ng2-kestrel-appserver\",\n\"version\": \"0.0.0\",\n\"devDependencies\": {\n    \"nodemon\": \"1.9.1\",\n    \"gulp\": \"3.9.1\",\n    \"gulp-cli\": \"1.2.1\"\n},\n\"scripts\": {\n     \"start\" : \"nodemon --ignore htm,html,js,json --ignore obj/ --ignore bin/ --ext cs --delay 1000ms --exec \\\"dotnet run ASPNETCORE_ENVIRONMENT=Development\\\" -V\"\n   }\n}\n</code></pre>\n\n<p>Using <strong>nodemon</strong> </p>\n\n<ul>\n<li>ignore htm, html and javascript files as they do not need any work to be done if changed (refresh handles)</li>\n<li>ignore <strong>/bin</strong> and <strong>/obj</strong> folders</li>\n<li><strong>--ext cs</strong> : sets the process to watch file extension <em>.cs</em> for changes</li>\n<li><strong>--delay 1000 ms</strong> : way 1 second before restarting</li>\n<li><strong>--exec dotnet run ASPNETCORE_ENVIRONMENT=Development</strong> : start this command each time</li>\n</ul>\n\n<p>To kickoff or start the application, use the following command </p>\n\n<pre><code class=\"language-bash\">$ npm start\n</code></pre>\n\n<p>If we needed to compile TypeScript as well, for example, adding the TypeScript file type to the <code>--ext</code> and the compiler to the <code>--exec</code> would accomplish that in tandem. </p>\n\n<p>i.e.</p>\n\n<pre><code class=\"language-bash\"> \"start\" : \"nodemon --ignore htm,html,js,json --ignore obj/ --ignore bin/ --ext cs,ts --delay 1000ms --exec \\\"tsc &amp;&amp; dotnet run ASPNETCORE_ENVIRONMENT=Development\\\" -V\"\n</code></pre>\n\n<p>Checkout the <a href=\"http://tattoocoder.com/kestrel-as-a-static-server-for-angular/\">ng2-kestrel-appserver</a> project and the <a href=\"https://github.com/spboyer/ng2-kestrel-appserver\">github repo</a>.</p>\n\n<p>Enjoy!</p>","image":"/content/images/2016/05/dotnet-watchingcode.png","featured":1,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1463596071105,"created_by":1,"updated_at":1463599849921,"updated_by":1,"published_at":1463569200000,"published_by":1},{"id":80,"uuid":"9bf5e657-d169-474a-85c1-5b38e42ce3e7","title":"Articles, Podcasts, Videos","slug":"media","markdown":"06.09.2016 - dotnetconf 2106: [Exposing Your Business Services to the Web & mobile](https://channel9.msdn.com/events/dotnetConf/2016/Exposing-Your-Business-Services-to-the-Web--Mobile) - using ASP.NET Core to connect to WCF Services.\n\n03.03.2016 - 082 Adventures in Angular: [Getting Started with Angular 2 With No Angular 1 Experience with Shayne Boyer](https://devchat.tv/adv-in-angular/082-aia-getting-started-with-angular-2-with-no-angular-1-experience-with-shayne-boyer)\n\n02.01.2016 - Pluralsight Course - [Play by Play w/ John Papa: ASP.NET Core 1.0 on Any OS](http://spboyer.me/pbpaspnetcore)\n\n10.25.2015 - Introduction to Modern Development Toolchain - [DevIntersection / AngleBrackets : Vegas on Channel9](https://channel9.msdn.com/Events/DEVintersection/DEVintersection-2015/Introduction-to-the-Modern-Web-Toolchain)\n\n10.1.2015 - [ASP.NET - ASP.NET 5 Anywhere with OmniSharp and Yeoman](https://msdn.microsoft.com/en-us/magazine/mt573713.aspx) (MSDN Magazine October)\n\n5.27.15 - Away From the Keyboard Podcast: [Episode 6: Shayne Boyer On Fitness, Community, and Tech](http://awayfromthekeyboard.com/2015/05/27/shayne-boyer-on-fitness-community-and-tech/)\n\n2.28.2015 - [Updates to ASP.NET 5 yeoman generators for beta 3](http://blogs.msdn.com/b/webdev/archive/2015/02/28/asp-net-yeoman-generators-for-beta-3.aspx) \n(.NET Web Development and Tools Blog)\n\n12.17.2014 - [Adding New Items to Your ASP.NET 5 Project with Yeoman Sub-generators](http://blogs.msdn.com/b/webdev/archive/2014/12/17/adding-new-items-to-your-asp-net-5-project-with-yeoman-subgenerators.aspx)\n(.NET Web Development and Tools Blog)\n\n11.14.2014 - [Windows Developer Show: Episode 167 MVP Summit](http://windowsdevelopershow.com/2014/11/episode-167-mvp-summit/)\n\n01.25.2014 - [Microsoft DevRadio: Community Corner - Best Practices for Becoming a Successful Mobile Developer](http://channel9.msdn.com/Blogs/DevRadio/Microsoft-DevRadio-Community-Corner-Best-Practices-for-Becoming-a-Successful-Mobile-Developer) (channel9.msdn.com)\n\n01.20.2014 - [Microsoft DevRadio: Community Corner - An Interview with Shayne Boyer, Creator of \"Tunely\" for Windows Phone](http://channel9.msdn.com/Blogs/DevRadio/Microsoft-DevRadio-Community-Corner-An-Interview-with-Shayne-Boyer-Creator-of-Tunely-for-Windows-Pho) (channel9.msdn.com)\n\n1.05.2013 - [TypeScript: Making .NET Developers Comfortable with JavaScript](http://msdn.microsoft.com/en-us/magazine/jj883955.aspx) (MSDN Magazine & Online)\n\n02.04.2013 - [TypeScript: Add Productivity and Manageability to your JavaScript Apps Part 2](http://msdn.microsoft.com/en-us/magazine/jj983351.aspx) - scriptjunkie.com (MSDN Magazine Online)\n\n06.23.2013 - [Technology and Friends: Episode 271 Shayne Boyer on TypeScript](http://technologyandfriends.com/SubText/archive/2013/06/23/tf271.aspx) \n11.12.2012 - [When Making Apps It's the Little Things That Matter...](http://mobile.dzone.com/articles/when-making-apps-it%E2%80%99s-little) on dzone.com\n\n12.05.2012 - [TypeScript: Add Productivity and Manageability to your JavaScript Apps](http://msdn.microsoft.com/en-us/magazine/jj870740.aspx) - scriptjunkie.com (MSDN Magazine Online)\n","html":"<p>06.09.2016 - dotnetconf 2106: <a href=\"https://channel9.msdn.com/events/dotnetConf/2016/Exposing-Your-Business-Services-to-the-Web--Mobile\">Exposing Your Business Services to the Web &amp; mobile</a> - using ASP.NET Core to connect to WCF Services.</p>\n\n<p>03.03.2016 - 082 Adventures in Angular: <a href=\"https://devchat.tv/adv-in-angular/082-aia-getting-started-with-angular-2-with-no-angular-1-experience-with-shayne-boyer\">Getting Started with Angular 2 With No Angular 1 Experience with Shayne Boyer</a></p>\n\n<p>02.01.2016 - Pluralsight Course - <a href=\"http://spboyer.me/pbpaspnetcore\">Play by Play w/ John Papa: ASP.NET Core 1.0 on Any OS</a></p>\n\n<p>10.25.2015 - Introduction to Modern Development Toolchain - <a href=\"https://channel9.msdn.com/Events/DEVintersection/DEVintersection-2015/Introduction-to-the-Modern-Web-Toolchain\">DevIntersection / AngleBrackets : Vegas on Channel9</a></p>\n\n<p>10.1.2015 - <a href=\"https://msdn.microsoft.com/en-us/magazine/mt573713.aspx\">ASP.NET - ASP.NET 5 Anywhere with OmniSharp and Yeoman</a> (MSDN Magazine October)</p>\n\n<p>5.27.15 - Away From the Keyboard Podcast: <a href=\"http://awayfromthekeyboard.com/2015/05/27/shayne-boyer-on-fitness-community-and-tech/\">Episode 6: Shayne Boyer On Fitness, Community, and Tech</a></p>\n\n<p>2.28.2015 - <a href=\"http://blogs.msdn.com/b/webdev/archive/2015/02/28/asp-net-yeoman-generators-for-beta-3.aspx\">Updates to ASP.NET 5 yeoman generators for beta 3</a> <br />\n(.NET Web Development and Tools Blog)</p>\n\n<p>12.17.2014 - <a href=\"http://blogs.msdn.com/b/webdev/archive/2014/12/17/adding-new-items-to-your-asp-net-5-project-with-yeoman-subgenerators.aspx\">Adding New Items to Your ASP.NET 5 Project with Yeoman Sub-generators</a> <br />\n(.NET Web Development and Tools Blog)</p>\n\n<p>11.14.2014 - <a href=\"http://windowsdevelopershow.com/2014/11/episode-167-mvp-summit/\">Windows Developer Show: Episode 167 MVP Summit</a></p>\n\n<p>01.25.2014 - <a href=\"http://channel9.msdn.com/Blogs/DevRadio/Microsoft-DevRadio-Community-Corner-Best-Practices-for-Becoming-a-Successful-Mobile-Developer\">Microsoft DevRadio: Community Corner - Best Practices for Becoming a Successful Mobile Developer</a> (channel9.msdn.com)</p>\n\n<p>01.20.2014 - <a href=\"http://channel9.msdn.com/Blogs/DevRadio/Microsoft-DevRadio-Community-Corner-An-Interview-with-Shayne-Boyer-Creator-of-Tunely-for-Windows-Pho\">Microsoft DevRadio: Community Corner - An Interview with Shayne Boyer, Creator of \"Tunely\" for Windows Phone</a> (channel9.msdn.com)</p>\n\n<p>1.05.2013 - <a href=\"http://msdn.microsoft.com/en-us/magazine/jj883955.aspx\">TypeScript: Making .NET Developers Comfortable with JavaScript</a> (MSDN Magazine &amp; Online)</p>\n\n<p>02.04.2013 - <a href=\"http://msdn.microsoft.com/en-us/magazine/jj983351.aspx\">TypeScript: Add Productivity and Manageability to your JavaScript Apps Part 2</a> - scriptjunkie.com (MSDN Magazine Online)</p>\n\n<p>06.23.2013 - <a href=\"http://technologyandfriends.com/SubText/archive/2013/06/23/tf271.aspx\">Technology and Friends: Episode 271 Shayne Boyer on TypeScript</a> <br />\n11.12.2012 - <a href=\"http://mobile.dzone.com/articles/when-making-apps-it%E2%80%99s-little\">When Making Apps It's the Little Things That Matter...</a> on dzone.com</p>\n\n<p>12.05.2012 - <a href=\"http://msdn.microsoft.com/en-us/magazine/jj870740.aspx\">TypeScript: Add Productivity and Manageability to your JavaScript Apps</a> - scriptjunkie.com (MSDN Magazine Online)</p>","image":"/content/images/2016/05/twitter-header.jpeg","featured":0,"page":1,"status":"published","language":"en_US","meta_title":"Articles, Podcasts, Videos & Community","meta_description":"I enjoy spending time with the developer community. Here is a list of the various events, podcasts and articles I've enjoyed doing in various forums.","author_id":1,"created_at":1463600722534,"created_by":1,"updated_at":1465568421789,"updated_by":1,"published_at":1463601499844,"published_by":1},{"id":81,"uuid":"29195986-8b44-4883-8fff-c45df769b0d9","title":"Speaking, Conferences & Events","slug":"speaking","markdown":"One of the things I do love is talking with other developers and nothing gives me that opportunity than getting out to conferences and events.\n\n### 2016 Events\n\n**Orlando Code Camp** - [orlandocodecamp.com](http://orlandocodecamp.com)\n<br />April 2, 2016\nSanford, FL\n\n**DevIntersection / anglebrackets Spring 2016** -[devintersection.com](http://devintersection.com)\n<br />April 16-22, 2016\nWalt Disney Swan Orlando, FL\n\n**dotnetConf**\n[dotnetconf.net](http://dotnetconf.net)\n<br />June 7-9, 2016\nVirtual Conference\n\n**DevIntersection Fall 2016** - [devintersection.com](http://devintersection.com)\n<br />OCTOBER 24-28, 2016\nMGM Grand Las Vegas, NV\nUse **BOYER** at registration to save $$\n\n### Speaking at Your Event\nInterested in having my speak at your conference, meetup or private event? Please get in touch via [twitter](http://twitter.com/spboyer) or [email](mailto:spboyer@live.com?subject=Speaking) and we can coordinate.","html":"<p>One of the things I do love is talking with other developers and nothing gives me that opportunity than getting out to conferences and events.</p>\n\n<h3 id=\"2016events\">2016 Events</h3>\n\n<p><strong>Orlando Code Camp</strong> - <a href=\"http://orlandocodecamp.com\">orlandocodecamp.com</a>\n<br />April 2, 2016 <br />\nSanford, FL</p>\n\n<p><strong>DevIntersection / anglebrackets Spring 2016</strong> -<a href=\"http://devintersection.com\">devintersection.com</a>\n<br />April 16-22, 2016 <br />\nWalt Disney Swan Orlando, FL</p>\n\n<p><strong>dotnetConf</strong>\n<a href=\"http://dotnetconf.net\">dotnetconf.net</a>\n<br />June 7-9, 2016 <br />\nVirtual Conference</p>\n\n<p><strong>DevIntersection Fall 2016</strong> - <a href=\"http://devintersection.com\">devintersection.com</a>\n<br />OCTOBER 24-28, 2016 <br />\nMGM Grand Las Vegas, NV <br />\nUse <strong>BOYER</strong> at registration to save $$</p>\n\n<h3 id=\"speakingatyourevent\">Speaking at Your Event</h3>\n\n<p>Interested in having my speak at your conference, meetup or private event? Please get in touch via <a href=\"http://twitter.com/spboyer\">twitter</a> or <a href=\"mailto:spboyer@live.com?subject=Speaking\">email</a> and we can coordinate.</p>","image":"/content/images/2016/05/shayne_ch9.jpg","featured":0,"page":1,"status":"published","language":"en_US","meta_title":"Speaking, Conferences & Events","meta_description":"I speak at local and national conferences, code camps and meetups on topics covering ASP.NET, Architecture, and Web Development","author_id":1,"created_at":1463608285084,"created_by":1,"updated_at":1463611015158,"updated_by":1,"published_at":1463611015158,"published_by":1},{"id":82,"uuid":"7e6ad29b-6612-49b1-9df0-08454616050a","title":"Weekly Ink 5/24/16","slug":"weekly-ink-5-24-2016","markdown":"![weekl-ink](/content/images/2016/05/weekly-ink.png)\nThis is the first installment of **Weekly Ink** where I'll share a few links if the articles, posts, videos etc that I found valuable.  I am not a link collector, but feel the need to share certain posts that have some value, at least to me and if nothing else, I have a place to go back and reference.\n\n###ASP.NET Core\n* [Getting the Web Root Path and the Content Root Path in ASP.NET Core](https://blog.mariusschulz.com/2016/05/22/getting-the-web-root-path-and-the-content-root-path-in-asp-net-core) - [@mariusschulz](https://twitter.com/mariusschulz)\n* [Changes to Project.json](https://blogs.msdn.microsoft.com/dotnet/2016/05/23/changes-to-project-json/) - Scott Hunter [@coolcsh](http://twitter.com/coolcsh)\n* [Strongly Typed Configuration Settings in ASP.NET Core](http://weblog.west-wind.com/posts/2016/May/23/Strongly-Typed-Configuration-Settings-in-ASPNET-Core) - Rick Strahl [@RickStrahl](http://twitter.com/rickstrahl)\n* [ASP.NET CORE DISTRIBUTED CACHE TAG HELPER](http://aspnetmonsters.com/2016/05/2016-05-22-ASP-NET-Core-Distributed-Cache-Tag-Helper/) - ASP.NET Monsters \n\n###Angular 2\n* [How to Use TypeScript Enums w/ Angular 2](http://www.gurustop.net/blog/2016/05/24/how-to-use-typescript-enum-with-angular2/) - [@meligy](http://twitter.com/meligy)\n* [Angular 2 Observable Data Services](https://coryrylan.com/blog/angular-2-observable-data-services) - [Cory Rylan](http://twitter.com/splintercode)\n* [Angular 2 Force Awakens w/ John Papa - Webinar Recording](http://youtu.be/1lBxgACVcrQ?a) - [John Papa](http://johnpapa.net)\n\n###Docker\n* [Setup Visual Studio, .NET, and Docker Under an Hour](http://www.bloggedbychris.com/2016/05/24/setup-visual-studio-net-docker-windows-hour/) - [Chris Myers](http://www.bloggedbychris.com/)\n* [Docker and .NET Core CLR Release Candidate 2](https://blog.docker.com/2016/05/docker-net-core-clr-rc2/) - [Mano Marks](https://twitter.com/manomarks)\n* [Run Azure Command-Line Client Container](http://www.developmentalmadness.com/2016/05/17/docker-run-azure-command-line-client-container) - [Mark J Miller](https://twitter.com/dvMENTALmadness)","html":"<p><img src=\"/content/images/2016/05/weekly-ink.png\" alt=\"weekl-ink\" />\nThis is the first installment of <strong>Weekly Ink</strong> where I'll share a few links if the articles, posts, videos etc that I found valuable.  I am not a link collector, but feel the need to share certain posts that have some value, at least to me and if nothing else, I have a place to go back and reference.</p>\n\n<h3 id=\"aspnetcore\">ASP.NET Core</h3>\n\n<ul>\n<li><a href=\"https://blog.mariusschulz.com/2016/05/22/getting-the-web-root-path-and-the-content-root-path-in-asp-net-core\">Getting the Web Root Path and the Content Root Path in ASP.NET Core</a> - <a href=\"https://twitter.com/mariusschulz\">@mariusschulz</a></li>\n<li><a href=\"https://blogs.msdn.microsoft.com/dotnet/2016/05/23/changes-to-project-json/\">Changes to Project.json</a> - Scott Hunter <a href=\"http://twitter.com/coolcsh\">@coolcsh</a></li>\n<li><a href=\"http://weblog.west-wind.com/posts/2016/May/23/Strongly-Typed-Configuration-Settings-in-ASPNET-Core\">Strongly Typed Configuration Settings in ASP.NET Core</a> - Rick Strahl <a href=\"http://twitter.com/rickstrahl\">@RickStrahl</a></li>\n<li><a href=\"http://aspnetmonsters.com/2016/05/2016-05-22-ASP-NET-Core-Distributed-Cache-Tag-Helper/\">ASP.NET CORE DISTRIBUTED CACHE TAG HELPER</a> - ASP.NET Monsters </li>\n</ul>\n\n<h3 id=\"angular2\">Angular 2</h3>\n\n<ul>\n<li><a href=\"http://www.gurustop.net/blog/2016/05/24/how-to-use-typescript-enum-with-angular2/\">How to Use TypeScript Enums w/ Angular 2</a> - <a href=\"http://twitter.com/meligy\">@meligy</a></li>\n<li><a href=\"https://coryrylan.com/blog/angular-2-observable-data-services\">Angular 2 Observable Data Services</a> - <a href=\"http://twitter.com/splintercode\">Cory Rylan</a></li>\n<li><a href=\"http://youtu.be/1lBxgACVcrQ?a\">Angular 2 Force Awakens w/ John Papa - Webinar Recording</a> - <a href=\"http://johnpapa.net\">John Papa</a></li>\n</ul>\n\n<h3 id=\"docker\">Docker</h3>\n\n<ul>\n<li><a href=\"http://www.bloggedbychris.com/2016/05/24/setup-visual-studio-net-docker-windows-hour/\">Setup Visual Studio, .NET, and Docker Under an Hour</a> - <a href=\"http://www.bloggedbychris.com/\">Chris Myers</a></li>\n<li><a href=\"https://blog.docker.com/2016/05/docker-net-core-clr-rc2/\">Docker and .NET Core CLR Release Candidate 2</a> - <a href=\"https://twitter.com/manomarks\">Mano Marks</a></li>\n<li><a href=\"http://www.developmentalmadness.com/2016/05/17/docker-run-azure-command-line-client-container\">Run Azure Command-Line Client Container</a> - <a href=\"https://twitter.com/dvMENTALmadness\">Mark J Miller</a></li>\n</ul>","image":"/content/images/2016/05/weekly-ink.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1464113251502,"created_by":1,"updated_at":1464229238184,"updated_by":1,"published_at":1464115161567,"published_by":1},{"id":83,"uuid":"7b9be590-5eb1-4516-83f7-5ad654f6ae50","title":"ASP.NET Core : Getting Clean with SOAP","slug":"asp-net-core-getting-clean-with-soap","markdown":"![soap](/content/images/2016/05/soap.png)\n\nBeing able to take the packaging off the new toy and spin up a new project is a lot of fun I must admit. However, when leaving the latest conference, hack-a-thon or turning away from the latest webcast on that shiny penny; real life hits and trying to get this new thing to work with the old thing sets in.\n\n###WCF\nWCF is a framework that many .NET developers came to love and built many of services on to support Silverlight and WPF applications and was the basis for Web API.  However, it's primary protocol was SOAP and a message format of XML. There are many other great features, WS-*, Transactions, Reliable Messages and more; but for most business it was about Service Oriented Architecture **(SOA)**.\n\nMany, not all, of these services were about getting the large datasets out of the systems and pushing them to the desktops; where the power was to parse the data into the business system - forms over data. Internal services, gigabit ethernet, and giant object graphs (in xml mind you) for the Silverlight or Desktop Windows Forms apps to parse away.\n\nThen the web and mobile hit...and that 10mb data packet isn't going to cut it anymore.\n\n*Test WCF Service available at http://github.com/spboyer/peopleservice - this is the service referenced within the post.*\n\n###Building an Abstraction Layer\nIt's not an uncommon practice to build API Layers over other services aka **Facade Layer** or **Orchestration Layer**. The point of this architectural pattern in this instant is to take a request from the web or mobile client and *orchestrate* calls downstream to the business services and return the reduced object graph. A \"getting only what you need\" pattern.\n\n![abstraction layer](/content/images/2016/05/Web-Services-Abstraction-Layer.png)\n\n###Using ASP.NET Core\nWhen using .NET 4.x and Web Applications with Visual Studio, consuming WCF Services was simple by using the \"Add Service Reference\" dialog.\n\n![add service reference](/content/images/2016/05/add-service-reference.png)\n\nHowever, in ASP.NET Core creating a WCF client and consuming the service, is a matter of using the svcutil.exe and the packages from http://github.com/dotnet/wcf\n\n####svcutil\n[ServiceModel Metadata Utility Tool (Svcutil.exe)](https://msdn.microsoft.com/en-us/library/aa347733(v=vs.110).aspx) is a command line utility used to generate service model code from metadata documents and metadata documents from service model code.\n\nIt is found by opening your Start Menu and typing \"command\" then selecting **VS2015 x64 Native Tools Command Prompt**. Right Click and select \"Run as Administrator\".\n\n*For Mac OSX and Linux users there is no cross platform solution for this **yet**.  Use Windows 10 on a VM in Azure, Parallels or \"Phone a Friend\"*\n\nStartup the WCF service, this one is running locally, and create the service contract using the following command.\n```\nsvcutil  http://localhost/people.svc /o:c:\\temp\\PeopleService.cs /sc\n```\nthe **/o:** option specifies the location and and name of the service contract file, and the **/sc** option specifies to generate code for service contracts only, no configuration is generated.\n\n```bash\nC:\\WINDOWS\\system32>svcutil  http://localhost/people.svc /o:c:\\temp\\PeopleServiceContract.cs /sc\nMicrosoft (R) Service Model Metadata Tool\n[Microsoft (R) Windows (R) Communication Foundation, Version 4.6.1055.0]\nCopyright (c) Microsoft Corporation.  All rights reserved.\n\nAttempting to download metadata from 'http://localhost/people.svc' using WS-Metadata Exchange or DISCO.\nGenerating files...\nc:\\temp\\PeopleServiceContract.cs\n```\n\nThe output created the client proxy class that will be used in the ASP.NET Core Console app we will create next.\n\n###ASP.NET Core Console Application\nFor a simple application, create a console application. File > New Project > Console Application (.NET Core)\n\n![file new project](/content/images/2016/05/filenewproject.png)\n\nOpen **project.json** and add the nuget dependencies for **dotnet/wcf*\n\n```javascript\n  \"dependencies\": {\n    \"Microsoft.NETCore.App\": {\n      \"type\": \"platform\",\n      \"version\": \"1.0.0-rc2-3002702\"\n    },\n    \"System.ServiceModel.Duplex\": \"4.0.1-rc2-24027\",\n    \"System.ServiceModel.Http\": \"4.1.0-rc2-24027\",\n    \"System.ServiceModel.NetTcp\": \"4.1.0-rc2-24027\",\n    \"System.ServiceModel.Primitives\": \"4.1.0-rc2-24027\",\n    \"System.ServiceModel.Security\": \"4.0.1-rc2-24027\",\n\n    \"System.Private.ServiceModel\": \"4.1.0-rc2-24027\"\n  },\n```\n\nIf you are using Visual Studio, the packages will auto restore when hitting Save, or at the command line `dotnet restore`\n\nNext, add the **PersonServiceContract.cs** file generated by the svcutil to the root of the project.\n\nThere will be a few errors, this is a bug not resolved perhaps or a not needed item.\n\n```\nThe type or namespace name 'ExtensionDataObject' does not exist in the namespace 'System.Runtime.Serialization'\n```\n\nAdd the following class and interface to the project to resolve the error.\n\n```\nnamespace System.Runtime.Serialization\n{\n    public class ExtensionDataObject\n    {\n    }\n\n    internal interface IExtensibleDataObject\n    {\n    }\n}\n```\n\n###Calling the WCF Service\nTypically our bindings for WCF are configured in XML files when running through the \"Add Service Reference\" dialog from before.  In this case the bindings are built from scratch.\n\nIn this case, a BasicHttpBinding is used to call the *people.svc* endpoint, executing the *GetPeopleData* method which takes an **int** returning that amount of people.\n\nThe binding takes the security types: Transport, None, TransportCredentialOnly, and TransportWithMessageCredential. \n\n```csharp\nBinding binding = null;\nbinding = new BasicHttpBinding(BasicHttpSecurityMode.None);\n```\n\nConfigure the ChannelFactory<T> to use the binding and pass the endpoint.\n\n```csharp\nfactory = new ChannelFactory<IGetPeopleService>(binding, new EndpointAddress(\"http://localhost/people.svc\"));\n```\n\nFinally, create the WCF client (serviceProxy) and call the method.\n\n```csharp\nserviceProxy = factory.CreateChannel();\n\nvar result = serviceProxy.GetPeopleData(100);\n```\n\nHere is the complete code to call the service and write the count to the console.  \n\n```csharp\nChannelFactory<IGetPeopleService> factory = null;\nIGetPeopleService serviceProxy = null;\nBinding binding = null;\n\nbinding = new BasicHttpBinding(BasicHttpSecurityMode.None);\nfactory = new ChannelFactory<IGetPeopleService>(binding, new EndpointAddress(\"http://localhost/people.svc\"));\nserviceProxy = factory.CreateChannel();\n\nvar result = serviceProxy.GetPeopleData(100);\n\nConsole.Write(\"People Returned:\" + result.Count().ToString());\nConsole.ReadLine();\n```\n\n##Summary\nUsing ASP.NET Core to orchestrate and \"thin out\" the data calls to these business services allows us to use the new with the old.  The benefit here is the in-house hardened systems don't have to incur change or risk to day to day operations, and on the flip side the mobile and web applications do not pay the price of large datasets slowing down performance and giving a poor experience to the user.  \n\n*** Every binding type is available for .NET Core; Tcp, BasicHttp etc.  There has also been an extension for VS 2015 for creating the proxies - [WCF Connected Service VS extension for VS 2015](https://blogs.msdn.microsoft.com/webdev/2016/05/25/announcing-wcf-connected-service-for-net-core-rc2-and-asp-net-core-rc2/) in lieu of using svcutil.","html":"<p><img src=\"/content/images/2016/05/soap.png\" alt=\"soap\" /></p>\n\n<p>Being able to take the packaging off the new toy and spin up a new project is a lot of fun I must admit. However, when leaving the latest conference, hack-a-thon or turning away from the latest webcast on that shiny penny; real life hits and trying to get this new thing to work with the old thing sets in.</p>\n\n<h3 id=\"wcf\">WCF</h3>\n\n<p>WCF is a framework that many .NET developers came to love and built many of services on to support Silverlight and WPF applications and was the basis for Web API.  However, it's primary protocol was SOAP and a message format of XML. There are many other great features, WS-*, Transactions, Reliable Messages and more; but for most business it was about Service Oriented Architecture <strong>(SOA)</strong>.</p>\n\n<p>Many, not all, of these services were about getting the large datasets out of the systems and pushing them to the desktops; where the power was to parse the data into the business system - forms over data. Internal services, gigabit ethernet, and giant object graphs (in xml mind you) for the Silverlight or Desktop Windows Forms apps to parse away.</p>\n\n<p>Then the web and mobile hit...and that 10mb data packet isn't going to cut it anymore.</p>\n\n<p><em>Test WCF Service available at <a href=\"http://github.com/spboyer/peopleservice\">http://github.com/spboyer/peopleservice</a> - this is the service referenced within the post.</em></p>\n\n<h3 id=\"buildinganabstractionlayer\">Building an Abstraction Layer</h3>\n\n<p>It's not an uncommon practice to build API Layers over other services aka <strong>Facade Layer</strong> or <strong>Orchestration Layer</strong>. The point of this architectural pattern in this instant is to take a request from the web or mobile client and <em>orchestrate</em> calls downstream to the business services and return the reduced object graph. A \"getting only what you need\" pattern.</p>\n\n<p><img src=\"/content/images/2016/05/Web-Services-Abstraction-Layer.png\" alt=\"abstraction layer\" /></p>\n\n<h3 id=\"usingaspnetcore\">Using ASP.NET Core</h3>\n\n<p>When using .NET 4.x and Web Applications with Visual Studio, consuming WCF Services was simple by using the \"Add Service Reference\" dialog.</p>\n\n<p><img src=\"/content/images/2016/05/add-service-reference.png\" alt=\"add service reference\" /></p>\n\n<p>However, in ASP.NET Core creating a WCF client and consuming the service, is a matter of using the svcutil.exe and the packages from <a href=\"http://github.com/dotnet/wcf\">http://github.com/dotnet/wcf</a></p>\n\n<h4 id=\"svcutil\">svcutil</h4>\n\n<p><a href=\"https://msdn.microsoft.com/en-us/library/aa347733(v=vs.110).aspx\">ServiceModel Metadata Utility Tool (Svcutil.exe)</a> is a command line utility used to generate service model code from metadata documents and metadata documents from service model code.</p>\n\n<p>It is found by opening your Start Menu and typing \"command\" then selecting <strong>VS2015 x64 Native Tools Command Prompt</strong>. Right Click and select \"Run as Administrator\".</p>\n\n<p><em>For Mac OSX and Linux users there is no cross platform solution for this <strong>yet</strong>.  Use Windows 10 on a VM in Azure, Parallels or \"Phone a Friend\"</em></p>\n\n<p>Startup the WCF service, this one is running locally, and create the service contract using the following command.  </p>\n\n<pre><code>svcutil  http://localhost/people.svc /o:c:\\temp\\PeopleService.cs /sc  \n</code></pre>\n\n<p>the <strong>/o:</strong> option specifies the location and and name of the service contract file, and the <strong>/sc</strong> option specifies to generate code for service contracts only, no configuration is generated.</p>\n\n<pre><code class=\"language-bash\">C:\\WINDOWS\\system32&gt;svcutil  http://localhost/people.svc /o:c:\\temp\\PeopleServiceContract.cs /sc  \nMicrosoft (R) Service Model Metadata Tool  \n[Microsoft (R) Windows (R) Communication Foundation, Version 4.6.1055.0]\nCopyright (c) Microsoft Corporation.  All rights reserved.\n\nAttempting to download metadata from 'http://localhost/people.svc' using WS-Metadata Exchange or DISCO.  \nGenerating files...  \nc:\\temp\\PeopleServiceContract.cs  \n</code></pre>\n\n<p>The output created the client proxy class that will be used in the ASP.NET Core Console app we will create next.</p>\n\n<h3 id=\"aspnetcoreconsoleapplication\">ASP.NET Core Console Application</h3>\n\n<p>For a simple application, create a console application. File > New Project > Console Application (.NET Core)</p>\n\n<p><img src=\"/content/images/2016/05/filenewproject.png\" alt=\"file new project\" /></p>\n\n<p>Open <strong>project.json</strong> and add the nuget dependencies for <em>*dotnet/wcf</em></p>\n\n<pre><code class=\"language-javascript\">  \"dependencies\": {\n    \"Microsoft.NETCore.App\": {\n      \"type\": \"platform\",\n      \"version\": \"1.0.0-rc2-3002702\"\n    },\n    \"System.ServiceModel.Duplex\": \"4.0.1-rc2-24027\",\n    \"System.ServiceModel.Http\": \"4.1.0-rc2-24027\",\n    \"System.ServiceModel.NetTcp\": \"4.1.0-rc2-24027\",\n    \"System.ServiceModel.Primitives\": \"4.1.0-rc2-24027\",\n    \"System.ServiceModel.Security\": \"4.0.1-rc2-24027\",\n\n    \"System.Private.ServiceModel\": \"4.1.0-rc2-24027\"\n  },\n</code></pre>\n\n<p>If you are using Visual Studio, the packages will auto restore when hitting Save, or at the command line <code>dotnet restore</code></p>\n\n<p>Next, add the <strong>PersonServiceContract.cs</strong> file generated by the svcutil to the root of the project.</p>\n\n<p>There will be a few errors, this is a bug not resolved perhaps or a not needed item.</p>\n\n<pre><code>The type or namespace name 'ExtensionDataObject' does not exist in the namespace 'System.Runtime.Serialization'  \n</code></pre>\n\n<p>Add the following class and interface to the project to resolve the error.</p>\n\n<pre><code>namespace System.Runtime.Serialization  \n{\n    public class ExtensionDataObject\n    {\n    }\n\n    internal interface IExtensibleDataObject\n    {\n    }\n}\n</code></pre>\n\n<h3 id=\"callingthewcfservice\">Calling the WCF Service</h3>\n\n<p>Typically our bindings for WCF are configured in XML files when running through the \"Add Service Reference\" dialog from before.  In this case the bindings are built from scratch.</p>\n\n<p>In this case, a BasicHttpBinding is used to call the <em>people.svc</em> endpoint, executing the <em>GetPeopleData</em> method which takes an <strong>int</strong> returning that amount of people.</p>\n\n<p>The binding takes the security types: Transport, None, TransportCredentialOnly, and TransportWithMessageCredential. </p>\n\n<pre><code class=\"language-csharp\">Binding binding = null;  \nbinding = new BasicHttpBinding(BasicHttpSecurityMode.None);  \n</code></pre>\n\n<p>Configure the ChannelFactory<T> to use the binding and pass the endpoint.</p>\n\n<pre><code class=\"language-csharp\">factory = new ChannelFactory&lt;IGetPeopleService&gt;(binding, new EndpointAddress(\"http://localhost/people.svc\"));  \n</code></pre>\n\n<p>Finally, create the WCF client (serviceProxy) and call the method.</p>\n\n<pre><code class=\"language-csharp\">serviceProxy = factory.CreateChannel();\n\nvar result = serviceProxy.GetPeopleData(100);  \n</code></pre>\n\n<p>Here is the complete code to call the service and write the count to the console.  </p>\n\n<pre><code class=\"language-csharp\">ChannelFactory&lt;IGetPeopleService&gt; factory = null;  \nIGetPeopleService serviceProxy = null;  \nBinding binding = null;\n\nbinding = new BasicHttpBinding(BasicHttpSecurityMode.None);  \nfactory = new ChannelFactory&lt;IGetPeopleService&gt;(binding, new EndpointAddress(\"http://localhost/people.svc\"));  \nserviceProxy = factory.CreateChannel();\n\nvar result = serviceProxy.GetPeopleData(100);\n\nConsole.Write(\"People Returned:\" + result.Count().ToString());  \nConsole.ReadLine();  \n</code></pre>\n\n<h2 id=\"summary\">Summary</h2>\n\n<p>Using ASP.NET Core to orchestrate and \"thin out\" the data calls to these business services allows us to use the new with the old.  The benefit here is the in-house hardened systems don't have to incur change or risk to day to day operations, and on the flip side the mobile and web applications do not pay the price of large datasets slowing down performance and giving a poor experience to the user.  </p>\n\n<p><em>*</em> Every binding type is available for .NET Core; Tcp, BasicHttp etc.  There has also been an extension for VS 2015 for creating the proxies - <a href=\"https://blogs.msdn.microsoft.com/webdev/2016/05/25/announcing-wcf-connected-service-for-net-core-rc2-and-asp-net-core-rc2/\">WCF Connected Service VS extension for VS 2015</a> in lieu of using svcutil.</p>","image":"/content/images/2016/05/soap.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1464209471975,"created_by":1,"updated_at":1464223095808,"updated_by":1,"published_at":1464206400000,"published_by":1},{"id":84,"uuid":"4e8e7ea5-4537-4d68-b9e7-1be7e8036e83","title":"Weekly Ink - 5/30/16","slug":"weekly-ink-5-30-2016","markdown":"![weekly-ink](/content/images/2016/05/weekly-ink2.png)\nAnother installment of \"Weekly Ink\".  Ran across some great stuff early on in all of my interests, some of which I tweeted out early.\n\n<blockquote class=\"twitter-tweet\" data-partner=\"tweetdeck\"><p lang=\"en\" dir=\"ltr\">Announcing WCF Connected Service for .NET Core RC2 and <a href=\"https://t.co/gP8Ofw519E\">https://t.co/gP8Ofw519E</a> Core RC2 <a href=\"https://t.co/pJRCaN2NLi\">https://t.co/pJRCaN2NLi</a> <a href=\"https://twitter.com/hashtag/aspnetcore?src=hash\">#aspnetcore</a></p>&mdash; Shayne Boyer (@spboyer) <a href=\"https://twitter.com/spboyer/status/735646378496516096\">May 26, 2016</a></blockquote>\n\nIn this edition, Nic does a really [great walkthrough](https://www.thepolyglotdeveloper.com/2016/05/converting-ionic-2-mobile-app-nativescript) of converting an Ionic app to NativeScript, John writes up how to [run multiple versions of node.js](https://johnpapa.net/multiple-versions-of-node-with-n/) using **n**, Arnaud talks about [how Docker does Open Source](https://blog.docker.com/2016/05/open-source-docker-part-1-people/) and more.\n\n\n###ASP.NET Core\n* [Azure App Service and ASP.NET Core RC2](https://t.co/f6zXVPgcV9) - blogs.msdn.microsoft.com\n* [Converting an ASP.NET Core RC1 Project to RC2](https://wildermuth.com/2016/05/17/Converting-an-ASP-NET-Core-RC1-Project-to-RC2) - [Shawn Wildermuth](https://twitter.com/shawnwildermuth)\n* [Announcing WCF Connected Service for .NET Core RC2 and ASP.NET Core RC2](https://blogs.msdn.microsoft.com/webdev/2016/05/25/announcing-wcf-connected-service-for-net-core-rc2-and-asp-net-core-rc2/) - [.NET Web Development and Tools Blog](https://blogs.msdn.microsoft.com/webdev)\n\n###Angular 2\n* [Converting Your Ionic 2 Mobile App To NativeScript](https://www.thepolyglotdeveloper.com/2016/05/converting-ionic-2-mobile-app-nativescript) - [Nic Raboy](https://www.twitter.com/nraboy)\n* [Angular Material 2 alpha.5 - granite-gouda Released](https://github.com/angular/material2/blob/master/CHANGELOG.md) - [Jeremy Elbourn](@jelbourn)\n* [Angular 2 Workshop - Barcelona](https://johnpapa.net/angular-2-workshop-in-barcelona/) - [John Papa](http://johnpapa.net)\n\n###Docker\n* [Open Source at Docker](https://blog.docker.com/2016/05/open-source-docker-part-1-people/) - [Arnaud Porterie](http://twitter.com/@icecrime)\n* [Windows Containers on Windows 10](https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start_windows_10) - Neil Peterson\n* [Announcing Captain for Docker](https://blog.harbur.io/announcing-captain-for-docker/), automatically generates the containers of your project's git repository without the need to construct complex build commands or have a Makefile on your project. - Dimitris Kapanidis\n\n###Random Ink\n* [Multiple Versions of Node with n](https://johnpapa.net/multiple-versions-of-node-with-n/) - [John Papa](http://johnpapa.net)","html":"<p><img src=\"/content/images/2016/05/weekly-ink2.png\" alt=\"weekly-ink\" />\nAnother installment of \"Weekly Ink\".  Ran across some great stuff early on in all of my interests, some of which I tweeted out early.</p>\n\n<blockquote class=\"twitter-tweet\" data-partner=\"tweetdeck\"><p lang=\"en\" dir=\"ltr\">Announcing WCF Connected Service for .NET Core RC2 and <a href=\"https://t.co/gP8Ofw519E\">https://t.co/gP8Ofw519E</a> Core RC2 <a href=\"https://t.co/pJRCaN2NLi\">https://t.co/pJRCaN2NLi</a> <a href=\"https://twitter.com/hashtag/aspnetcore?src=hash\">#aspnetcore</a></p>&mdash; Shayne Boyer (@spboyer) <a href=\"https://twitter.com/spboyer/status/735646378496516096\">May 26, 2016</a></blockquote>\n\n<p>In this edition, Nic does a really <a href=\"https://www.thepolyglotdeveloper.com/2016/05/converting-ionic-2-mobile-app-nativescript\">great walkthrough</a> of converting an Ionic app to NativeScript, John writes up how to <a href=\"https://johnpapa.net/multiple-versions-of-node-with-n/\">run multiple versions of node.js</a> using <strong>n</strong>, Arnaud talks about <a href=\"https://blog.docker.com/2016/05/open-source-docker-part-1-people/\">how Docker does Open Source</a> and more.</p>\n\n<h3 id=\"aspnetcore\">ASP.NET Core</h3>\n\n<ul>\n<li><a href=\"https://t.co/f6zXVPgcV9\">Azure App Service and ASP.NET Core RC2</a> - blogs.msdn.microsoft.com</li>\n<li><a href=\"https://wildermuth.com/2016/05/17/Converting-an-ASP-NET-Core-RC1-Project-to-RC2\">Converting an ASP.NET Core RC1 Project to RC2</a> - <a href=\"https://twitter.com/shawnwildermuth\">Shawn Wildermuth</a></li>\n<li><a href=\"https://blogs.msdn.microsoft.com/webdev/2016/05/25/announcing-wcf-connected-service-for-net-core-rc2-and-asp-net-core-rc2/\">Announcing WCF Connected Service for .NET Core RC2 and ASP.NET Core RC2</a> - <a href=\"https://blogs.msdn.microsoft.com/webdev\">.NET Web Development and Tools Blog</a></li>\n</ul>\n\n<h3 id=\"angular2\">Angular 2</h3>\n\n<ul>\n<li><a href=\"https://www.thepolyglotdeveloper.com/2016/05/converting-ionic-2-mobile-app-nativescript\">Converting Your Ionic 2 Mobile App To NativeScript</a> - <a href=\"https://www.twitter.com/nraboy\">Nic Raboy</a></li>\n<li><a href=\"https://github.com/angular/material2/blob/master/CHANGELOG.md\">Angular Material 2 alpha.5 - granite-gouda Released</a> - <a href=\"@jelbourn\">Jeremy Elbourn</a></li>\n<li><a href=\"https://johnpapa.net/angular-2-workshop-in-barcelona/\">Angular 2 Workshop - Barcelona</a> - <a href=\"http://johnpapa.net\">John Papa</a></li>\n</ul>\n\n<h3 id=\"docker\">Docker</h3>\n\n<ul>\n<li><a href=\"https://blog.docker.com/2016/05/open-source-docker-part-1-people/\">Open Source at Docker</a> - <a href=\"http://twitter.com/@icecrime\">Arnaud Porterie</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start_windows_10\">Windows Containers on Windows 10</a> - Neil Peterson</li>\n<li><a href=\"https://blog.harbur.io/announcing-captain-for-docker/\">Announcing Captain for Docker</a>, automatically generates the containers of your project's git repository without the need to construct complex build commands or have a Makefile on your project. - Dimitris Kapanidis</li>\n</ul>\n\n<h3 id=\"randomink\">Random Ink</h3>\n\n<ul>\n<li><a href=\"https://johnpapa.net/multiple-versions-of-node-with-n/\">Multiple Versions of Node with n</a> - <a href=\"http://johnpapa.net\">John Papa</a></li>\n</ul>","image":"/content/images/2016/05/weekly-ink2.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1464229193148,"created_by":1,"updated_at":1464520901204,"updated_by":1,"published_at":1464519180000,"published_by":1},{"id":85,"uuid":"93c7545d-c50f-43ff-ad30-cbf974ffc04a","title":"Angular 2: Application Settings using the CLI Environment Option","slug":"angular-cli-using-the-environment-option","markdown":"![a2-cli-env](/content/images/2016/05/a2-cli-env-1.png)\nApplication wide settings can be a long conversation when starting a new application. Here are just a few questions when some of my teams started this conversation:\n\n1. Do we use ENV variables?\n1. What about *manual bootstrap*?\n1. Configuration files?\n1. Should we get them from the server?\n\n###Using angular-cli & environment.ts \nThe new angular-cli have the concept of different environments like development (**dev**) and production (**prod**). When creating a new application with the cli `ng create my-app` and **/config** folder is a part of the scaffold which contains the environment files.\n\n>Check out [Angular 2:Re-Quickstart with the CLI](http://tattoocoder.com/angular2-requickstart-using-cli/)\n\n```\n.\n├── environment.dev.ts\n├── environment.prod.ts\n.\n.\n```\n\nand then within the **/src/app** folder is and `environment.ts` file.\n\nHere is the contents:\n```\nexport const environment = {\n  production: false\n};\n```\n\nAs you might imagine, the *.production.ts file would have `production: true`.  \n\nWhen the application is built (ng build) or served (ng serve), the environment.{env}.ts file from /config is pulled and replaces the file within /src/app. By default this is dev.\n\nIn order to grab the production version, set the environment to production using the following:\n\n```bash\n#build\n$ ng build --environment=production\n#shorthand\n$ ng b -prod\n\n#serve\n$ ng serve --environment=production\n#shorthand\n$ ng s -prod\n```\n\n###Adding additional environments - *not yet supported*\nIf there are additional environments your build process needs to support, you can add more files to the **/config** folder with the name of said environment such as `environment.qa.ts` and then use.\n\n```bash\n#build\n$ ng build --environment=environment\n```\n\nOne drawback here is there is no `-qa` shorthand supported.\n\n*** Although the file is picked up by the CLI, there is a bug that the environments supported are only **prod** or **dev**\n\n\n###Putting it together\nFirst, add a new property to each of the environment.{env}.ts files.\n\n```\nexport const environment = {\n  production: false,\n  envName: 'dev'\n};\n```\n\nThen in the `myapp.component.ts` file import settings, and set the binding.\n\n```javascript\nimport { Component } from '@angular/core';\nimport { environment } from './environment';\n\n@Component({\n  moduleId: module.id,\n  selector: 'myapp-app',\n  templateUrl: 'myapp.component.html',\n  styleUrls: ['myapp.component.css']\n})\nexport class MyappAppComponent {\n  title = 'myapp works!';\n  environmentName = environment.envName;\n}\n```\n\nFinally, in the html template add the h2 tag.\n\n```html\n<h1>\n  {{title}}\n</h1>\n\n<h2>\n  {{environmentName}}\n</h2>\n```\n\nNow if you serve the app with each of the ` --environment={envName}`, the binding will display accordingly.\n\n###Notes\n\nAlthough this is a nice feature there are some things to point out as shortcomings, challenges etc.\n\n* only **production** or **development** are supported\n* For every property that is added to the `/src/app/environment.ts`, it must be added to the files in `/config/environment.{env}.ts`, this is a disruptive workflow.\n* Using this as a solution only works if you are building your application from source and not once then moving to each environment.\n* this may change! There is a current issue on the angular-cli repo addressing this very issue : https://github.com/angular/angular-cli/issues/933\n* the `/src/app/environment.ts` is only a *stub* per se and there to support the typescript compiler and serves no other purpose.\n\nEnjoy, share, comment...\n","html":"<p><img src=\"/content/images/2016/05/a2-cli-env-1.png\" alt=\"a2-cli-env\" />\nApplication wide settings can be a long conversation when starting a new application. Here are just a few questions when some of my teams started this conversation:</p>\n\n<ol>\n<li>Do we use ENV variables?  </li>\n<li>What about <em>manual bootstrap</em>?  </li>\n<li>Configuration files?  </li>\n<li>Should we get them from the server?</li>\n</ol>\n\n<h3 id=\"usingangularclienvironmentts\">Using angular-cli &amp; environment.ts</h3>\n\n<p>The new angular-cli have the concept of different environments like development (<strong>dev</strong>) and production (<strong>prod</strong>). When creating a new application with the cli <code>ng create my-app</code> and <strong>/config</strong> folder is a part of the scaffold which contains the environment files.</p>\n\n<blockquote>\n  <p>Check out <a href=\"http://tattoocoder.com/angular2-requickstart-using-cli/\">Angular 2:Re-Quickstart with the CLI</a></p>\n</blockquote>\n\n<pre><code>.\n├── environment.dev.ts\n├── environment.prod.ts\n.\n.\n</code></pre>\n\n<p>and then within the <strong>/src/app</strong> folder is and <code>environment.ts</code> file.</p>\n\n<p>Here is the contents:  </p>\n\n<pre><code>export const environment = {  \n  production: false\n};\n</code></pre>\n\n<p>As you might imagine, the *.production.ts file would have <code>production: true</code>.  </p>\n\n<p>When the application is built (ng build) or served (ng serve), the environment.{env}.ts file from /config is pulled and replaces the file within /src/app. By default this is dev.</p>\n\n<p>In order to grab the production version, set the environment to production using the following:</p>\n\n<pre><code class=\"language-bash\">#build\n$ ng build --environment=production\n#shorthand\n$ ng b -prod\n\n#serve\n$ ng serve --environment=production\n#shorthand\n$ ng s -prod\n</code></pre>\n\n<h3 id=\"addingadditionalenvironmentsnotyetsupported\">Adding additional environments - <em>not yet supported</em></h3>\n\n<p>If there are additional environments your build process needs to support, you can add more files to the <strong>/config</strong> folder with the name of said environment such as <code>environment.qa.ts</code> and then use.</p>\n\n<pre><code class=\"language-bash\">#build\n$ ng build --environment=environment\n</code></pre>\n\n<p>One drawback here is there is no <code>-qa</code> shorthand supported.</p>\n\n<p><strong>* Although the file is picked up by the CLI, there is a bug that the environments supported are only **prod</strong> or <strong>dev</strong></p>\n\n<h3 id=\"puttingittogether\">Putting it together</h3>\n\n<p>First, add a new property to each of the environment.{env}.ts files.</p>\n\n<pre><code>export const environment = {  \n  production: false,\n  envName: 'dev'\n};\n</code></pre>\n\n<p>Then in the <code>myapp.component.ts</code> file import settings, and set the binding.</p>\n\n<pre><code class=\"language-javascript\">import { Component } from '@angular/core';  \nimport { environment } from './environment';\n\n@Component({\n  moduleId: module.id,\n  selector: 'myapp-app',\n  templateUrl: 'myapp.component.html',\n  styleUrls: ['myapp.component.css']\n})\nexport class MyappAppComponent {  \n  title = 'myapp works!';\n  environmentName = environment.envName;\n}\n</code></pre>\n\n<p>Finally, in the html template add the h2 tag.</p>\n\n<pre><code class=\"language-html\">&lt;h1&gt;  \n  {{title}}\n&lt;/h1&gt;\n\n&lt;h2&gt;  \n  {{environmentName}}\n&lt;/h2&gt;  \n</code></pre>\n\n<p>Now if you serve the app with each of the <code>--environment={envName}</code>, the binding will display accordingly.</p>\n\n<h3 id=\"notes\">Notes</h3>\n\n<p>Although this is a nice feature there are some things to point out as shortcomings, challenges etc.</p>\n\n<ul>\n<li>only <strong>production</strong> or <strong>development</strong> are supported</li>\n<li>For every property that is added to the <code>/src/app/environment.ts</code>, it must be added to the files in <code>/config/environment.{env}.ts</code>, this is a disruptive workflow.</li>\n<li>Using this as a solution only works if you are building your application from source and not once then moving to each environment.</li>\n<li>this may change! There is a current issue on the angular-cli repo addressing this very issue : <a href=\"https://github.com/angular/angular-cli/issues/933\">https://github.com/angular/angular-cli/issues/933</a></li>\n<li>the <code>/src/app/environment.ts</code> is only a <em>stub</em> per se and there to support the typescript compiler and serves no other purpose.</li>\n</ul>\n\n<p>Enjoy, share, comment...</p>","image":"/content/images/2016/05/a2-cli-env.png","featured":1,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1464366280298,"created_by":1,"updated_at":1479755776427,"updated_by":1,"published_at":1464368400000,"published_by":1},{"id":86,"uuid":"b14d739f-463f-4597-89ff-873d164b6380","title":"Angular 2 :  Application Settings using fetch","slug":"angular2-applications-settings","markdown":"![fetch-settings](/content/images/2016/05/fetch.png)\nIn a [recent post](http://tattoocoder.com/angular-cli-using-the-environment-option/), the CLI and environment.ts were used to determing the current running environment and what settings to use. However, there were some shortcomings to this approach\nnot only in the fact that only `development` and `production` were supported but others mentioned as well.\n\nIn Angular 1.x using [*manual bootstrap*](https://docs.angularjs.org/guide/bootstrap), where the application would need to do some work prior to *starting up*, was such a need that it has a home in the [docs](https://docs.angularjs.org/guide/bootstrap). However, in Angular 2 this pattern is not established.\n\nI started looking and asking, \"What is the manual bootstrap for A2?\" Of course, thanks to naming \"bootstrap\" is awful when paired with almost anything web. Nevertheless, there is a question and answer here to be take into account...\n\n###Question?\nI need to get some *data, settings, api url, etc* before my app starts, what are my options?\n\n###Answer(s)?\nIf you are building in each environment, you could use `environment.{env}.ts` as shown in this [post](http://tattoocoder.com/angular-cli-using-the-environment-option/) **OR**\nget them from the originating server using the `fetch` api and let the server determine the ENVIRONMENT and return that information as well as any other relevant settings prior to the\napplication starting.\n\nRelated Posts:\n\n* [Giving your CLI a Server](http://tattoocoder.com/angular2-giving-your-cli-server/)\n* [Application Settings using the CLI Environment Option](http://tattoocoder.com/angular-cli-using-the-environment-option/)\n* [A Re-Quickstart using the CLI](http://tattoocoder.com/angular2-requickstart-using-cli/)\n* [Continuous Integration to Azure using Codeship and the Angular CLI](http://tattoocoder.com/angular2-azure-codeship-angularcli/)\n\n\n##The Server\n*This portion builds on the [Giving your CLI a Server](http://tattoocoder.com/angular2-giving-your-cli-server/) post*\n\nFirst, the environment based config or settings files and code need to added. So a `/config` folder is added with the following files.\n\n```bash\nconfig\n├── development.js\n├── index.js\n└── production.js\n```\n\nThe `index.js` file contains simple code to load the environment specific file based on **NODE_ENV**.  A change could be made to trigger off of any other variable depending on your build process or need to support\nother environments (APP_ENV for example).\n```javascript\nvar config\n  , config_file = './' + (process.env.NODE_ENV ? process.env.NODE_ENV : 'development') + '.js';\n\ntry {\n  config = require(config_file);\n} catch (err) {\n  if (err.code && err.code === 'MODULE_NOT_FOUND') {\n    console.error('No config file matching NODE_ENV=' + process.env.NODE_ENV\n      + '. Requires \"' + __dirname + '/' + process.env.NODE_ENV + '.js\"');\n    process.exit(1);\n  } else {\n    throw err;\n  }\n}\nmodule.exports = config;\n\n```\nNext, the `production.js` and `development.js` file contain the settings specific to the environments and our needs.\n```javascript\nexports.app = app = {\n  title: 'a2-serversettings',\n  port: 80,\n  environment: 'production',\n  start: 'index.html'\n}\n\nexports.api = {\n  base_url: 'http://api.webserver.com/'\n}\n```\n\nA variation to the `development.js` file such as `base_url: 'http://localhost:5001/` would be an example.\n\nNext, implementing the `/settings` endpoint in the `server.js` file which will be used as the GET method by the angular app for retrieving this info.\n\n```javascript\n//import the config\nconfig = require('./config');\n\n// GET settings route\napp.get('/settings', function (req, res) {\n    // create the return object\n    var settings = {};\n\n\n    // set the properties\n    settings.title = config.app.title;\n    settings.environment = config.app.environment;\n    settings.webApiUrl = config.api.base_url;\n\n    // return the settings\n    res.send(settings);\n});\n```\n\n##Adding fetch to the Angular App\n\nthe fetch api is not [completely supported](http://caniuse.com/#search=fetch) so we will need to add a polyfill to the application for wider broweser support.\n\nFirst add the fetch npm package and also install the TypeScript typings for code help.\n```\n#install the window.fetch polyfill\n$ npm install whatwg-fetch --save\n\n#install the typescript typings from defintelytyped\n$ tsd install whatwg-fetch --save\n```\n\nYou'll need toadd the reference to `browser.d.ts`\n```\n/// <reference path=\"whatwg-fetch/whatwg-fetch.d.ts\" />\n```\nIn order to get the `fetch.js` package moved to the `/vendor` folder when the CLI builds (using `ng build`), modify angular-cli-build.js.\n\n```javascript\nmodule.exports = function(defaults) {\n  return new Angular2App(defaults, {\n    vendorNpmFiles: [\n      'whatwg-fetch/fetch.js',\n      'systemjs/dist/system-polyfills.js',\n      'systemjs/dist/system.src.js',\n      'zone.js/dist/**/*.+(js|js.map)',\n      'es6-shim/es6-shim.js',\n      'reflect-metadata/**/*.+(js|js.map)',\n      'rxjs/**/*.+(js|js.map)',\n      '@angular/**/*.+(js|js.map)'\n    ],\n    polyfills: [\n      'vendor/whatwg-fetch/fetch.js',\n      'vendor/es6-shim/es6-shim.js',\n      'vendor/reflect-metadata/Reflect.js',\n      'vendor/systemjs/dist/system.src.js',\n      'vendor/zone.js/dist/zone.js'\n    ]\n  });\n};\n```\n\nNeed to add the change to the `vendorNpmFiles` section to get the files copied in the `ng build` process and then add **all** of the polyfills section because the cli uses a *default* list OR **this* list\n\n##AppSettings\nWhen the application calls the `/settings` endpoint on the node server, the returned json needs to be mapped to class to be used for the application, so in this case add a new file\ncalled `appSettings.ts` to `/src/app` with the following content.  Notice that we are also using an interface for typing which will be used but in the mapping later.\n\n```javscript\nexport interface ISettings {\n    title: string,\n    environment: string,\n    webApiUrl: string,\n}\n\nexport class appSettings {\n    public static settings: ISettings;\n}\n```\n\nNext, add the `appSettings.ts` class to the barrel (learn more about [barrels in this post](http://tattoocoder.com/angular2-barrels/)), and now we can move to `main.ts` to put all of the peices together.\n```\nexport * from './environment';\nexport * from './myapp.component';\nexport * from './appSettings';\n```\n\n##Calling the Settings\nSince the `appSettings` class and related interface was added to app barrel, add `appSettings, ISettings` to the import statement.\n\n```\nimport { MyappAppComponent, environment, appSettings, ISettings } from './app/';\n```\n\nUsing the `fetch` api, we can call the `/settings` endpoint from the originating url and map the `response.json()` to the interface of `ISettings`\nand then set the `settings` property of the `appSettings` class.  Finally using the `environment` property returned from the server `enableProdMode()` is set\nbased on what the server returns and `bootstrap()` is called.\n\n\n```\nfetch('/settings', { method: 'get' }).then((response) => {\n  response.json().then((settings: ISettings) => {\n    appSettings.settings = settings;\n    if (appSettings.settings.environment == 'production') {\n      enableProdMode();\n    };\n    bootstrap(MyappAppComponent);\n\n  });\n});\n```\n\nAll of this happens prior to the application being started, anything you need to store within the `appSettings` class can be inflated from the server and now that class is available globally by adding the import statement to your\ncomponent.\n\n```\nimport {appSettings) from './app/';\n```\n\n##Testing Environments\nThere are npm scripts within the [github code](https://github.com/spboyer/a2-serversettings) that builds and sets the NODE_ENV for development and production.\n\n```\n    \"build:nodeserver\": \"ng build && cp -R nodeserver\\/* dist\",\n    \"build:nodeserver-prod\": \"ng build -prod && cp -R nodeserver\\/* dist\",\n    \"serve-build\" : \"rm -rf dist && npm run build:nodeserver && cd dist && npm i && NODE_ENV=development node server.js\",\n    \"serve-build-prod\": \"rm -rf dist && npm run build:nodeserver-prod && cd dist && npm i && NODE_ENV=production node server.js\"\n \n```\n\nrun `development` using `npm run serve-build` and browse to http://localhost:3000 and `production` using `npm run serve-build-prod`\n\nAll code for this is available at [https://github.com/spboyer/a2-serversettings](https://github.com/spboyer/a2-serversettings)\nEnjoy, comment, share!\n","html":"<p><img src=\"/content/images/2016/05/fetch.png\" alt=\"fetch-settings\" />\nIn a <a href=\"http://tattoocoder.com/angular-cli-using-the-environment-option/\">recent post</a>, the CLI and environment.ts were used to determing the current running environment and what settings to use. However, there were some shortcomings to this approach <br />\nnot only in the fact that only <code>development</code> and <code>production</code> were supported but others mentioned as well.</p>\n\n<p>In Angular 1.x using <a href=\"https://docs.angularjs.org/guide/bootstrap\"><em>manual bootstrap</em></a>, where the application would need to do some work prior to <em>starting up</em>, was such a need that it has a home in the <a href=\"https://docs.angularjs.org/guide/bootstrap\">docs</a>. However, in Angular 2 this pattern is not established.</p>\n\n<p>I started looking and asking, \"What is the manual bootstrap for A2?\" Of course, thanks to naming \"bootstrap\" is awful when paired with almost anything web. Nevertheless, there is a question and answer here to be take into account...</p>\n\n<h3 id=\"question\">Question?</h3>\n\n<p>I need to get some <em>data, settings, api url, etc</em> before my app starts, what are my options?</p>\n\n<h3 id=\"answers\">Answer(s)?</h3>\n\n<p>If you are building in each environment, you could use <code>environment.{env}.ts</code> as shown in this <a href=\"http://tattoocoder.com/angular-cli-using-the-environment-option/\">post</a> <strong>OR</strong> <br />\nget them from the originating server using the <code>fetch</code> api and let the server determine the ENVIRONMENT and return that information as well as any other relevant settings prior to the <br />\napplication starting.</p>\n\n<p>Related Posts:</p>\n\n<ul>\n<li><a href=\"http://tattoocoder.com/angular2-giving-your-cli-server/\">Giving your CLI a Server</a></li>\n<li><a href=\"http://tattoocoder.com/angular-cli-using-the-environment-option/\">Application Settings using the CLI Environment Option</a></li>\n<li><a href=\"http://tattoocoder.com/angular2-requickstart-using-cli/\">A Re-Quickstart using the CLI</a></li>\n<li><a href=\"http://tattoocoder.com/angular2-azure-codeship-angularcli/\">Continuous Integration to Azure using Codeship and the Angular CLI</a></li>\n</ul>\n\n<h2 id=\"theserver\">The Server</h2>\n\n<p><em>This portion builds on the <a href=\"http://tattoocoder.com/angular2-giving-your-cli-server/\">Giving your CLI a Server</a> post</em></p>\n\n<p>First, the environment based config or settings files and code need to added. So a <code>/config</code> folder is added with the following files.</p>\n\n<pre><code class=\"language-bash\">config  \n├── development.js\n├── index.js\n└── production.js\n</code></pre>\n\n<p>The <code>index.js</code> file contains simple code to load the environment specific file based on <strong>NODE<em>ENV</strong>.  A change could be made to trigger off of any other variable depending on your build process or need to support <br />\nother environments (APP</em>ENV for example).  </p>\n\n<pre><code class=\"language-javascript\">var config  \n  , config_file = './' + (process.env.NODE_ENV ? process.env.NODE_ENV : 'development') + '.js';\n\ntry {  \n  config = require(config_file);\n} catch (err) {\n  if (err.code &amp;&amp; err.code === 'MODULE_NOT_FOUND') {\n    console.error('No config file matching NODE_ENV=' + process.env.NODE_ENV\n      + '. Requires \"' + __dirname + '/' + process.env.NODE_ENV + '.js\"');\n    process.exit(1);\n  } else {\n    throw err;\n  }\n}\nmodule.exports = config;\n</code></pre>\n\n<p>Next, the <code>production.js</code> and <code>development.js</code> file contain the settings specific to the environments and our needs.  </p>\n\n<pre><code class=\"language-javascript\">exports.app = app = {  \n  title: 'a2-serversettings',\n  port: 80,\n  environment: 'production',\n  start: 'index.html'\n}\n\nexports.api = {  \n  base_url: 'http://api.webserver.com/'\n}\n</code></pre>\n\n<p>A variation to the <code>development.js</code> file such as <code>base_url: 'http://localhost:5001/</code> would be an example.</p>\n\n<p>Next, implementing the <code>/settings</code> endpoint in the <code>server.js</code> file which will be used as the GET method by the angular app for retrieving this info.</p>\n\n<pre><code class=\"language-javascript\">//import the config\nconfig = require('./config');\n\n// GET settings route\napp.get('/settings', function (req, res) {  \n    // create the return object\n    var settings = {};\n\n\n    // set the properties\n    settings.title = config.app.title;\n    settings.environment = config.app.environment;\n    settings.webApiUrl = config.api.base_url;\n\n    // return the settings\n    res.send(settings);\n});\n</code></pre>\n\n<h2 id=\"addingfetchtotheangularapp\">Adding fetch to the Angular App</h2>\n\n<p>the fetch api is not <a href=\"http://caniuse.com/#search=fetch\">completely supported</a> so we will need to add a polyfill to the application for wider broweser support.</p>\n\n<p>First add the fetch npm package and also install the TypeScript typings for code help.  </p>\n\n<pre><code>#install the window.fetch polyfill\n$ npm install whatwg-fetch --save\n\n#install the typescript typings from defintelytyped\n$ tsd install whatwg-fetch --save\n</code></pre>\n\n<p>You'll need toadd the reference to <code>browser.d.ts</code>  </p>\n\n<pre><code>/// &lt;reference path=\"whatwg-fetch/whatwg-fetch.d.ts\" /&gt;\n</code></pre>\n\n<p>In order to get the <code>fetch.js</code> package moved to the <code>/vendor</code> folder when the CLI builds (using <code>ng build</code>), modify angular-cli-build.js.</p>\n\n<pre><code class=\"language-javascript\">module.exports = function(defaults) {  \n  return new Angular2App(defaults, {\n    vendorNpmFiles: [\n      'whatwg-fetch/fetch.js',\n      'systemjs/dist/system-polyfills.js',\n      'systemjs/dist/system.src.js',\n      'zone.js/dist/**/*.+(js|js.map)',\n      'es6-shim/es6-shim.js',\n      'reflect-metadata/**/*.+(js|js.map)',\n      'rxjs/**/*.+(js|js.map)',\n      '@angular/**/*.+(js|js.map)'\n    ],\n    polyfills: [\n      'vendor/whatwg-fetch/fetch.js',\n      'vendor/es6-shim/es6-shim.js',\n      'vendor/reflect-metadata/Reflect.js',\n      'vendor/systemjs/dist/system.src.js',\n      'vendor/zone.js/dist/zone.js'\n    ]\n  });\n};\n</code></pre>\n\n<p>Need to add the change to the <code>vendorNpmFiles</code> section to get the files copied in the <code>ng build</code> process and then add <strong>all</strong> of the polyfills section because the cli uses a <em>default</em> list OR <em>*this</em> list</p>\n\n<h2 id=\"appsettings\">AppSettings</h2>\n\n<p>When the application calls the <code>/settings</code> endpoint on the node server, the returned json needs to be mapped to class to be used for the application, so in this case add a new file <br />\ncalled <code>appSettings.ts</code> to <code>/src/app</code> with the following content.  Notice that we are also using an interface for typing which will be used but in the mapping later.</p>\n\n<pre><code class=\"language-javscript\">export interface ISettings {  \n    title: string,\n    environment: string,\n    webApiUrl: string,\n}\n\nexport class appSettings {  \n    public static settings: ISettings;\n}\n</code></pre>\n\n<p>Next, add the <code>appSettings.ts</code> class to the barrel (learn more about <a href=\"http://tattoocoder.com/angular2-barrels/\">barrels in this post</a>), and now we can move to <code>main.ts</code> to put all of the peices together.  </p>\n\n<pre><code>export * from './environment';  \nexport * from './myapp.component';  \nexport * from './appSettings';  \n</code></pre>\n\n<h2 id=\"callingthesettings\">Calling the Settings</h2>\n\n<p>Since the <code>appSettings</code> class and related interface was added to app barrel, add <code>appSettings, ISettings</code> to the import statement.</p>\n\n<pre><code>import { MyappAppComponent, environment, appSettings, ISettings } from './app/';  \n</code></pre>\n\n<p>Using the <code>fetch</code> api, we can call the <code>/settings</code> endpoint from the originating url and map the <code>response.json()</code> to the interface of <code>ISettings</code> <br />\nand then set the <code>settings</code> property of the <code>appSettings</code> class.  Finally using the <code>environment</code> property returned from the server <code>enableProdMode()</code> is set <br />\nbased on what the server returns and <code>bootstrap()</code> is called.</p>\n\n<pre><code>fetch('/settings', { method: 'get' }).then((response) =&gt; {  \n  response.json().then((settings: ISettings) =&gt; {\n    appSettings.settings = settings;\n    if (appSettings.settings.environment == 'production') {\n      enableProdMode();\n    };\n    bootstrap(MyappAppComponent);\n\n  });\n});\n</code></pre>\n\n<p>All of this happens prior to the application being started, anything you need to store within the <code>appSettings</code> class can be inflated from the server and now that class is available globally by adding the import statement to your <br />\ncomponent.</p>\n\n<pre><code>import {appSettings) from './app/';  \n</code></pre>\n\n<h2 id=\"testingenvironments\">Testing Environments</h2>\n\n<p>There are npm scripts within the <a href=\"https://github.com/spboyer/a2-serversettings\">github code</a> that builds and sets the NODE_ENV for development and production.</p>\n\n<pre><code>    \"build:nodeserver\": \"ng build &amp;&amp; cp -R nodeserver\\/* dist\",\n    \"build:nodeserver-prod\": \"ng build -prod &amp;&amp; cp -R nodeserver\\/* dist\",\n    \"serve-build\" : \"rm -rf dist &amp;&amp; npm run build:nodeserver &amp;&amp; cd dist &amp;&amp; npm i &amp;&amp; NODE_ENV=development node server.js\",\n    \"serve-build-prod\": \"rm -rf dist &amp;&amp; npm run build:nodeserver-prod &amp;&amp; cd dist &amp;&amp; npm i &amp;&amp; NODE_ENV=production node server.js\"\n</code></pre>\n\n<p>run <code>development</code> using <code>npm run serve-build</code> and browse to <a href=\"http://localhost:3000\">http://localhost:3000</a> and <code>production</code> using <code>npm run serve-build-prod</code></p>\n\n<p>All code for this is available at <a href=\"https://github.com/spboyer/a2-serversettings\">https://github.com/spboyer/a2-serversettings</a> <br />\nEnjoy, comment, share!</p>","image":"/content/images/2016/05/fetch.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1464708396875,"created_by":1,"updated_at":1479755760001,"updated_by":1,"published_at":1464723214336,"published_by":1},{"id":87,"uuid":"f7da70f2-1102-43c7-895c-bbcb6a177609","title":"What's in your bag?","slug":"whats-in-your-bag","markdown":"![bag](/content/images/2016/06/bag.png)\nWhen I use to read Golf Magazine (a long time ago), there was an interesting column called \"What's in My Bag?\" that profiled a professional player's equipment.  It was an interesting read into what they carried and why they chose what club for what purpose.\n\nI am around a lot of developers here and there, and as we all know; we are very particular about the machine (when we can be), the editors or IDE, the add-ins, command line tools, stickers and sometimes even the bag we put all of this in.\n\nHere is a list of the toys and tools that I *choose* to carry and use.\n\n##Machine\nI have many machines in the computer graveyard in the garage, still not sure why I haven't gotten rid of those? \nMy main machine for a about a year time was an ASUS 15\" Windows Machine and in fact I still have that, which has been updated to Windows 10. But after being asked to develop an iOS application\nI nmoved to a Mac and really never found a reason to move back. It's a MacBook Pro (Retina, 15-inch, Early 2013) running OSX El Capitan also running\nWindows 10 (Fast Ring) using [Parallels 11](http://amzn.to/1UxBlyg). To be honest, running Windows 10 is strictly for using Visual Studio 2015\nand testing features of the development parity on the Windows platform tooling and not to loose sight of those tools.\n\n##Phones, Tablets\nSpending many years on the Windows Phone platform, moving from an Lumia 900 to 920 to 1520; moving back to iOS and the iPhone 6 Plus a few years ago\nwas a choice that was a long time coming.  I loved the platform, even wrote many applications on 8.1. However, many mainstream applications, financial\ninstitutions so and so forth not supporting it; going to iOS just made sense. \n\nEven though carrying a \"phablet\" as my daily phone, I do also have an iPad mini for bedside browsing as well as using this as a \"presentation notepad\" at conferences \nduring my talks.\n\n##IDE(s), Editors, add-ins\nAs I mentioned before, on Windows 10 - Visual Studio 2015 is the IDE I use, and also using Visual Studio Code as well when needing something light for JavaScript development. \n\nOn OSX, jumping around to many different editors had been a regular occurrence for a few years, but primariliy used Sublime 3.  That was until Visual Studio Code was released.  This \nhas now become my primary IDE.  It is fast, lightweight, and the extension library is growing daily.\n\nI use the \"[Insiders](https://code.visualstudio.com/insiders)\" build, as it has the latest features.  One of my favorite recent adds is the integrated terminal/shell. Here is a link to the lastest relase notes for the [May 2016 release](https://github.com/Microsoft/vscode-docs/blob/vnext/release-notes/May_2016.md) \n\nSome of the add-ins I have:\n* C# - Omnisharp\n* Angular 2 snippets by John Papa\n* npm Script Runner by Eric Gamma\n* NativeScript by Telerik\n* TSLint\n* ESLint\n\n\n##Languages, Frameworks, Platforms and Tools\nI'm a Microsoft MVP in the Visual Studio and Development Technologies group, but originally ASP.NET.  My day to day is spent supportting teams \nthat develop in Java, node.js, angular 1.x as well as many other \"legacy\" languages that keep the lights on.\n\nThe frameworks and laguages that I speak, train and develop on primarily \n* ASP.NET Core\n* node.js\n* Angular 2\n* TypeScript\n* Docker\n\nFrom a platform and tooling perspective, using Azure or Amazon Web Services (AWS) in conjuction with Docker to architect web applications for performance and scalability\nhas become a great interest of mine over the last year. The use of Docker from the developer to production workflow is a very desirable story for companies to have knowing that \nit is in fact the same on all environments.\n\n###Command Line Tooling\nThis is an interesting discussion that I often get into and to be honest I may have had a different opinion prior to getting a Mac and doping node.js development over the last 3 years. Users of \nVisual Studio or Eclipse are use to very GUI driven development, but I tell you changing to a text base editor and seeing to control over every build aspect was empowering for me. It is a choice, if you dont want it, \nthen that's also the great thing; you can still use the GUI dev stuff too.  For me, I like to \"see\" what's going on.\n\nHere are some of the CLI tools I use:\n* angular-cli\n* azure-cli\n* yeoman : generator-aspnet\n* node\n    * npm\n    * gulp\n* docker\n* nativescript (tns)\n\n###Other Tools\nOne tool I'd like to call out is GenyMotion.  It's probably the best Android emulator I have found.  It is free, fast, and has just about every image of \na device I would need for an Android device.  One nice feature I like is that I can run multiple devices at once when testing or developing an application.  Really\ngreat when developing using nativescript.\n\n\n##Wrapping Up\nI'd like to hear \"What's In Your Bag?\", leave a comment on some of these areas and why you choose them.\n","html":"<p><img src=\"/content/images/2016/06/bag.png\" alt=\"bag\" />\nWhen I use to read Golf Magazine (a long time ago), there was an interesting column called \"What's in My Bag?\" that profiled a professional player's equipment.  It was an interesting read into what they carried and why they chose what club for what purpose.</p>\n\n<p>I am around a lot of developers here and there, and as we all know; we are very particular about the machine (when we can be), the editors or IDE, the add-ins, command line tools, stickers and sometimes even the bag we put all of this in.</p>\n\n<p>Here is a list of the toys and tools that I <em>choose</em> to carry and use.</p>\n\n<h2 id=\"machine\">Machine</h2>\n\n<p>I have many machines in the computer graveyard in the garage, still not sure why I haven't gotten rid of those? <br />\nMy main machine for a about a year time was an ASUS 15\" Windows Machine and in fact I still have that, which has been updated to Windows 10. But after being asked to develop an iOS application <br />\nI nmoved to a Mac and really never found a reason to move back. It's a MacBook Pro (Retina, 15-inch, Early 2013) running OSX El Capitan also running <br />\nWindows 10 (Fast Ring) using <a href=\"http://amzn.to/1UxBlyg\">Parallels 11</a>. To be honest, running Windows 10 is strictly for using Visual Studio 2015 <br />\nand testing features of the development parity on the Windows platform tooling and not to loose sight of those tools.</p>\n\n<h2 id=\"phonestablets\">Phones, Tablets</h2>\n\n<p>Spending many years on the Windows Phone platform, moving from an Lumia 900 to 920 to 1520; moving back to iOS and the iPhone 6 Plus a few years ago <br />\nwas a choice that was a long time coming.  I loved the platform, even wrote many applications on 8.1. However, many mainstream applications, financial <br />\ninstitutions so and so forth not supporting it; going to iOS just made sense. </p>\n\n<p>Even though carrying a \"phablet\" as my daily phone, I do also have an iPad mini for bedside browsing as well as using this as a \"presentation notepad\" at conferences <br />\nduring my talks.</p>\n\n<h2 id=\"ideseditorsaddins\">IDE(s), Editors, add-ins</h2>\n\n<p>As I mentioned before, on Windows 10 - Visual Studio 2015 is the IDE I use, and also using Visual Studio Code as well when needing something light for JavaScript development. </p>\n\n<p>On OSX, jumping around to many different editors had been a regular occurrence for a few years, but primariliy used Sublime 3.  That was until Visual Studio Code was released.  This <br />\nhas now become my primary IDE.  It is fast, lightweight, and the extension library is growing daily.</p>\n\n<p>I use the \"<a href=\"https://code.visualstudio.com/insiders\">Insiders</a>\" build, as it has the latest features.  One of my favorite recent adds is the integrated terminal/shell. Here is a link to the lastest relase notes for the <a href=\"https://github.com/Microsoft/vscode-docs/blob/vnext/release-notes/May_2016.md\">May 2016 release</a> </p>\n\n<p>Some of the add-ins I have: <br />\n* C# - Omnisharp\n* Angular 2 snippets by John Papa\n* npm Script Runner by Eric Gamma\n* NativeScript by Telerik\n* TSLint\n* ESLint</p>\n\n<h2 id=\"languagesframeworksplatformsandtools\">Languages, Frameworks, Platforms and Tools</h2>\n\n<p>I'm a Microsoft MVP in the Visual Studio and Development Technologies group, but originally ASP.NET.  My day to day is spent supportting teams <br />\nthat develop in Java, node.js, angular 1.x as well as many other \"legacy\" languages that keep the lights on.</p>\n\n<p>The frameworks and laguages that I speak, train and develop on primarily <br />\n* ASP.NET Core\n* node.js\n* Angular 2\n* TypeScript\n* Docker</p>\n\n<p>From a platform and tooling perspective, using Azure or Amazon Web Services (AWS) in conjuction with Docker to architect web applications for performance and scalability <br />\nhas become a great interest of mine over the last year. The use of Docker from the developer to production workflow is a very desirable story for companies to have knowing that <br />\nit is in fact the same on all environments.</p>\n\n<h3 id=\"commandlinetooling\">Command Line Tooling</h3>\n\n<p>This is an interesting discussion that I often get into and to be honest I may have had a different opinion prior to getting a Mac and doping node.js development over the last 3 years. Users of <br />\nVisual Studio or Eclipse are use to very GUI driven development, but I tell you changing to a text base editor and seeing to control over every build aspect was empowering for me. It is a choice, if you dont want it, <br />\nthen that's also the great thing; you can still use the GUI dev stuff too.  For me, I like to \"see\" what's going on.</p>\n\n<p>Here are some of the CLI tools I use: <br />\n* angular-cli\n* azure-cli\n* yeoman : generator-aspnet\n* node\n    * npm\n    * gulp\n* docker\n* nativescript (tns)</p>\n\n<h3 id=\"othertools\">Other Tools</h3>\n\n<p>One tool I'd like to call out is GenyMotion.  It's probably the best Android emulator I have found.  It is free, fast, and has just about every image of <br />\na device I would need for an Android device.  One nice feature I like is that I can run multiple devices at once when testing or developing an application.  Really <br />\ngreat when developing using nativescript.</p>\n\n<h2 id=\"wrappingup\">Wrapping Up</h2>\n\n<p>I'd like to hear \"What's In Your Bag?\", leave a comment on some of these areas and why you choose them.</p>","image":"/content/images/2016/06/bag.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1464895776879,"created_by":1,"updated_at":1464895923518,"updated_by":1,"published_at":1464895923518,"published_by":1},{"id":88,"uuid":"c41954c1-40c5-42c1-a3d9-ee152b356263","title":"Weekly Ink - 6/6/16","slug":"weekly-ink-06-06-2016","markdown":"![weekly-ink-6-6-16](/content/images/2016/06/pablo.png)\n###ASP.NET Core\n\nHere is another edition of \"Weekly Ink\", this week's post has a great entry from Rick on running ASP.NET Core on IIS, Cory shows how to add 3rd party libraries when using the angular CLI, see how to deploy docker containers to kubernetes on AWS _seriously_? and my favorite request has surfaced within VS Code; terminal built in!\n\n* [How To Specify Framework When Running ASP.NET Core Apps](http://ardalis.com/how-to-specify-framework-when-running-aspnet-core-apps) - [Steve Smith](http://twitter.com/ardalis)\n* [Publishing and Running ASP.NET Core Applications with IIS](http://weblog.west-wind.com/posts/2016/Jun/06/Publishing-and-Running-ASPNET-Core-Applications-with-IIS) - [Rick Strahl](http://twitter.com/rickstrahl)\n* [Introduction to integration testing with xUnit and TestServer in ASP.NET Core ](http://andrewlock.net/introduction-to-integration-testing-with-xunit-and-testserver-in-asp-net-core) - [Andrew Lock](https://twitter.com/andrewlocknet)\n\n###Angular 2 \n* [Quick Angular 2 Hosting with the Angular CLI and GitHub Pages](http://developer.telerik.com/featured/quick-angular-2-hosting-angular-cli-github-pages/) - [TJ VanToll](https://twitter.com/tjvantoll)\n* [Angular 2 CLI - Adding Third Party Libraries](https://coryrylan.com/blog/angular-2-cli-adding-third-party-libraries) - [Cory Rylan](https://twitter.com/@splintercode)\n\n###Docker\n* [Learn Docker by Building a MicroService](http://www.dwmkerr.com/learn-docker-by-building-a-microservice/) - [Dave Kerr](http://twitter.com/dwmkerr )\n* Deploying a Docker container to Kubernetes on Amazon AWS](https://renzedevries.wordpress.com/2016/05/31/deploying-a-docker-container-to-kubernetes-on-amazon-aws/) - [Renze](https://twitter.com/renzedevries/)\n* [Running ASP.NET Core 1.0-RC2 in Docker](https://www.sesispla.net/blog/language/en/2016/05/running-asp-net-core-1-0-rc2-in-docker/)\n\n###Random Ink\n* [I Was Wrong About TypeScript, Here is Why](https://www.triplet.fi/blog/i-was-wrong-about-typescript-here-is-why/) - [Tatu Tamminen](https://twitter.com/_Tx3)\n* [Visual Studio Code Insiders Buid](https://code.visualstudio.com/Download#insiders) - [VS Code](http://code.visualstudio.com) : One of the great features just added was the integrated terminal.\n![vscode-terminal](https://pbs.twimg.com/media/Cj4mf2PUoAIUF2R.png:large)","html":"<p><img src=\"/content/images/2016/06/pablo.png\" alt=\"weekly-ink-6-6-16\" /></p>\n\n<h3 id=\"aspnetcore\">ASP.NET Core</h3>\n\n<p>Here is another edition of \"Weekly Ink\", this week's post has a great entry from Rick on running ASP.NET Core on IIS, Cory shows how to add 3rd party libraries when using the angular CLI, see how to deploy docker containers to kubernetes on AWS <em>seriously</em>? and my favorite request has surfaced within VS Code; terminal built in!</p>\n\n<ul>\n<li><a href=\"http://ardalis.com/how-to-specify-framework-when-running-aspnet-core-apps\">How To Specify Framework When Running ASP.NET Core Apps</a> - <a href=\"http://twitter.com/ardalis\">Steve Smith</a></li>\n<li><a href=\"http://weblog.west-wind.com/posts/2016/Jun/06/Publishing-and-Running-ASPNET-Core-Applications-with-IIS\">Publishing and Running ASP.NET Core Applications with IIS</a> - <a href=\"http://twitter.com/rickstrahl\">Rick Strahl</a></li>\n<li><a href=\"http://andrewlock.net/introduction-to-integration-testing-with-xunit-and-testserver-in-asp-net-core\">Introduction to integration testing with xUnit and TestServer in ASP.NET Core </a> - <a href=\"https://twitter.com/andrewlocknet\">Andrew Lock</a></li>\n</ul>\n\n<h3 id=\"angular2\">Angular 2</h3>\n\n<ul>\n<li><a href=\"http://developer.telerik.com/featured/quick-angular-2-hosting-angular-cli-github-pages/\">Quick Angular 2 Hosting with the Angular CLI and GitHub Pages</a> - <a href=\"https://twitter.com/tjvantoll\">TJ VanToll</a></li>\n<li><a href=\"https://coryrylan.com/blog/angular-2-cli-adding-third-party-libraries\">Angular 2 CLI - Adding Third Party Libraries</a> - <a href=\"https://twitter.com/@splintercode\">Cory Rylan</a></li>\n</ul>\n\n<h3 id=\"docker\">Docker</h3>\n\n<ul>\n<li><a href=\"http://www.dwmkerr.com/learn-docker-by-building-a-microservice/\">Learn Docker by Building a MicroService</a> - <a href=\"http://twitter.com/dwmkerr\">Dave Kerr</a></li>\n<li>Deploying a Docker container to Kubernetes on Amazon AWS](https://renzedevries.wordpress.com/2016/05/31/deploying-a-docker-container-to-kubernetes-on-amazon-aws/) - <a href=\"https://twitter.com/renzedevries/\">Renze</a></li>\n<li><a href=\"https://www.sesispla.net/blog/language/en/2016/05/running-asp-net-core-1-0-rc2-in-docker/\">Running ASP.NET Core 1.0-RC2 in Docker</a></li>\n</ul>\n\n<h3 id=\"randomink\">Random Ink</h3>\n\n<ul>\n<li><a href=\"https://www.triplet.fi/blog/i-was-wrong-about-typescript-here-is-why/\">I Was Wrong About TypeScript, Here is Why</a> - <a href=\"https://twitter.com/_Tx3\">Tatu Tamminen</a></li>\n<li><a href=\"https://code.visualstudio.com/Download#insiders\">Visual Studio Code Insiders Buid</a> - <a href=\"http://code.visualstudio.com\">VS Code</a> : One of the great features just added was the integrated terminal.\n<img src=\"https://pbs.twimg.com/media/Cj4mf2PUoAIUF2R.png:large\" alt=\"vscode-terminal\" /></li>\n</ul>","image":"/content/images/2016/06/pablo.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1465232919272,"created_by":1,"updated_at":1465235321822,"updated_by":1,"published_at":1465232400000,"published_by":1},{"id":89,"uuid":"703a0819-e43c-4199-af22-aab95594a977","title":"Thank you dotnetconf 2016","slug":"dotnetconf-2016","markdown":"![](/content/images/2016/06/IMG_3368.JPG)\nHad a great time presenting at dotnetconf, even with the A/C broken a the house.  Appreciate the comments and feedback.  Although this was not super sexy new stuff, it is a real business case and a question I get asked more often than you think...\"How do I connect ASP.NET Core to WCF or even node.js to SOAP Services\". \n\nWhen I started looking at the issue a few weeks ago, there was very little documented, which is why I wanted to put the talk and demo out there. \n\n<iframe src=\"https://channel9.msdn.com/Events/dotnetConf/2016/Exposing-Your-Business-Services-to-the-Web--Mobile/player?format=html5\" width=\"560\" height=\"315\" allowFullScreen frameBorder=\"0\"></iframe>\n\nCode is available at http://github.com/spboyer/dotnetconf2016","html":"<p><img src=\"/content/images/2016/06/IMG_3368.JPG\" alt=\"\" />\nHad a great time presenting at dotnetconf, even with the A/C broken a the house.  Appreciate the comments and feedback.  Although this was not super sexy new stuff, it is a real business case and a question I get asked more often than you think...\"How do I connect ASP.NET Core to WCF or even node.js to SOAP Services\". </p>\n\n<p>When I started looking at the issue a few weeks ago, there was very little documented, which is why I wanted to put the talk and demo out there. </p>\n\n<iframe src=\"https://channel9.msdn.com/Events/dotnetConf/2016/Exposing-Your-Business-Services-to-the-Web--Mobile/player?format=html5\" width=\"560\" height=\"315\" allowFullScreen frameBorder=\"0\"></iframe>\n\n<p>Code is available at <a href=\"http://github.com/spboyer/dotnetconf2016\">http://github.com/spboyer/dotnetconf2016</a></p>","image":"/content/images/2016/06/IMG_3368.JPG","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1465568457943,"created_by":1,"updated_at":1465570213390,"updated_by":1,"published_at":1465569767560,"published_by":1},{"id":90,"uuid":"9ded9e30-5936-4865-96d8-a5ce23420b48","title":"Weekly Ink - 6/21/16","slug":"weekly-ink","markdown":"![](/content/images/2016/06/pablo-1.png)\nAfter a week of vacation it's good to get back to some technology. Here are some of my favorites from last week, Dockercon 2016 and my various feeds. Enjoy!\n\n###ASP.NET Core\n\n* [Angular 2, React, and Knockout apps on ASP.NET Core](http://blog.stevensanderson.com/2016/05/02/angular2-react-knockout-apps-on-aspnet-core/) - [Steve Sanderson](http://twitter.com/sanderson)\n* [ASP.NET Core and .NET Core Overview](https://weblog.west-wind.com/posts/2016/Jun/13/ASPNET-Core-and-NET-Core-Overview) - [Rick Strahl](http://twitter.com/rickstrahl)\n* [Using ASP.NET Core with the Command Line, Yeoman and Visual Studio Code](https://www.youtube.com/watch?v=3AdRWtdQu0U) - [Jerrie Pelser](http://twitter.com/@jerriepelser)\n<iframe width=\"600\" height=\"400\" src=\"https://www.youtube.com/embed/3AdRWtdQu0U\" frameborder=\"0\" allowfullscreen></iframe>\n\n###Angular 2 / TypeScript\n* [The Future of Declaration Files](https://blogs.msdn.microsoft.com/typescript/2016/06/15/the-future-of-declaration-files/) - TypeScript Team\n* [Angular 2 Router Announcement](http://angularjs.blogspot.com/2016/06/improvements-coming-for-routing-in.html) - Angular Team\n* [Angular 2 RC 2 Released](http://angularjs.blogspot.com/2016/06/rc2-now-available.html) - Angular Team\n\n###Docker\n* [Docker for AWS and Azure](https://blog.docker.com/2016/06/azure-aws-beta/)  - Docker Blog\n* [Free HTTPS certificates for Docker containers running ASP.NET Core RC2 on Microsoft Azure](http://laurentkempe.com/2016/06/20/Free-HTTPS-certificates-for-Docker-containers-running-ASPNET-Core-RC2-on-Microsoft-Azure/) - [Laurent Kempé](https://twitter.com/laurentkempe)\n* [Developer Bliss with Docker for Mac & Docker for Windows](https://blog.codewithdan.com/2016/06/20/developer-bliss-with-docker-for-mac-and-windows/) - [Dan Wahlin](https://twitter.com/danwahlin)\n\n###Random Ink\n* The Monaco Editor is the code editor that powers VS Code has been broken out and open sourced. [https://microsoft.github.io/monaco-editor/index.html](https://microsoft.github.io/monaco-editor/index.html)\n* [The Children's Illustrated Guide to Kubernetes](https://deis.com/blog/2016/kubernetes-illustrated-guide/) - [Matt Butcher](https://twitter.com/technosophos)","html":"<p><img src=\"/content/images/2016/06/pablo-1.png\" alt=\"\" />\nAfter a week of vacation it's good to get back to some technology. Here are some of my favorites from last week, Dockercon 2016 and my various feeds. Enjoy!</p>\n\n<h3 id=\"aspnetcore\">ASP.NET Core</h3>\n\n<ul>\n<li><a href=\"http://blog.stevensanderson.com/2016/05/02/angular2-react-knockout-apps-on-aspnet-core/\">Angular 2, React, and Knockout apps on ASP.NET Core</a> - <a href=\"http://twitter.com/sanderson\">Steve Sanderson</a></li>\n<li><a href=\"https://weblog.west-wind.com/posts/2016/Jun/13/ASPNET-Core-and-NET-Core-Overview\">ASP.NET Core and .NET Core Overview</a> - <a href=\"http://twitter.com/rickstrahl\">Rick Strahl</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=3AdRWtdQu0U\">Using ASP.NET Core with the Command Line, Yeoman and Visual Studio Code</a> - <a href=\"http://twitter.com/@jerriepelser\">Jerrie Pelser</a></li>\n</ul>\n\n<iframe width=\"600\" height=\"400\" src=\"https://www.youtube.com/embed/3AdRWtdQu0U\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h3 id=\"angular2typescript\">Angular 2 / TypeScript</h3>\n\n<ul>\n<li><a href=\"https://blogs.msdn.microsoft.com/typescript/2016/06/15/the-future-of-declaration-files/\">The Future of Declaration Files</a> - TypeScript Team</li>\n<li><a href=\"http://angularjs.blogspot.com/2016/06/improvements-coming-for-routing-in.html\">Angular 2 Router Announcement</a> - Angular Team</li>\n<li><a href=\"http://angularjs.blogspot.com/2016/06/rc2-now-available.html\">Angular 2 RC 2 Released</a> - Angular Team</li>\n</ul>\n\n<h3 id=\"docker\">Docker</h3>\n\n<ul>\n<li><a href=\"https://blog.docker.com/2016/06/azure-aws-beta/\">Docker for AWS and Azure</a>  - Docker Blog</li>\n<li><a href=\"http://laurentkempe.com/2016/06/20/Free-HTTPS-certificates-for-Docker-containers-running-ASPNET-Core-RC2-on-Microsoft-Azure/\">Free HTTPS certificates for Docker containers running ASP.NET Core RC2 on Microsoft Azure</a> - <a href=\"https://twitter.com/laurentkempe\">Laurent Kempé</a></li>\n<li><a href=\"https://blog.codewithdan.com/2016/06/20/developer-bliss-with-docker-for-mac-and-windows/\">Developer Bliss with Docker for Mac &amp; Docker for Windows</a> - <a href=\"https://twitter.com/danwahlin\">Dan Wahlin</a></li>\n</ul>\n\n<h3 id=\"randomink\">Random Ink</h3>\n\n<ul>\n<li>The Monaco Editor is the code editor that powers VS Code has been broken out and open sourced. <a href=\"https://microsoft.github.io/monaco-editor/index.html\">https://microsoft.github.io/monaco-editor/index.html</a></li>\n<li><a href=\"https://deis.com/blog/2016/kubernetes-illustrated-guide/\">The Children's Illustrated Guide to Kubernetes</a> - <a href=\"https://twitter.com/technosophos\">Matt Butcher</a></li>\n</ul>","image":"/content/images/2016/06/pablo-1.png","featured":1,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1466519579440,"created_by":1,"updated_at":1466521735613,"updated_by":1,"published_at":1466514000000,"published_by":1},{"id":91,"uuid":"0a10db6b-0a7e-4a32-b4c7-4328e29d7879","title":"Handing in my ears...","slug":"handing-in-my-ears","markdown":"I'm going to work for Microsoft.  \n\n####What's My Job?\nI will be working on building out content for [docs.microsoft.com](http://docs.microsoft.com), specifically [ASP.NET]() Core and probably other things...\n\n####Disney\nFor the last 4 years I have had the opportunity to work with some very talented people building great products.  Most notably I was a part of the **Disney Cruise Line Navigator** mobile project where I served as the lead architect and developed the mobile services to support the mobile applications ([iOS](https://itunes.apple.com/us/app/disney-cruise-line-navigator/id671153791?mt=8), [Android](https://play.google.com/store/apps/details?id=com.disney.cruise.sept_goo&hl=en)) and recently the complete revamp of [DisneyCruiseLine.com]() bringing in new architecture, technology stacks and process change to teams.\n\nI will miss the people I worked with day to day and being able to be in the \"Disney World\" of technology, but working in the technology stack that fueled me for years, the changes that Microsoft has made and are making is very exciting and I'm looking forward to being on the inside of that curve.\n\n","html":"<p>I'm going to work for Microsoft.  </p>\n\n<h4 id=\"whatsmyjob\">What's My Job?</h4>\n\n<p>I will be working on building out content for <a href=\"http://docs.microsoft.com\">docs.microsoft.com</a>, specifically <a href=\"\">ASP.NET</a> Core and probably other things...</p>\n\n<h4 id=\"disney\">Disney</h4>\n\n<p>For the last 4 years I have had the opportunity to work with some very talented people building great products.  Most notably I was a part of the <strong>Disney Cruise Line Navigator</strong> mobile project where I served as the lead architect and developed the mobile services to support the mobile applications (<a href=\"https://itunes.apple.com/us/app/disney-cruise-line-navigator/id671153791?mt=8\">iOS</a>, <a href=\"https://play.google.com/store/apps/details?id=com.disney.cruise.sept_goo&amp;hl=en\">Android</a>) and recently the complete revamp of <a href=\"\">DisneyCruiseLine.com</a> bringing in new architecture, technology stacks and process change to teams.</p>\n\n<p>I will miss the people I worked with day to day and being able to be in the \"Disney World\" of technology, but working in the technology stack that fueled me for years, the changes that Microsoft has made and are making is very exciting and I'm looking forward to being on the inside of that curve.</p>","image":"/content/images/2016/07/mickeyears.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1468258782298,"created_by":1,"updated_at":1469051819343,"updated_by":1,"published_at":1469048400000,"published_by":1},{"id":92,"uuid":"7ca82ebc-1399-49e5-a14f-cfcd624fa555","title":"Deploying an Angular 2 App to Azure with Github","slug":"deploying-an-angular-2-app-to-azure-with-github","markdown":"![](/content/images/2016/07/Screen-Shot-2016-07-29-at-3-35-02-PM.png)\nRecently John and I took some time away to discuss how to get an Angular 2 application deployed to Azure. There were some challenges here and there with configuration, discussions about \"just wanting to code\" and more; it was a lot of fun. Here is the result of that conversation. \n\nCheck out the [Play by Play on Pluralsight](https://www.pluralsight.com/courses/play-by-play-angular-2-app-deployment-azure-git-john-papa-shayne-boyer), and the All code samples can be found at [github](https://github.com/spboyer/ng2-startingline). \n\n>In this course, John Papa and Shayne Boyer walk through how to build and deploy an Angular 2 app to Azure. You'll learn valuable tips on how to think about cloud deployment, how to mirror production environments locally using Gulp and Express, and how to use tools like Gulp, Github, and npm scripts to quickly see results in Azure. By the end of this course, you'll be ready to work with Azure and Github in your development environment.\n\n[![workshop](/content/images/2016/09/ultimate-angular-workshop-blue-1.png)](http://ftlauderdale.ng-learn.com/?source=shayne)","html":"<p><img src=\"/content/images/2016/07/Screen-Shot-2016-07-29-at-3-35-02-PM.png\" alt=\"\" />\nRecently John and I took some time away to discuss how to get an Angular 2 application deployed to Azure. There were some challenges here and there with configuration, discussions about \"just wanting to code\" and more; it was a lot of fun. Here is the result of that conversation. </p>\n\n<p>Check out the <a href=\"https://www.pluralsight.com/courses/play-by-play-angular-2-app-deployment-azure-git-john-papa-shayne-boyer\">Play by Play on Pluralsight</a>, and the All code samples can be found at <a href=\"https://github.com/spboyer/ng2-startingline\">github</a>. </p>\n\n<blockquote>\n  <p>In this course, John Papa and Shayne Boyer walk through how to build and deploy an Angular 2 app to Azure. You'll learn valuable tips on how to think about cloud deployment, how to mirror production environments locally using Gulp and Express, and how to use tools like Gulp, Github, and npm scripts to quickly see results in Azure. By the end of this course, you'll be ready to work with Azure and Github in your development environment.</p>\n</blockquote>\n\n<p><a href=\"http://ftlauderdale.ng-learn.com/?source=shayne\"><img src=\"/content/images/2016/09/ultimate-angular-workshop-blue-1.png\" alt=\"workshop\" title=\"\" /></a></p>","image":"/content/images/2016/07/Screen-Shot-2016-07-29-at-3-35-02-PM.png","featured":1,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1469796656551,"created_by":1,"updated_at":1472869440805,"updated_by":1,"published_at":1469793600000,"published_by":1},{"id":93,"uuid":"6051e0ca-232d-488a-a8bd-20fbdeeefcde","title":"What's up Docs?","slug":"whats-up-docs","markdown":"![whats up docs](/content/images/2016/08/whats-up-docs.png)\nI put out a survey on twitter a few months ago on \"What was challenging you most about ASP.NET Core\"\n\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">What is challenging you most about <a href=\"https://twitter.com/hashtag/aspnetcore?src=hash\">#aspnetcore</a></p>&mdash; Shayne Boyer (@spboyer) <a href=\"https://twitter.com/spboyer/status/725026985085308928\">April 26, 2016</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n...ironically it was **[Documentation](https://github.com/aspnet/docs)**.\n\nLooking over the list of issues there is a range of topics to cover. Everything from simple variable renaming to full tutorials.\n\nNow I am asking you, the community, what do you want to have in the docs, what's most important to you?  \n\n[ASP.NET](https://github.com/aspnet) is open source, and the [Docs](https://github.com/aspnet/docs) are included in that umbrella. So create issues, +1 to get them prioritized, comment, and share.\n\nASP.NET on Github - https://github.com/aspnet\nASP.NET Docs on - https://github.com/aspnet/docs \n\n","html":"<p><img src=\"/content/images/2016/08/whats-up-docs.png\" alt=\"whats up docs\" />\nI put out a survey on twitter a few months ago on \"What was challenging you most about ASP.NET Core\"</p>\n\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">What is challenging you most about <a href=\"https://twitter.com/hashtag/aspnetcore?src=hash\">#aspnetcore</a></p>&mdash; Shayne Boyer (@spboyer) <a href=\"https://twitter.com/spboyer/status/725026985085308928\">April 26, 2016</a></blockquote>  \n\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<p>...ironically it was <strong><a href=\"https://github.com/aspnet/docs\">Documentation</a></strong>.</p>\n\n<p>Looking over the list of issues there is a range of topics to cover. Everything from simple variable renaming to full tutorials.</p>\n\n<p>Now I am asking you, the community, what do you want to have in the docs, what's most important to you?  </p>\n\n<p><a href=\"https://github.com/aspnet\">ASP.NET</a> is open source, and the <a href=\"https://github.com/aspnet/docs\">Docs</a> are included in that umbrella. So create issues, +1 to get them prioritized, comment, and share.</p>\n\n<p>ASP.NET on Github - <a href=\"https://github.com/aspnet\">https://github.com/aspnet</a> <br />\nASP.NET Docs on - <a href=\"https://github.com/aspnet/docs\">https://github.com/aspnet/docs</a> </p>","image":"/content/images/2016/08/whatsupdocs-header.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":"What's up docs?","meta_description":"What was challenging you most about ASP.NET Core - Documentation? Help the team work on what's important to you.","author_id":1,"created_at":1470088432494,"created_by":1,"updated_at":1470090095651,"updated_by":1,"published_at":1470088800000,"published_by":1},{"id":94,"uuid":"271843ab-6fdf-4002-a722-e2ddd4e72896","title":"Running Windows on an Expansion Drive","slug":"running-windows-on-an-expansion-drive","markdown":"A few years back I made the jump to a Mac for my daily driver development machine for many reasons but there were a few times that I needed to fire up Visual Studio or Visio just for productivity or project specific reasons.\n\nParallels has been my go to for hosting Windows VMs, but with the poor choice of the 256gb drive, cause everything was suppose to be offline, I tend to bump up against the limit more recently.  Cleaning off temp files, recent Windows install files, old projects etc is tedious regardless of the utilities that are available.\n\nI have found a solution, [Transcend makes JetDrive Lite](http://us.transcend-info.com/apple/jetdrivelite/) that sits flush in SD slot on the MacBook Pro and has 64GB, 128GB, and 256GB options ([depending on your MBP version](http://www.transcend-info.com/Support/FAQ-846)). \n\nI grabbed a [128GB version from Amazon for $65.99 USD](http://amzn.to/2bttIse). I would've gotten the 256GB, but my early 2013 MBP only supports the 128GB.\n\nPretty simple to get it installed, just unpack and put it in the slot. Open the Disk Utility and format the drive. Choose *OS X Extended (Journaled)* for the format.\n\n![diskutil](/content/images/2016/08/Screen-Shot-2016-08-17-at-5-18-40-PM.png)\n\nOnce complete you can either create a *new* Parallels VM (pvm) there or move your existing one there.\n\nI have not had any performance issues at all with the drive, in fact it seems to run better.  Only issue I have had is sometimes it appears to be unrecognized, and re-seating the drive (re-inserting) fixes the issue.\n\nIt sits really flush in the side slot, no worries of damage or breaking off which I've had by accidentally leaving a mouse usb dongle in the slot.\n\n![installed](/content/images/2016/08/transcend_drive.png)","html":"<p>A few years back I made the jump to a Mac for my daily driver development machine for many reasons but there were a few times that I needed to fire up Visual Studio or Visio just for productivity or project specific reasons.</p>\n\n<p>Parallels has been my go to for hosting Windows VMs, but with the poor choice of the 256gb drive, cause everything was suppose to be offline, I tend to bump up against the limit more recently.  Cleaning off temp files, recent Windows install files, old projects etc is tedious regardless of the utilities that are available.</p>\n\n<p>I have found a solution, <a href=\"http://us.transcend-info.com/apple/jetdrivelite/\">Transcend makes JetDrive Lite</a> that sits flush in SD slot on the MacBook Pro and has 64GB, 128GB, and 256GB options (<a href=\"http://www.transcend-info.com/Support/FAQ-846\">depending on your MBP version</a>). </p>\n\n<p>I grabbed a <a href=\"http://amzn.to/2bttIse\">128GB version from Amazon for $65.99 USD</a>. I would've gotten the 256GB, but my early 2013 MBP only supports the 128GB.</p>\n\n<p>Pretty simple to get it installed, just unpack and put it in the slot. Open the Disk Utility and format the drive. Choose <em>OS X Extended (Journaled)</em> for the format.</p>\n\n<p><img src=\"/content/images/2016/08/Screen-Shot-2016-08-17-at-5-18-40-PM.png\" alt=\"diskutil\" /></p>\n\n<p>Once complete you can either create a <em>new</em> Parallels VM (pvm) there or move your existing one there.</p>\n\n<p>I have not had any performance issues at all with the drive, in fact it seems to run better.  Only issue I have had is sometimes it appears to be unrecognized, and re-seating the drive (re-inserting) fixes the issue.</p>\n\n<p>It sits really flush in the side slot, no worries of damage or breaking off which I've had by accidentally leaving a mouse usb dongle in the slot.</p>\n\n<p><img src=\"/content/images/2016/08/transcend_drive.png\" alt=\"installed\" /></p>","image":"/content/images/2016/08/macondesk.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1471467897311,"created_by":1,"updated_at":1471469814821,"updated_by":1,"published_at":1471467600000,"published_by":1},{"id":95,"uuid":"44d7c0b7-995a-4054-a185-f4db4a488025","title":"Using Apache Web Server as a reverse-proxy for ASP.NET Core","slug":"using-apache-web-server-as-reverse-proxy-for-aspnetcore","markdown":"Apache is a very popular HTTP server and can be configured as a proxy to redirect HTTP traffic similar to nginx. In this guide, we will learn how to set up Apache on CentOS 7 and use it as a reverse-proxy to welcome incoming connections and redirect them to the ASP.NET Core application running on Kestrel. For this purpose, we will use the *mod_proxy* extension and other related Apache modules.\n\n## Prerequisites\n\n1. A server running CentOS 7, with a standard user account with\n   sudo privilege.\n2. An existing ASP.NET Core application. \n\n## Publish your application\n\nRun `dotnet publish -c Release` from your development environment to package your\napplication into a self-contained directory that can run on your server. The published application must then be copied to the server using SCP, FTP, etc. \n\n>Under a production deployment scenario, a continuous integration workflow does the work of publishing the application and copying the assets to the server. \n\n## Configure a proxy server\n\nA reverse proxy is a common setup for serving dynamic web applications. The reverse proxy terminates the HTTP request and forwards it to the ASP.NET application.\n\nA proxy server is one which forwards client requests to another server instead of fulfilling them itself. A reverse proxy forwards to a fixed destination, typically on behalf of arbitrary clients. In this guide, Apache is being configured as the reverse-proxy running on the same server that Kestrel is serving the ASP.NET Core application. \n\nThese instances could exist on separate physical machines, Docker containers, or a combination of configurations depending on your architectural needs or restrictions.\n\n### Install Apache\n\nInstalling the Apache web server on CentOS is a single command, but first let's update our packages.\n\n```bash\n    sudo yum update -y\n```\n\nThis ensures that all of the installed packages are updated to their latest version. Install Apache using `yum`\n\n```bash\n    sudo yum -y install httpd mod_ssl\n```\n\nThe output should reflect something similar to the following.\n\n```bash\n    Downloading packages:\n    httpd-2.4.6-40.el7.centos.4.x86_64.rpm               | 2.7 MB  00:00:01     \n    Running transaction check\n    Running transaction test\n    Transaction test succeeded\n    Running transaction\n    Installing : httpd-2.4.6-40.el7.centos.4.x86_64      1/1 \n    Verifying  : httpd-2.4.6-40.el7.centos.4.x86_64      1/1 \n\n    Installed:\n    httpd.x86_64 0:2.4.6-40.el7.centos.4                                                                           \n\n    Complete!\n```\n\n>In this example the output reflects httpd.86_64 since the CentOS 7 version is 64 bit. The output may be different for your server. To verify where Apache is installed, run `whereis httpd` from the command line. \n\n### Configure Apache for reverse-proxy\n\nConfiguration files for Apache are located within the `/etc/httpd/conf.d/` directory. Any file with the **.conf** extension will be processed in alphabetical order in addition to the module configuration files in `/etc/httpd/conf.modules.d/`, which contains any configuration files necessary to load modules.\n\nCreate a configuration file for your app, for this example we'll call it `hellomvc.conf`\n\n```text\n    <VirtualHost *:80>\n        ProxyPreserveHost On\n        ProxyPass / http://127.0.0.1:5000/\n        ProxyPassReverse / http://127.0.0.1:5000/\n        ErrorLog /var/log/httpd/hellomvc-error.log\n        CustomLog /var/log/httpd/hellomvc-access.log common\n    </VirtualHost>\n```\n\nThe *VirtualHost* node, of which there can be multiple in a file or on a server in many files, is set to listen on any IP address using port 80. *ProxyRequests* allows or prevents Apache httpd from functioning as a forward proxy server. In a typical reverse proxy or gateway configuration, this option should be set to Off. The next two lines are set to pass all requests received at the root to the machine 127.0.0.1 port 5000 and in reverse. For there to be bi-directional communication, both settings *ProxyPass* and *ProxyPassReverse** are required.\n\nLogging can be configured per VirtualHost using *ErrorLog* and *CustomLog* directives. *ErrorLog* is the location where the server will log errors and *CustomLog* sets the filename and format of log file. In our case this is where request information will be logged. There will be one line for each request.\n\nSave the file, and test the configuration. If everything passes, the response should be `Syntax [OK]`.\n\n```bash\n    sudo service httpd configtest\n```\n\nRestart Apache.\n\n```text\n    sudo systemctl restart httpd\n    sudo systemctl enable httpd\n```\n\n## Monitoring our application\n\nApache is now setup to forward requests made to `http://localhost:80` on to the ASP.NET Core application running on Kestrel at `http://127.0.0.1:5000`.  However, Apache is not setup to manage the Kestrel process. We will use *systemd* and create a service file to start and monitor the underlying web app. *systemd* is an init system that provides many powerful features for starting, stopping and managing processes. \n\n\n### Create the service file\n\nCreate the service definition file \n\n```bash\n    sudo nano /etc/systemd/system/kestrel-hellomvc.service\n```\n\nAn example service file for our application.\n\n```text\n[Unit]\n    Description=Example .NET Web API Application running on CentOS 7\n\n    [Service]\n    ExecStart=/usr/local/bin/dotnet /var/aspnetcore/hellomvc/hellomvc.dll\n    Restart=always\n    RestartSec=10                                          # Restart service after 10 seconds if dotnet service crashes\n    SyslogIdentifier=dotnet-example\n    User=apache\n    Environment=ASPNETCORE_ENVIRONMENT=Production \n\n    [Install]\n    WantedBy=multi-user.target\n```\n\n>**User** If *apache* is not used by your configuration, the user defined here must be created first and given proper ownership for files\n\nSave the file and enable the service.\n\n```bash\n    systemctl enable kestrel-hellomvc.service\n```\n\nStart the service and verify that it is running.\n\n```\n    systemctl start kestrel-hellomvc.service\n    systemctl status kestrel-hellomvc.service\n\n    ● kestrel-hellomvc.service - Example .NET Web API Application running on CentOS 7\n        Loaded: loaded (/etc/systemd/system/kestrel-hellomvc.service; enabled)\n        Active: active (running) since Thu 2016-10-18 04:09:35 NZDT; 35s ago\n    Main PID: 9021 (dotnet)\n        CGroup: /system.slice/kestrel-hellomvc.service\n                └─9021 /usr/local/bin/dotnet /var/aspnetcore/hellomvc/hellomvc.dll\n```\n\nWith the reverse-proxy configured and Kestrel managed through systemd, the web application is fully configured and can be accessed from a browser on the local machine at `http://localhost`. Inspecting the response headers, the **Server** still shows the ASP.NET Core application being served by Kestrel.\n\n```text\n    HTTP/1.1 200 OK\n    Date: Tue, 11 Oct 2016 16:22:23 GMT\n    Server: Kestrel\n    Keep-Alive: timeout=5, max=98\n    Connection: Keep-Alive\n    Transfer-Encoding: chunked\n```\n\n### Viewing logs\n\nSince the web application using Kestrel is managed using systemd, all events and processes are logged to a centralized journal. However, this journal includes all entries for all services and processes managed by systemd. To view the `kestrel-hellomvc.service` specific items, use the following command.\n\n```bash\n    sudo journalctl -fu kestrel-hellomvc.service\n```\n\nFor further filtering, time options such as `--since today`, `--until 1 hour ago` or a combination of these can reduce the amount of entries returned.\n\n```bash\n    sudo journalctl -fu kestrel-hellomvc.service --since \"2016-10-18\" --until \"2016-10-18 04:00\"\n```\n\n## Securing our application\n\n### Configure firewall\n\n*Firewalld* is a dynamic daemon to manage firewall with support for network zones, although you can still use iptables to manage ports and packet filtering; it is not recommended to use them both at the same time. Firewalld should be installed by default, if not use yum to install it.\n\n```bash\n    sudo yum install firewalld -y\n```\n\nUsing `firewalld` you can open only the ports needed for the application. In this case, port 80 and 443 are used. The following command permanently sets these to open.\n\n```bash\n    sudo firewall-cmd --add-port=80/tcp --permanent\n    sudo firewall-cmd --add-port=443/tcp --permanent\n```\n\nReload the firewall settings, and check the available services, ports on the default zone. Options are available by inspecting `firewall-cmd -h`\n\n```bash \n    sudo firewall-cmd --reload\n    sudo firewall-cmd --list-all\n```\n\n```bash\n    public (default, active)\n    interfaces: eth0\n    sources: \n    services: dhcpv6-client\n    ports: 443/tcp 80/tcp\n    masquerade: no\n    forward-ports: \n    icmp-blocks: \n    rich rules: \n```\n\n### SSL configuration\n\nTo configure Apache for SSL, the mod_ssl module is used.  This was installed initially when we installed the `httpd` module. If it was missed or not installed, use yum to add it to your configuration.\n\n```bash\n    sudo yum install mod_ssl\n```\nTo enforce SSL, install `mod_rewrite`\n\n```bash\n    sudo yum install mod_rewrite\n```\n\nThe `hellomvc.conf` file that was created for this example needs to be modified to enable the rewrite as well as adding the new **VirtualHost** section for HTTPS.\n\n```text\n    <VirtualHost *:80>\n        RewriteEngine On\n        RewriteCond %{HTTPS} !=on\n        RewriteRule ^/?(.*) https://%{SERVER_NAME}/ [R,L]\n    </VirtualHost>\n\n    <VirtualHost *:443>\n        ProxyPreserveHost On\n        ProxyPass / http://127.0.0.1:5000/\n        ProxyPassReverse / http://127.0.0.1:5000/\n        ErrorLog /var/log/httpd/hellomvc-error.log\n        CustomLog /var/log/httpd/hellomvc-access.log common\n        SSLEngine on\n        SSLProtocol all -SSLv2\n        SSLCipherSuite ALL:!ADH:!EXPORT:!SSLv2:!RC4+RSA:+HIGH:+MEDIUM:!LOW:!RC4\n        SSLCertificateFile /etc/pki/tls/certs/localhost.crt\n        SSLCertificateKeyFile /etc/pki/tls/private/localhost.key\n    </VirtualHost>    \n```\n\nThis example is using a locally generated certificate. **SSLCertificateFile** should be your primary certificate file for your domain name. **SSLCertificateKeyFile** should be the key file generated when you created the CSR. **SSLCertificateChainFile** should be the intermediate certificate file (if any) that was supplied by your certificate authority\n\nSave the file, and test the configuration.\n\n```bash\n    sudo service httpd configtest\n```\n\nRestart Apache.\n\n```bash\n    sudo systemctl restart httpd\n```\n\n## Additional Apache suggestions\n\n\n### Additional Headers \nIn order to secure against malicious attacks there are a few headers that should either be modified or added. Ensure that the `mod_headers` module is installed.\n\n```bash\n    sudo yum install mod_headers\n```\n\n#### Secure Apache from clickjacking\nClickjacking is a malicious technique to collect an infected user's clicks. Clickjacking tricks the victim (visitor) into clicking on an infected site. Use X-FRAME-OPTIONS to secure your site.\n\nEdit the httpd.conf file.\n\n```bash\n    sudo nano /etc/httpd/conf/httpd.conf\n```\n\nAdd the the line `Header append X-FRAME-OPTIONS \"SAMEORIGIN\"` and save the file, then restart Apache.\n\n#### MIME-type sniffing\n\nThis header prevents Internet Explorer from MIME-sniffing a response away from the declared content-type as the header instructs the browser not to override the response content type. With the nosniff option, if the server says the content is text/html, the browser will render it as text/html.\n\nEdit the httpd.conf file.\n\n```bash\n    sudo nano /etc/httpd/conf/httpd.conf\n```\n\nAdd the the line `Header set X-Content-Type-Options \"nosniff\"` and save the file, then restart Apache.\n\n### Load Balancing \n\nThis example shows how to setup and configure Apache on CentOS 7 and Kestrel on the same instance machine.  However, in order to not have a single point of failure; using *mod_proxy_balancer* and modifying the VirtualHost would allow for managing mutliple instances of the web applications behind the Apache proxy server.\n\n```bash\n    sudo yum install mod_proxy_balancer\n```\n\nIn the configuration file, an additional instance of the `hellomvc` app has been setup to run on port 5001 and a the *Proxy* section has been set with a balaber configuration with two members to load balance *byrequests*.\n\n```text\n    <VirtualHost *:80>\n        RewriteEngine On\n        RewriteCond %{HTTPS} !=on\n        RewriteRule ^/?(.*) https://%{SERVER_NAME}/ [R,L]\n    </VirtualHost>\n\n    <VirtualHost *:443>\n            ProxyPass / balancer://mycluster/ \n\n            ProxyPassReverse / http://127.0.0.1:5000/\n            ProxyPassReverse / http://127.0.0.1:5001/\n\n            <Proxy balancer://mycluster>\n                BalancerMember http://127.0.0.1:5000\n                BalancerMember http://127.0.0.1:5001 \n                ProxySet lbmethod=byrequests\n            </Proxy>\n\n            <Location />\n                SetHandler balancer\n            </Location>\n            ErrorLog /var/log/httpd/hellomvc-error.log\n            CustomLog /var/log/httpd/hellomvc-access.log common\n            SSLEngine on\n            SSLProtocol all -SSLv2\n            SSLCipherSuite ALL:!ADH:!EXPORT:!SSLv2:!RC4+RSA:+HIGH:+MEDIUM:!LOW:!RC4\n            SSLCertificateFile /etc/pki/tls/certs/localhost.crt\n            SSLCertificateKeyFile /etc/pki/tls/private/localhost.key\n    </VirtualHost>\n```\n\n### Rate Limits\nUsing `mod_ratelimit`, which is included in the `htttpd` module you can limit the amount of bandwidth of clients. \n\n```bash\n    sudo nano /etc/httpd/conf.d/ratelimit.conf\n```\nThe example file limits bandwidth as 600 KB/sec under the root location.\n\n```text\n    <IfModule mod_ratelimit.c>\n        <Location />\n            SetOutputFilter RATE_LIMIT\n            SetEnv rate-limit 600\n        </Location>\n    </IfModule>\n```","html":"<p>Apache is a very popular HTTP server and can be configured as a proxy to redirect HTTP traffic similar to nginx. In this guide, we will learn how to set up Apache on CentOS 7 and use it as a reverse-proxy to welcome incoming connections and redirect them to the ASP.NET Core application running on Kestrel. For this purpose, we will use the <em>mod_proxy</em> extension and other related Apache modules.</p>\n\n<h2 id=\"prerequisites\">Prerequisites</h2>\n\n<ol>\n<li>A server running CentOS 7, with a standard user account with <br />\nsudo privilege.</li>\n<li>An existing ASP.NET Core application. </li>\n</ol>\n\n<h2 id=\"publishyourapplication\">Publish your application</h2>\n\n<p>Run <code>dotnet publish -c Release</code> from your development environment to package your <br />\napplication into a self-contained directory that can run on your server. The published application must then be copied to the server using SCP, FTP, etc. </p>\n\n<blockquote>\n  <p>Under a production deployment scenario, a continuous integration workflow does the work of publishing the application and copying the assets to the server. </p>\n</blockquote>\n\n<h2 id=\"configureaproxyserver\">Configure a proxy server</h2>\n\n<p>A reverse proxy is a common setup for serving dynamic web applications. The reverse proxy terminates the HTTP request and forwards it to the ASP.NET application.</p>\n\n<p>A proxy server is one which forwards client requests to another server instead of fulfilling them itself. A reverse proxy forwards to a fixed destination, typically on behalf of arbitrary clients. In this guide, Apache is being configured as the reverse-proxy running on the same server that Kestrel is serving the ASP.NET Core application. </p>\n\n<p>These instances could exist on separate physical machines, Docker containers, or a combination of configurations depending on your architectural needs or restrictions.</p>\n\n<h3 id=\"installapache\">Install Apache</h3>\n\n<p>Installing the Apache web server on CentOS is a single command, but first let's update our packages.</p>\n\n<pre><code class=\"language-bash\">    sudo yum update -y\n</code></pre>\n\n<p>This ensures that all of the installed packages are updated to their latest version. Install Apache using <code>yum</code></p>\n\n<pre><code class=\"language-bash\">    sudo yum -y install httpd mod_ssl\n</code></pre>\n\n<p>The output should reflect something similar to the following.</p>\n\n<pre><code class=\"language-bash\">    Downloading packages:\n    httpd-2.4.6-40.el7.centos.4.x86_64.rpm               | 2.7 MB  00:00:01     \n    Running transaction check\n    Running transaction test\n    Transaction test succeeded\n    Running transaction\n    Installing : httpd-2.4.6-40.el7.centos.4.x86_64      1/1 \n    Verifying  : httpd-2.4.6-40.el7.centos.4.x86_64      1/1 \n\n    Installed:\n    httpd.x86_64 0:2.4.6-40.el7.centos.4                                                                           \n\n    Complete!\n</code></pre>\n\n<blockquote>\n  <p>In this example the output reflects httpd.86_64 since the CentOS 7 version is 64 bit. The output may be different for your server. To verify where Apache is installed, run <code>whereis httpd</code> from the command line. </p>\n</blockquote>\n\n<h3 id=\"configureapacheforreverseproxy\">Configure Apache for reverse-proxy</h3>\n\n<p>Configuration files for Apache are located within the <code>/etc/httpd/conf.d/</code> directory. Any file with the <strong>.conf</strong> extension will be processed in alphabetical order in addition to the module configuration files in <code>/etc/httpd/conf.modules.d/</code>, which contains any configuration files necessary to load modules.</p>\n\n<p>Create a configuration file for your app, for this example we'll call it <code>hellomvc.conf</code></p>\n\n<pre><code class=\"language-text\">    &lt;VirtualHost *:80&gt;\n        ProxyPreserveHost On\n        ProxyPass / http://127.0.0.1:5000/\n        ProxyPassReverse / http://127.0.0.1:5000/\n        ErrorLog /var/log/httpd/hellomvc-error.log\n        CustomLog /var/log/httpd/hellomvc-access.log common\n    &lt;/VirtualHost&gt;\n</code></pre>\n\n<p>The <em>VirtualHost</em> node, of which there can be multiple in a file or on a server in many files, is set to listen on any IP address using port 80. <em>ProxyRequests</em> allows or prevents Apache httpd from functioning as a forward proxy server. In a typical reverse proxy or gateway configuration, this option should be set to Off. The next two lines are set to pass all requests received at the root to the machine 127.0.0.1 port 5000 and in reverse. For there to be bi-directional communication, both settings <em>ProxyPass</em> and <em>ProxyPassReverse</em>* are required.</p>\n\n<p>Logging can be configured per VirtualHost using <em>ErrorLog</em> and <em>CustomLog</em> directives. <em>ErrorLog</em> is the location where the server will log errors and <em>CustomLog</em> sets the filename and format of log file. In our case this is where request information will be logged. There will be one line for each request.</p>\n\n<p>Save the file, and test the configuration. If everything passes, the response should be <code>Syntax [OK]</code>.</p>\n\n<pre><code class=\"language-bash\">    sudo service httpd configtest\n</code></pre>\n\n<p>Restart Apache.</p>\n\n<pre><code class=\"language-text\">    sudo systemctl restart httpd\n    sudo systemctl enable httpd\n</code></pre>\n\n<h2 id=\"monitoringourapplication\">Monitoring our application</h2>\n\n<p>Apache is now setup to forward requests made to <code>http://localhost:80</code> on to the ASP.NET Core application running on Kestrel at <code>http://127.0.0.1:5000</code>.  However, Apache is not setup to manage the Kestrel process. We will use <em>systemd</em> and create a service file to start and monitor the underlying web app. <em>systemd</em> is an init system that provides many powerful features for starting, stopping and managing processes. </p>\n\n<h3 id=\"createtheservicefile\">Create the service file</h3>\n\n<p>Create the service definition file </p>\n\n<pre><code class=\"language-bash\">    sudo nano /etc/systemd/system/kestrel-hellomvc.service\n</code></pre>\n\n<p>An example service file for our application.</p>\n\n<pre><code class=\"language-text\">[Unit]\n    Description=Example .NET Web API Application running on CentOS 7\n\n    [Service]\n    ExecStart=/usr/local/bin/dotnet /var/aspnetcore/hellomvc/hellomvc.dll\n    Restart=always\n    RestartSec=10                                          # Restart service after 10 seconds if dotnet service crashes\n    SyslogIdentifier=dotnet-example\n    User=apache\n    Environment=ASPNETCORE_ENVIRONMENT=Production \n\n    [Install]\n    WantedBy=multi-user.target\n</code></pre>\n\n<blockquote>\n  <p><strong>User</strong> If <em>apache</em> is not used by your configuration, the user defined here must be created first and given proper ownership for files</p>\n</blockquote>\n\n<p>Save the file and enable the service.</p>\n\n<pre><code class=\"language-bash\">    systemctl enable kestrel-hellomvc.service\n</code></pre>\n\n<p>Start the service and verify that it is running.</p>\n\n<pre><code>    systemctl start kestrel-hellomvc.service\n    systemctl status kestrel-hellomvc.service\n\n    ● kestrel-hellomvc.service - Example .NET Web API Application running on CentOS 7\n        Loaded: loaded (/etc/systemd/system/kestrel-hellomvc.service; enabled)\n        Active: active (running) since Thu 2016-10-18 04:09:35 NZDT; 35s ago\n    Main PID: 9021 (dotnet)\n        CGroup: /system.slice/kestrel-hellomvc.service\n                └─9021 /usr/local/bin/dotnet /var/aspnetcore/hellomvc/hellomvc.dll\n</code></pre>\n\n<p>With the reverse-proxy configured and Kestrel managed through systemd, the web application is fully configured and can be accessed from a browser on the local machine at <code>http://localhost</code>. Inspecting the response headers, the <strong>Server</strong> still shows the ASP.NET Core application being served by Kestrel.</p>\n\n<pre><code class=\"language-text\">    HTTP/1.1 200 OK\n    Date: Tue, 11 Oct 2016 16:22:23 GMT\n    Server: Kestrel\n    Keep-Alive: timeout=5, max=98\n    Connection: Keep-Alive\n    Transfer-Encoding: chunked\n</code></pre>\n\n<h3 id=\"viewinglogs\">Viewing logs</h3>\n\n<p>Since the web application using Kestrel is managed using systemd, all events and processes are logged to a centralized journal. However, this journal includes all entries for all services and processes managed by systemd. To view the <code>kestrel-hellomvc.service</code> specific items, use the following command.</p>\n\n<pre><code class=\"language-bash\">    sudo journalctl -fu kestrel-hellomvc.service\n</code></pre>\n\n<p>For further filtering, time options such as <code>--since today</code>, <code>--until 1 hour ago</code> or a combination of these can reduce the amount of entries returned.</p>\n\n<pre><code class=\"language-bash\">    sudo journalctl -fu kestrel-hellomvc.service --since \"2016-10-18\" --until \"2016-10-18 04:00\"\n</code></pre>\n\n<h2 id=\"securingourapplication\">Securing our application</h2>\n\n<h3 id=\"configurefirewall\">Configure firewall</h3>\n\n<p><em>Firewalld</em> is a dynamic daemon to manage firewall with support for network zones, although you can still use iptables to manage ports and packet filtering; it is not recommended to use them both at the same time. Firewalld should be installed by default, if not use yum to install it.</p>\n\n<pre><code class=\"language-bash\">    sudo yum install firewalld -y\n</code></pre>\n\n<p>Using <code>firewalld</code> you can open only the ports needed for the application. In this case, port 80 and 443 are used. The following command permanently sets these to open.</p>\n\n<pre><code class=\"language-bash\">    sudo firewall-cmd --add-port=80/tcp --permanent\n    sudo firewall-cmd --add-port=443/tcp --permanent\n</code></pre>\n\n<p>Reload the firewall settings, and check the available services, ports on the default zone. Options are available by inspecting <code>firewall-cmd -h</code></p>\n\n<pre><code class=\"language-bash \">    sudo firewall-cmd --reload\n    sudo firewall-cmd --list-all\n</code></pre>\n\n<pre><code class=\"language-bash\">    public (default, active)\n    interfaces: eth0\n    sources: \n    services: dhcpv6-client\n    ports: 443/tcp 80/tcp\n    masquerade: no\n    forward-ports: \n    icmp-blocks: \n    rich rules: \n</code></pre>\n\n<h3 id=\"sslconfiguration\">SSL configuration</h3>\n\n<p>To configure Apache for SSL, the mod_ssl module is used.  This was installed initially when we installed the <code>httpd</code> module. If it was missed or not installed, use yum to add it to your configuration.</p>\n\n<pre><code class=\"language-bash\">    sudo yum install mod_ssl\n</code></pre>\n\n<p>To enforce SSL, install <code>mod_rewrite</code></p>\n\n<pre><code class=\"language-bash\">    sudo yum install mod_rewrite\n</code></pre>\n\n<p>The <code>hellomvc.conf</code> file that was created for this example needs to be modified to enable the rewrite as well as adding the new <strong>VirtualHost</strong> section for HTTPS.</p>\n\n<pre><code class=\"language-text\">    &lt;VirtualHost *:80&gt;\n        RewriteEngine On\n        RewriteCond %{HTTPS} !=on\n        RewriteRule ^/?(.*) https://%{SERVER_NAME}/ [R,L]\n    &lt;/VirtualHost&gt;\n\n    &lt;VirtualHost *:443&gt;\n        ProxyPreserveHost On\n        ProxyPass / http://127.0.0.1:5000/\n        ProxyPassReverse / http://127.0.0.1:5000/\n        ErrorLog /var/log/httpd/hellomvc-error.log\n        CustomLog /var/log/httpd/hellomvc-access.log common\n        SSLEngine on\n        SSLProtocol all -SSLv2\n        SSLCipherSuite ALL:!ADH:!EXPORT:!SSLv2:!RC4+RSA:+HIGH:+MEDIUM:!LOW:!RC4\n        SSLCertificateFile /etc/pki/tls/certs/localhost.crt\n        SSLCertificateKeyFile /etc/pki/tls/private/localhost.key\n    &lt;/VirtualHost&gt;    \n</code></pre>\n\n<p>This example is using a locally generated certificate. <strong>SSLCertificateFile</strong> should be your primary certificate file for your domain name. <strong>SSLCertificateKeyFile</strong> should be the key file generated when you created the CSR. <strong>SSLCertificateChainFile</strong> should be the intermediate certificate file (if any) that was supplied by your certificate authority</p>\n\n<p>Save the file, and test the configuration.</p>\n\n<pre><code class=\"language-bash\">    sudo service httpd configtest\n</code></pre>\n\n<p>Restart Apache.</p>\n\n<pre><code class=\"language-bash\">    sudo systemctl restart httpd\n</code></pre>\n\n<h2 id=\"additionalapachesuggestions\">Additional Apache suggestions</h2>\n\n<h3 id=\"additionalheaders\">Additional Headers</h3>\n\n<p>In order to secure against malicious attacks there are a few headers that should either be modified or added. Ensure that the <code>mod_headers</code> module is installed.</p>\n\n<pre><code class=\"language-bash\">    sudo yum install mod_headers\n</code></pre>\n\n<h4 id=\"secureapachefromclickjacking\">Secure Apache from clickjacking</h4>\n\n<p>Clickjacking is a malicious technique to collect an infected user's clicks. Clickjacking tricks the victim (visitor) into clicking on an infected site. Use X-FRAME-OPTIONS to secure your site.</p>\n\n<p>Edit the httpd.conf file.</p>\n\n<pre><code class=\"language-bash\">    sudo nano /etc/httpd/conf/httpd.conf\n</code></pre>\n\n<p>Add the the line <code>Header append X-FRAME-OPTIONS \"SAMEORIGIN\"</code> and save the file, then restart Apache.</p>\n\n<h4 id=\"mimetypesniffing\">MIME-type sniffing</h4>\n\n<p>This header prevents Internet Explorer from MIME-sniffing a response away from the declared content-type as the header instructs the browser not to override the response content type. With the nosniff option, if the server says the content is text/html, the browser will render it as text/html.</p>\n\n<p>Edit the httpd.conf file.</p>\n\n<pre><code class=\"language-bash\">    sudo nano /etc/httpd/conf/httpd.conf\n</code></pre>\n\n<p>Add the the line <code>Header set X-Content-Type-Options \"nosniff\"</code> and save the file, then restart Apache.</p>\n\n<h3 id=\"loadbalancing\">Load Balancing</h3>\n\n<p>This example shows how to setup and configure Apache on CentOS 7 and Kestrel on the same instance machine.  However, in order to not have a single point of failure; using <em>mod_proxy_balancer</em> and modifying the VirtualHost would allow for managing mutliple instances of the web applications behind the Apache proxy server.</p>\n\n<pre><code class=\"language-bash\">    sudo yum install mod_proxy_balancer\n</code></pre>\n\n<p>In the configuration file, an additional instance of the <code>hellomvc</code> app has been setup to run on port 5001 and a the <em>Proxy</em> section has been set with a balaber configuration with two members to load balance <em>byrequests</em>.</p>\n\n<pre><code class=\"language-text\">    &lt;VirtualHost *:80&gt;\n        RewriteEngine On\n        RewriteCond %{HTTPS} !=on\n        RewriteRule ^/?(.*) https://%{SERVER_NAME}/ [R,L]\n    &lt;/VirtualHost&gt;\n\n    &lt;VirtualHost *:443&gt;\n            ProxyPass / balancer://mycluster/ \n\n            ProxyPassReverse / http://127.0.0.1:5000/\n            ProxyPassReverse / http://127.0.0.1:5001/\n\n            &lt;Proxy balancer://mycluster&gt;\n                BalancerMember http://127.0.0.1:5000\n                BalancerMember http://127.0.0.1:5001 \n                ProxySet lbmethod=byrequests\n            &lt;/Proxy&gt;\n\n            &lt;Location /&gt;\n                SetHandler balancer\n            &lt;/Location&gt;\n            ErrorLog /var/log/httpd/hellomvc-error.log\n            CustomLog /var/log/httpd/hellomvc-access.log common\n            SSLEngine on\n            SSLProtocol all -SSLv2\n            SSLCipherSuite ALL:!ADH:!EXPORT:!SSLv2:!RC4+RSA:+HIGH:+MEDIUM:!LOW:!RC4\n            SSLCertificateFile /etc/pki/tls/certs/localhost.crt\n            SSLCertificateKeyFile /etc/pki/tls/private/localhost.key\n    &lt;/VirtualHost&gt;\n</code></pre>\n\n<h3 id=\"ratelimits\">Rate Limits</h3>\n\n<p>Using <code>mod_ratelimit</code>, which is included in the <code>htttpd</code> module you can limit the amount of bandwidth of clients. </p>\n\n<pre><code class=\"language-bash\">    sudo nano /etc/httpd/conf.d/ratelimit.conf\n</code></pre>\n\n<p>The example file limits bandwidth as 600 KB/sec under the root location.</p>\n\n<pre><code class=\"language-text\">    &lt;IfModule mod_ratelimit.c&gt;\n        &lt;Location /&gt;\n            SetOutputFilter RATE_LIMIT\n            SetEnv rate-limit 600\n        &lt;/Location&gt;\n    &lt;/IfModule&gt;\n</code></pre>","image":"/content/images/2016/10/centos.jpg","featured":1,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1476909039466,"created_by":1,"updated_at":1476909404666,"updated_by":1,"published_at":1476909294398,"published_by":1},{"id":96,"uuid":"bd053dc8-1f93-4471-8e2f-7eea87f738c0","title":"Configure Docker for Windows under Parallels","slug":"configure-docker-for-windows-under-parallels","markdown":"I use OSX as my primary development machine but still at time run to Visual Studio for work stuff, new features I'm testing etc.  \n\nThe most recent reason is [Visual Studio '15 Preview](https://www.visualstudio.com/visual-studio-pre-release-downloads/) and the new Docker features that are quite awesome.  I didn't want to fire up the ThinkPad, connect it to the big monitor etc; so it was time to get Docker working on Parallels.  Come to find out it was a few simple configurations.\n\n![docker-parallels](/content/images/2016/11/docker-parallels.png)\n\nCheck the \"Enable nested virtualization\" option under **Hardware / CPU & Memory** - Advanced Settings of your Windows 10 VM.\n\nAnother setting I might suggest is setting the Memory somewhere between 4 - 8 GB of RAM or Docker may not start.\n\n####Shared Drives\n\nA required configuration is to setup Shared Drives in Docker for Windows. The setting is required for the volume mapping and debugging support.\n\nRight click the Docker icon in the System Tray, click Settings and select Shared Drives.\n\n![shared-drives](/content/images/2016/11/settings-shared-drives-win.png)\n\n####Docker Related Content\n\n* [Building .NET Docker Images](https://docs.microsoft.com/en-us/dotnet/articles/core/docker/building-net-docker-images)\n* [Visual Studio 2015 Tools for Docker ](https://docs.microsoft.com/en-us/dotnet/articles/core/docker/visual-studio-tools-for-docker)\n* [Running .NET 4.6 Framework console applications in Windows containers](https://docs.microsoft.com/en-us/dotnet/articles/framework/docker/console)\n* [Migrating ASP.NET MVC 4.6 Applications to Windows Containers](https://docs.microsoft.com/en-us/dotnet/articles/framework/docker/aspnetmvc)\n","html":"<p>I use OSX as my primary development machine but still at time run to Visual Studio for work stuff, new features I'm testing etc.  </p>\n\n<p>The most recent reason is <a href=\"https://www.visualstudio.com/visual-studio-pre-release-downloads/\">Visual Studio '15 Preview</a> and the new Docker features that are quite awesome.  I didn't want to fire up the ThinkPad, connect it to the big monitor etc; so it was time to get Docker working on Parallels.  Come to find out it was a few simple configurations.</p>\n\n<p><img src=\"/content/images/2016/11/docker-parallels.png\" alt=\"docker-parallels\" /></p>\n\n<p>Check the \"Enable nested virtualization\" option under <strong>Hardware / CPU &amp; Memory</strong> - Advanced Settings of your Windows 10 VM.</p>\n\n<p>Another setting I might suggest is setting the Memory somewhere between 4 - 8 GB of RAM or Docker may not start.</p>\n\n<h4 id=\"shareddrives\">Shared Drives</h4>\n\n<p>A required configuration is to setup Shared Drives in Docker for Windows. The setting is required for the volume mapping and debugging support.</p>\n\n<p>Right click the Docker icon in the System Tray, click Settings and select Shared Drives.</p>\n\n<p><img src=\"/content/images/2016/11/settings-shared-drives-win.png\" alt=\"shared-drives\" /></p>\n\n<h4 id=\"dockerrelatedcontent\">Docker Related Content</h4>\n\n<ul>\n<li><a href=\"https://docs.microsoft.com/en-us/dotnet/articles/core/docker/building-net-docker-images\">Building .NET Docker Images</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/dotnet/articles/core/docker/visual-studio-tools-for-docker\">Visual Studio 2015 Tools for Docker </a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/dotnet/articles/framework/docker/console\">Running .NET 4.6 Framework console applications in Windows containers</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/dotnet/articles/framework/docker/aspnetmvc\">Migrating ASP.NET MVC 4.6 Applications to Windows Containers</a></li>\n</ul>","image":"/content/images/2016/11/docker-parallels.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1479059761095,"created_by":1,"updated_at":1479061015815,"updated_by":1,"published_at":1479061015815,"published_by":1},{"id":97,"uuid":"1dc9e24c-9380-4541-afb1-5f3e0e7f3c37","title":"Troubleshooting Installing .NET Core 1.1 RTM on OSX","slug":"troubleshooting-installing-net-core-1-1-rtm-on-osx","markdown":".NET Core 1.1 RTM was announced yesterday along with [Visual Studio for Mac](https://t.co/3bGzj89idU)! So of course, I jumped right over to install them both. During the install of the 1.1 version of .NET Core from the [downloads page](https://www.microsoft.com/net/download/core), hit a snag on OSX. \n\nIf you have seen recent Scott Hanselman talk ASP.NET Core, there is a slide he uses where he references \"How do you like your ASP.NET?\"\n\n![hanselman-steak](/content/images/2016/11/hanselmansteak.png)\n\nI'm somewhere between \"medium-rare\" and \"medium-well\", depends on the machine I am using. \n\nI had the preview bits installed which had a version of `1.0.0-preview2.1-003155` and now the RC 1.1 is released with version of `1.0.0-preview2-1-003177`. When running the command `dotnet --info` I was getting the incorrect version even though I was using the proper installer (multiple times) but to no avail nothing was getting updated. Or at least I thought.\n\nThe issue here is that semver was taking over.  The previous version number of 1.0.0-preview2.1-003155 is actually a higher version number than 1.0.0-preview2-1-003177.  Why? Because 2.1 is higher than 2-1 in versioning.\n\nSo how do we fix this?\n\nUsing the downloads to install the RTM relase:\n \n* dotnet-osx-x64.1.1.0.pkg\n* dotnet-dev-osx-x64.1.0.0-preview2-1-003177.pkg\n \n`dotnet --info` was returning\n \n```\n.NET Command Line Tools (1.0.0-preview2-1-003155)\n \nProduct Information:\n Version:            1.0.0-preview2-1-003155\n Commit SHA-1 hash:  d7b0190bd4\n \nRuntime Environment:\n OS Name:     Mac OS X\n OS Version:  10.12\n OS Platform: Darwin\n RID:         osx.10.12-x64\n```\n\nThe version was incorrect, I was looking for 1.0.0-preview2-1-003177.\n\nThere is a \"Reset my dotnet\" or [uinstall](https://github.com/dotnet/cli/tree/rel/1.0.0/scripts/obtain/uninstall) for [OSX](https://github.com/dotnet/cli/blob/rel/1.0.0/scripts/obtain/uninstall/dotnet-uninstall-pkgs.sh) and [Linux](https://github.com/dotnet/cli/blob/rel/1.0.0/scripts/obtain/uninstall/dotnet-uninstall-debian-packages.sh) in the [cli Github Repo](https://github.com/dotnet/cli).\n\nI didn't want to remove all of the versions, but looking at the script, it did give me the insight needed to know how to get rid of the one version.\n\nGet the list of the packages installed running the following command:\n\n```\npkgutil --pkgs | grep \"com.microsoft.dotnet\"\n``` \n\nOn my machine I had the following:\n\n```\ncom.microsoft.dotnet.dev.1.0.0-preview2-003121.component.osx.x64\ncom.microsoft.dotnet.dev.1.0.0-preview2-003131.component.osx.x64\ncom.microsoft.dotnet.dev.1.0.0-preview2-1-003177.component.osx.x64\ncom.microsoft.dotnet.dev.1.0.0-preview2.1-003155.component.osx.x64\ncom.microsoft.dotnet.hostfxr.1.1.0.component.osx.x64\ncom.microsoft.dotnet.hostfxr.component.osx.x64\ncom.microsoft.dotnet.sharedframework.Microsoft.NETCore.App.1.0.0.component.osx.x64\ncom.microsoft.dotnet.sharedframework.Microsoft.NETCore.App.1.0.1.component.osx.x64\ncom.microsoft.dotnet.sharedframework.Microsoft.NETCore.App.1.1.0-preview1-001100-00.component.osx.x64\ncom.microsoft.dotnet.sharedframework.Microsoft.NETCore.App.1.1.0.component.osx.x64\ncom.microsoft.dotnet.sharedhost.component.osx.x64\n```\n\nThere were a couple of bad seeds here I needed to remove, the **preview2.1-003155** version and **1.1.0-preview1-001100-00**\n\nRemove the preview version\n```\nsudo pkgutil --force --forget \"com.microsoft.dotnet.dev.1.0.0-preview2.1-003155.component.osx.x64\"\nrm -rf /usr/local/share/dotnet/sdk/1.0.0-preview2.1-003155/\n```\n\nRemove the preview1.1 version \n```\nsudo pkgutil --force --forget \"com.microsoft.dotnet.sharedframework.Microsoft.NETCore.App.1.1.0-preview1-001100-00.component.osx.x64\"\n```\n\nThe last step is to remove any SDK(s) that are installed.  SDK install folders are located in **/usr/local/share/dotnet/sdk/<version>**\n\n```\nrm -rf /usr/local/share/dotnet/sdk/1.0.0-preview2.1-003155/\n```\n\nClose and restart any terminal / bash/ zsh shells and run `dotnet --info` to see that you are running the current version.\n\n```\n$ dotnet --info\n.NET Command Line Tools (1.0.0-preview2-1-003177)\n\nProduct Information:\n Version:            1.0.0-preview2-1-003177\n Commit SHA-1 hash:  a2df9c2576\n\nRuntime Environment:\n OS Name:     Mac OS X\n OS Version:  10.12\n OS Platform: Darwin\n RID:         osx.10.12-x64\n```\n","html":"<p>.NET Core 1.1 RTM was announced yesterday along with <a href=\"https://t.co/3bGzj89idU\">Visual Studio for Mac</a>! So of course, I jumped right over to install them both. During the install of the 1.1 version of .NET Core from the <a href=\"https://www.microsoft.com/net/download/core\">downloads page</a>, hit a snag on OSX. </p>\n\n<p>If you have seen recent Scott Hanselman talk ASP.NET Core, there is a slide he uses where he references \"How do you like your ASP.NET?\"</p>\n\n<p><img src=\"/content/images/2016/11/hanselmansteak.png\" alt=\"hanselman-steak\" /></p>\n\n<p>I'm somewhere between \"medium-rare\" and \"medium-well\", depends on the machine I am using. </p>\n\n<p>I had the preview bits installed which had a version of <code>1.0.0-preview2.1-003155</code> and now the RC 1.1 is released with version of <code>1.0.0-preview2-1-003177</code>. When running the command <code>dotnet --info</code> I was getting the incorrect version even though I was using the proper installer (multiple times) but to no avail nothing was getting updated. Or at least I thought.</p>\n\n<p>The issue here is that semver was taking over.  The previous version number of 1.0.0-preview2.1-003155 is actually a higher version number than 1.0.0-preview2-1-003177.  Why? Because 2.1 is higher than 2-1 in versioning.</p>\n\n<p>So how do we fix this?</p>\n\n<p>Using the downloads to install the RTM relase:</p>\n\n<ul>\n<li>dotnet-osx-x64.1.1.0.pkg</li>\n<li>dotnet-dev-osx-x64.1.0.0-preview2-1-003177.pkg</li>\n</ul>\n\n<p><code>dotnet --info</code> was returning</p>\n\n<pre><code>.NET Command Line Tools (1.0.0-preview2-1-003155)\n\nProduct Information:  \n Version:            1.0.0-preview2-1-003155\n Commit SHA-1 hash:  d7b0190bd4\n\nRuntime Environment:  \n OS Name:     Mac OS X\n OS Version:  10.12\n OS Platform: Darwin\n RID:         osx.10.12-x64\n</code></pre>\n\n<p>The version was incorrect, I was looking for 1.0.0-preview2-1-003177.</p>\n\n<p>There is a \"Reset my dotnet\" or <a href=\"https://github.com/dotnet/cli/tree/rel/1.0.0/scripts/obtain/uninstall\">uinstall</a> for <a href=\"https://github.com/dotnet/cli/blob/rel/1.0.0/scripts/obtain/uninstall/dotnet-uninstall-pkgs.sh\">OSX</a> and <a href=\"https://github.com/dotnet/cli/blob/rel/1.0.0/scripts/obtain/uninstall/dotnet-uninstall-debian-packages.sh\">Linux</a> in the <a href=\"https://github.com/dotnet/cli\">cli Github Repo</a>.</p>\n\n<p>I didn't want to remove all of the versions, but looking at the script, it did give me the insight needed to know how to get rid of the one version.</p>\n\n<p>Get the list of the packages installed running the following command:</p>\n\n<pre><code>pkgutil --pkgs | grep \"com.microsoft.dotnet\"  \n</code></pre>\n\n<p>On my machine I had the following:</p>\n\n<pre><code>com.microsoft.dotnet.dev.1.0.0-preview2-003121.component.osx.x64  \ncom.microsoft.dotnet.dev.1.0.0-preview2-003131.component.osx.x64  \ncom.microsoft.dotnet.dev.1.0.0-preview2-1-003177.component.osx.x64  \ncom.microsoft.dotnet.dev.1.0.0-preview2.1-003155.component.osx.x64  \ncom.microsoft.dotnet.hostfxr.1.1.0.component.osx.x64  \ncom.microsoft.dotnet.hostfxr.component.osx.x64  \ncom.microsoft.dotnet.sharedframework.Microsoft.NETCore.App.1.0.0.component.osx.x64  \ncom.microsoft.dotnet.sharedframework.Microsoft.NETCore.App.1.0.1.component.osx.x64  \ncom.microsoft.dotnet.sharedframework.Microsoft.NETCore.App.1.1.0-preview1-001100-00.component.osx.x64  \ncom.microsoft.dotnet.sharedframework.Microsoft.NETCore.App.1.1.0.component.osx.x64  \ncom.microsoft.dotnet.sharedhost.component.osx.x64  \n</code></pre>\n\n<p>There were a couple of bad seeds here I needed to remove, the <strong>preview2.1-003155</strong> version and <strong>1.1.0-preview1-001100-00</strong></p>\n\n<p>Remove the preview version  </p>\n\n<pre><code>sudo pkgutil --force --forget \"com.microsoft.dotnet.dev.1.0.0-preview2.1-003155.component.osx.x64\"  \nrm -rf /usr/local/share/dotnet/sdk/1.0.0-preview2.1-003155/  \n</code></pre>\n\n<p>Remove the preview1.1 version  </p>\n\n<pre><code>sudo pkgutil --force --forget \"com.microsoft.dotnet.sharedframework.Microsoft.NETCore.App.1.1.0-preview1-001100-00.component.osx.x64\"  \n</code></pre>\n\n<p>The last step is to remove any SDK(s) that are installed.  SDK install folders are located in <strong>/usr/local/share/dotnet/sdk/<version></strong></p>\n\n<pre><code>rm -rf /usr/local/share/dotnet/sdk/1.0.0-preview2.1-003155/  \n</code></pre>\n\n<p>Close and restart any terminal / bash/ zsh shells and run <code>dotnet --info</code> to see that you are running the current version.</p>\n\n<pre><code>$ dotnet --info\n.NET Command Line Tools (1.0.0-preview2-1-003177)\n\nProduct Information:  \n Version:            1.0.0-preview2-1-003177\n Commit SHA-1 hash:  a2df9c2576\n\nRuntime Environment:  \n OS Name:     Mac OS X\n OS Version:  10.12\n OS Platform: Darwin\n RID:         osx.10.12-x64\n</code></pre>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1479414868398,"created_by":1,"updated_at":1479415611710,"updated_by":1,"published_at":1479415171417,"published_by":1},{"id":98,"uuid":"8a475a5b-6f66-48f0-96a4-5f9de98a24d5","title":"Exploring the new dotnet cli","slug":"exploring-the-new-dotnet-cli","markdown":"![dotnet new cli](/content/images/2017/02/dotnetnewsln2.png)\n\n*Note: At the time of this post, the dotnet cli version being used `1.0.0-rc4-004771` available from GitHub dotnet/cli repo - https://github.com/dotnet/core/blob/master/release-notes/rc4-download.md*\n\nI have been a long time fan of the [yeoman generator](http://github.com/omnisharp/generator-aspnet) for ASP.NET Core and still I would argue that it's still the most complete project creation utility for cross platform development.\n\nWith that said, the dotnet cli has really raised the bar for command line parity development tooling when comparing similar capabilities from other languages or frameworks where CLI is the first tool.\n\nHistorically, as you know, Visual Studio is the standard for \"File->New Project\" or anything to do with a .NET solution or project. If you can right-click it, it probably didn't get done.\n\nFirst there was [generator-aspnet](http://github.com/omnisharp/generator-aspnet) with `yo aspnet` (still the best command).\n\nNow we have `dotnet new`, `dotnet sln` and more...\n\n## What's new?\n\n* **dotnet new**\n* **dotnet sln**\n* **dotnet add remove list**\n\n### dotnet new\n`dotnet new` isn't _really_ new, it's been there for a bit of time. We could create a couple of different types of applications using the `-t` option, but they were basic starter templates.\n\n`dotnet new -t web` gave us a basic **Hello World** web application, but many developers were asking for more. Where was the webapi templates? What about adding NuGet packages? Authentication? \n\nThe `new` command now is driven by the [template system](https://github.com/dotnet/templating). A number of new templates, including webapi, are available!\n\n```bash\nTemplate Instantiation Commands for .NET Core CLI.\n\nUsage: dotnet new [arguments] [options]\n\nArguments:\n  template  The template to instantiate.\n\nOptions:\n  -l|--list         List templates containing the specified name.\n  -lang|--language  Specifies the language of the template to create\n  -n|--name         The name for the output being created. If no name is specified, the name of the current directory is used.\n  -o|--output       Location to place the generated output.\n  -h|--help         Displays help for this command.\n  -all|--show-all   Shows all templates\n\n\nTemplates                                 Short Name      Language      Tags\n--------------------------------------------------------------------------------------\nConsole Application                       console         [C#], F#      Common/Console\nClass library                             classlib        [C#], F#      Common/Library\nUnit Test Project                         mstest          [C#], F#      Test/MSTest\nxUnit Test Project                        xunit           [C#], F#      Test/xUnit\nEmpty ASP.NET Core Web Application        web             [C#]          Web/Empty\nMVC ASP.NET Core Web Application          mvc             [C#], F#      Web/MVC\nWeb API ASP.NET Core Web Application      webapi          [C#]          Web/WebAPI\nSolution File                             sln                           Solution\n\nExamples:\n    dotnet new mvc --auth None --framework netcoreapp1.0\n    dotnet new console --framework netcoreapp1.0\n    dotnet new --help\n```\n\nLanguage options, authentication, and the start of having multiple templates per type. \n\n### dotnet sln  \n\nAnother command added is `sln`.  `dotnet sln` gives you the capability of adding, removing and listing projects (CRUD operations) in that .sln file. \n\nIn previous versions of the SDK, a `global.json` file was necessary to set folders and the version you were targeting.\n\n```javascript\n{\n  \"projects\": [ \"src\", \"test\" ],\n  \"sdk\": {\n    \"version\": \"1.0.0-preview2-1-003177\"\n  }\n}\n```\n\nNow, using a combination of the `new` command and `sln` command; we can create a new solution file and then add any project in any folder location to it using `dotnet sln add folder/myproject.csproj` without having to manually manage the .json file or .sln files.\n\n```bash\ndotnet new sln -o mydotnetapp\n```\n\nProduces the following directory structure:\n\n```bash\nmydotnetapp\n└── mydotnetapp.sln\n```\n\nCreate and add **myproject** to the solution.\n\n```bash\ndotnet new web -n webapp -o mydotnetapp/src/myproject -lang C#\n```\n\nAfter the command completes, the directory structure looks like the following:\n\n```bash\nmydotnetapp\n    ├── mydotnetapp.sln\n    └── src\n        └── myproject\n            ├── Program.cs\n            ├── Startup.cs\n            ├── webapp.csproj\n            └── wwwroot\n```\nUsing the `-n` option allows for naming the **project** name and using the `-o` specifies the location to output the files.\n\nTo add the project to the solution file, use `dotnet sln add`:\n\n```bash\ndotnet sln add mydotnetapp/mydotnetapp.sln src/myproject/webapp.csproj \n```\n\n*Note: The `sln add remove` commands on Unix/Linux terminals such as bash support globs. So the previous command could be written as `dotnet sln add mydotnetapp/mydotnetapp.sln **/**/*.csproj` and in this case it would've only added the one project. However, if there were more that one project in the *src* folder, all of them are added.*\n\n### dotnet add remove list\n\nThese CRUD operations are used for adding, removing and listing the NuGet packages in a project or you may also use these to for project to project operations i.e. \"Add Reference\".\n\nFor example, if you wanted to add the very popular Newtonsoft.Json Nuget package to your app.proj, use the `add` command. The version number is optional, the latest version is used by default.\n\n```bash\ndotnet add Library.fsproj package Newtonsoft.Json -v 9.0.1\n```\n\nThe other options on the package command are:\n\n```bash\nOptions:\n  -h|--help                                Show help information\n  -v|--version <VERSION>                   Version for the package to be added.\n  -f|--framework <FRAMEWORK>               Add reference only when targeting a specific framework\n  -n|--no-restore                          Add reference without performing restore preview and compatibility check.\n  -s|--source <SOURCE>                     Use specific NuGet package sources to use during the restore.\n  --package-directory <PACKAGE_DIRECTORY>  Restore the packages to this Directory .\n```\n\nFor adding **Project to Project** references, use the `add` command and pass the `reference` as the command instead of `package`.  The following example adds the **Library.fsproj** class library project to the **App.fsproj** console app as a reference.\n\n```\ndotnet add App.fsproj reference ../Library/Library.fsproj\n```\n\nNow that the project is added, use the `list` command to see the references for a given project.\n\n```bash\n$ dotnet list App.fsproj reference\n\nProject reference(s)\n--------------------\n..\\Library\\Library.fsproj\n```\n\n## What's next\nWhat is the future of [generator-aspnet](http://github.com/omnisharp/generator-aspnet)? [See the comment on the thread] here(https://github.com/dotnet/cli/issues/2052#issuecomment-207031714), in short the yeoman generator will be maintained an modified to utilize the same template engine that `dotnet` does ensuring parity.\n\n## Resources\n\n* Checkout the [templating GitHub repository](https://github.com/dotnet/templating), there is a good resource on the wiki for what a template looks like - [\"Runnable Project\" Templates](https://github.com/dotnet/templating/wiki/%22Runnable-Project%22-Templates). \n* [dotnet/cli](https://github.com/dotnet/cli/) GitHub repo\n* [docs.microsoft.com](http://docs.microsoft.com)","html":"<p><img src=\"/content/images/2017/02/dotnetnewsln2.png\" alt=\"dotnet new cli\" /></p>\n\n<p><em>Note: At the time of this post, the dotnet cli version being used <code>1.0.0-rc4-004771</code> available from GitHub dotnet/cli repo - <a href=\"https://github.com/dotnet/core/blob/master/release-notes/rc4-download.md\">https://github.com/dotnet/core/blob/master/release-notes/rc4-download.md</a></em></p>\n\n<p>I have been a long time fan of the <a href=\"http://github.com/omnisharp/generator-aspnet\">yeoman generator</a> for ASP.NET Core and still I would argue that it's still the most complete project creation utility for cross platform development.</p>\n\n<p>With that said, the dotnet cli has really raised the bar for command line parity development tooling when comparing similar capabilities from other languages or frameworks where CLI is the first tool.</p>\n\n<p>Historically, as you know, Visual Studio is the standard for \"File->New Project\" or anything to do with a .NET solution or project. If you can right-click it, it probably didn't get done.</p>\n\n<p>First there was <a href=\"http://github.com/omnisharp/generator-aspnet\">generator-aspnet</a> with <code>yo aspnet</code> (still the best command).</p>\n\n<p>Now we have <code>dotnet new</code>, <code>dotnet sln</code> and more...</p>\n\n<h2 id=\"whatsnew\">What's new?</h2>\n\n<ul>\n<li><strong>dotnet new</strong></li>\n<li><strong>dotnet sln</strong></li>\n<li><strong>dotnet add remove list</strong></li>\n</ul>\n\n<h3 id=\"dotnetnew\">dotnet new</h3>\n\n<p><code>dotnet new</code> isn't <em>really</em> new, it's been there for a bit of time. We could create a couple of different types of applications using the <code>-t</code> option, but they were basic starter templates.</p>\n\n<p><code>dotnet new -t web</code> gave us a basic <strong>Hello World</strong> web application, but many developers were asking for more. Where was the webapi templates? What about adding NuGet packages? Authentication? </p>\n\n<p>The <code>new</code> command now is driven by the <a href=\"https://github.com/dotnet/templating\">template system</a>. A number of new templates, including webapi, are available!</p>\n\n<pre><code class=\"language-bash\">Template Instantiation Commands for .NET Core CLI.\n\nUsage: dotnet new [arguments] [options]\n\nArguments:  \n  template  The template to instantiate.\n\nOptions:  \n  -l|--list         List templates containing the specified name.\n  -lang|--language  Specifies the language of the template to create\n  -n|--name         The name for the output being created. If no name is specified, the name of the current directory is used.\n  -o|--output       Location to place the generated output.\n  -h|--help         Displays help for this command.\n  -all|--show-all   Shows all templates\n\n\nTemplates                                 Short Name      Language      Tags  \n--------------------------------------------------------------------------------------\nConsole Application                       console         [C#], F#      Common/Console  \nClass library                             classlib        [C#], F#      Common/Library  \nUnit Test Project                         mstest          [C#], F#      Test/MSTest  \nxUnit Test Project                        xunit           [C#], F#      Test/xUnit  \nEmpty ASP.NET Core Web Application        web             [C#]          Web/Empty  \nMVC ASP.NET Core Web Application          mvc             [C#], F#      Web/MVC  \nWeb API ASP.NET Core Web Application      webapi          [C#]          Web/WebAPI  \nSolution File                             sln                           Solution\n\nExamples:  \n    dotnet new mvc --auth None --framework netcoreapp1.0\n    dotnet new console --framework netcoreapp1.0\n    dotnet new --help\n</code></pre>\n\n<p>Language options, authentication, and the start of having multiple templates per type. </p>\n\n<h3 id=\"dotnetsln\">dotnet sln</h3>\n\n<p>Another command added is <code>sln</code>.  <code>dotnet sln</code> gives you the capability of adding, removing and listing projects (CRUD operations) in that .sln file. </p>\n\n<p>In previous versions of the SDK, a <code>global.json</code> file was necessary to set folders and the version you were targeting.</p>\n\n<pre><code class=\"language-javascript\">{\n  \"projects\": [ \"src\", \"test\" ],\n  \"sdk\": {\n    \"version\": \"1.0.0-preview2-1-003177\"\n  }\n}\n</code></pre>\n\n<p>Now, using a combination of the <code>new</code> command and <code>sln</code> command; we can create a new solution file and then add any project in any folder location to it using <code>dotnet sln add folder/myproject.csproj</code> without having to manually manage the .json file or .sln files.</p>\n\n<pre><code class=\"language-bash\">dotnet new sln -o mydotnetapp  \n</code></pre>\n\n<p>Produces the following directory structure:</p>\n\n<pre><code class=\"language-bash\">mydotnetapp  \n└── mydotnetapp.sln\n</code></pre>\n\n<p>Create and add <strong>myproject</strong> to the solution.</p>\n\n<pre><code class=\"language-bash\">dotnet new web -n webapp -o mydotnetapp/src/myproject -lang C#  \n</code></pre>\n\n<p>After the command completes, the directory structure looks like the following:</p>\n\n<pre><code class=\"language-bash\">mydotnetapp  \n    ├── mydotnetapp.sln\n    └── src\n        └── myproject\n            ├── Program.cs\n            ├── Startup.cs\n            ├── webapp.csproj\n            └── wwwroot\n</code></pre>\n\n<p>Using the <code>-n</code> option allows for naming the <strong>project</strong> name and using the <code>-o</code> specifies the location to output the files.</p>\n\n<p>To add the project to the solution file, use <code>dotnet sln add</code>:</p>\n\n<pre><code class=\"language-bash\">dotnet sln add mydotnetapp/mydotnetapp.sln src/myproject/webapp.csproj  \n</code></pre>\n\n<p><em>Note: The <code>sln add remove</code> commands on Unix/Linux terminals such as bash support globs. So the previous command could be written as <code>dotnet sln add mydotnetapp/mydotnetapp.sln **/**/*.csproj</code> and in this case it would've only added the one project. However, if there were more that one project in the *src</em> folder, all of them are added.*</p>\n\n<h3 id=\"dotnetaddremovelist\">dotnet add remove list</h3>\n\n<p>These CRUD operations are used for adding, removing and listing the NuGet packages in a project or you may also use these to for project to project operations i.e. \"Add Reference\".</p>\n\n<p>For example, if you wanted to add the very popular Newtonsoft.Json Nuget package to your app.proj, use the <code>add</code> command. The version number is optional, the latest version is used by default.</p>\n\n<pre><code class=\"language-bash\">dotnet add Library.fsproj package Newtonsoft.Json -v 9.0.1  \n</code></pre>\n\n<p>The other options on the package command are:</p>\n\n<pre><code class=\"language-bash\">Options:  \n  -h|--help                                Show help information\n  -v|--version &lt;VERSION&gt;                   Version for the package to be added.\n  -f|--framework &lt;FRAMEWORK&gt;               Add reference only when targeting a specific framework\n  -n|--no-restore                          Add reference without performing restore preview and compatibility check.\n  -s|--source &lt;SOURCE&gt;                     Use specific NuGet package sources to use during the restore.\n  --package-directory &lt;PACKAGE_DIRECTORY&gt;  Restore the packages to this Directory .\n</code></pre>\n\n<p>For adding <strong>Project to Project</strong> references, use the <code>add</code> command and pass the <code>reference</code> as the command instead of <code>package</code>.  The following example adds the <strong>Library.fsproj</strong> class library project to the <strong>App.fsproj</strong> console app as a reference.</p>\n\n<pre><code>dotnet add App.fsproj reference ../Library/Library.fsproj  \n</code></pre>\n\n<p>Now that the project is added, use the <code>list</code> command to see the references for a given project.</p>\n\n<pre><code class=\"language-bash\">$ dotnet list App.fsproj reference\n\nProject reference(s)  \n--------------------\n..\\Library\\Library.fsproj\n</code></pre>\n\n<h2 id=\"whatsnext\">What's next</h2>\n\n<p>What is the future of <a href=\"http://github.com/omnisharp/generator-aspnet\">generator-aspnet</a>? [See the comment on the thread] here(<a href=\"https://github.com/dotnet/cli/issues/2052#issuecomment-207031714\">https://github.com/dotnet/cli/issues/2052#issuecomment-207031714</a>), in short the yeoman generator will be maintained an modified to utilize the same template engine that <code>dotnet</code> does ensuring parity.</p>\n\n<h2 id=\"resources\">Resources</h2>\n\n<ul>\n<li>Checkout the <a href=\"https://github.com/dotnet/templating\">templating GitHub repository</a>, there is a good resource on the wiki for what a template looks like - <a href=\"https://github.com/dotnet/templating/wiki/%22Runnable-Project%22-Templates\">\"Runnable Project\" Templates</a>. </li>\n<li><a href=\"https://github.com/dotnet/cli/\">dotnet/cli</a> GitHub repo</li>\n<li><a href=\"http://docs.microsoft.com\">docs.microsoft.com</a></li>\n</ul>","image":"/content/images/2017/02/dotnetnewsln2.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1486745441872,"created_by":1,"updated_at":1486755132301,"updated_by":1,"published_at":1486753828934,"published_by":1}],"users":[{"id":1,"uuid":"8b05651b-df1d-4ba0-96a0-2f4447438d63","name":"Shayne Boyer","slug":"shayne-boyer","password":"$2a$10$Nvn8c7lE9kAzSXUZlV37x.4t1qmHQIrlAgRs8Sz7a/bhljMjH2rjK","email":"spboyer@live.com","image":"//www.gravatar.com/avatar/b0e4e6c65110e17f9916f1dba85306fe?d=404&s=250","cover":"/content/images/2016/04/blogheader-1.jpg","bio":"Hi, I'm Shayne Boyer,  I write this site, work on ASP.NET Core content and Open Source,  speak at national and community events while helping teams architect web and cloud applications.","website":null,"location":"DeLand, Florida","accessibility":null,"status":"active","language":"en_US","meta_title":null,"meta_description":null,"last_login":1486745413574,"created_at":1417726027814,"created_by":1,"updated_at":1486745413574,"updated_by":1,"tour":null}],"roles":[{"id":1,"uuid":"5c0ccbea-7f79-4049-b3c8-c9854d8a5fef","name":"Administrator","description":"Administrators","created_at":1417726015530,"created_by":1,"updated_at":1417726015530,"updated_by":1},{"id":2,"uuid":"524788b1-64e2-4644-8a17-f59bdd70d7de","name":"Editor","description":"Editors","created_at":1417726015530,"created_by":1,"updated_at":1417726015530,"updated_by":1},{"id":3,"uuid":"0a7ac176-91b6-4edd-b3cf-70ba914ff3f7","name":"Author","description":"Authors","created_at":1417726015530,"created_by":1,"updated_at":1417726015530,"updated_by":1},{"id":4,"uuid":"720c0a04-01ef-41db-9935-d6a6a8b0e95a","name":"Owner","description":"Blog Owner","created_at":1417726015530,"created_by":1,"updated_at":1417726015530,"updated_by":1}],"roles_users":[{"id":1,"role_id":4,"user_id":1}],"permissions":[{"id":1,"uuid":"4c8f2f0c-1f00-451b-8dcf-de8b6406cdd0","name":"Export database","object_type":"db","action_type":"exportContent","object_id":null,"created_at":1417726016499,"created_by":1,"updated_at":1417726016499,"updated_by":1},{"id":2,"uuid":"1204decd-0af5-4539-b289-6b4dd65b1bb3","name":"Import database","object_type":"db","action_type":"importContent","object_id":null,"created_at":1417726016577,"created_by":1,"updated_at":1417726016577,"updated_by":1},{"id":3,"uuid":"948e4d07-5446-4336-a31e-a80ad04e608e","name":"Delete all content","object_type":"db","action_type":"deleteAllContent","object_id":null,"created_at":1417726016687,"created_by":1,"updated_at":1417726016687,"updated_by":1},{"id":4,"uuid":"15807f79-3f0f-45ff-9475-a4e9dc614a43","name":"Send mail","object_type":"mail","action_type":"send","object_id":null,"created_at":1417726016812,"created_by":1,"updated_at":1417726016812,"updated_by":1},{"id":5,"uuid":"e29d06d3-4a0d-499f-a53d-78deeca3b9f2","name":"Browse notifications","object_type":"notification","action_type":"browse","object_id":null,"created_at":1417726016921,"created_by":1,"updated_at":1417726016921,"updated_by":1},{"id":6,"uuid":"c85401af-d071-4bf5-923a-713011d61d85","name":"Add notifications","object_type":"notification","action_type":"add","object_id":null,"created_at":1417726017030,"created_by":1,"updated_at":1417726017030,"updated_by":1},{"id":7,"uuid":"b144e52b-ef2b-4ac5-abd4-825005245b9f","name":"Delete notifications","object_type":"notification","action_type":"destroy","object_id":null,"created_at":1417726017155,"created_by":1,"updated_at":1417726017155,"updated_by":1},{"id":8,"uuid":"be35b3d4-8995-4c31-b071-5620e6389227","name":"Browse posts","object_type":"post","action_type":"browse","object_id":null,"created_at":1417726017249,"created_by":1,"updated_at":1417726017249,"updated_by":1},{"id":9,"uuid":"1fbf8cdc-761d-4473-8e45-43c9183d739a","name":"Read posts","object_type":"post","action_type":"read","object_id":null,"created_at":1417726017343,"created_by":1,"updated_at":1417726017343,"updated_by":1},{"id":10,"uuid":"64146644-26e4-46e5-905b-13096cd6e6a7","name":"Edit posts","object_type":"post","action_type":"edit","object_id":null,"created_at":1417726017421,"created_by":1,"updated_at":1417726017421,"updated_by":1},{"id":11,"uuid":"ec68867c-691d-4f0a-bdbe-65ebff6c8bd7","name":"Add posts","object_type":"post","action_type":"add","object_id":null,"created_at":1417726017515,"created_by":1,"updated_at":1417726017515,"updated_by":1},{"id":12,"uuid":"3aeac0e4-eea0-40da-9c4d-9388aefc4d94","name":"Delete posts","object_type":"post","action_type":"destroy","object_id":null,"created_at":1417726017625,"created_by":1,"updated_at":1417726017625,"updated_by":1},{"id":13,"uuid":"8cd1a6f3-55c2-4a3c-9ceb-2584fb137a53","name":"Browse settings","object_type":"setting","action_type":"browse","object_id":null,"created_at":1417726017719,"created_by":1,"updated_at":1417726017719,"updated_by":1},{"id":14,"uuid":"dd92c138-0c8f-45eb-bd0c-c1b54f3bcfc1","name":"Read settings","object_type":"setting","action_type":"read","object_id":null,"created_at":1417726017812,"created_by":1,"updated_at":1417726017812,"updated_by":1},{"id":15,"uuid":"b6e063a8-3f69-4076-af25-1faf90ec3abc","name":"Edit settings","object_type":"setting","action_type":"edit","object_id":null,"created_at":1417726017890,"created_by":1,"updated_at":1417726017890,"updated_by":1},{"id":16,"uuid":"6d532bcb-793f-49f4-b552-76a1ba37cf70","name":"Generate slugs","object_type":"slug","action_type":"generate","object_id":null,"created_at":1417726017984,"created_by":1,"updated_at":1417726017984,"updated_by":1},{"id":17,"uuid":"0afaa99f-dacf-459b-8594-466294efbeff","name":"Browse tags","object_type":"tag","action_type":"browse","object_id":null,"created_at":1417726018125,"created_by":1,"updated_at":1417726018125,"updated_by":1},{"id":18,"uuid":"683bcb7d-8d23-478b-b5ce-fdc91a7eb058","name":"Read tags","object_type":"tag","action_type":"read","object_id":null,"created_at":1417726018219,"created_by":1,"updated_at":1417726018219,"updated_by":1},{"id":19,"uuid":"06adbfb0-b90f-4144-98d9-0a35f960ca42","name":"Edit tags","object_type":"tag","action_type":"edit","object_id":null,"created_at":1417726018312,"created_by":1,"updated_at":1417726018312,"updated_by":1},{"id":20,"uuid":"c215a7c2-1441-4035-869f-6057b1daface","name":"Add tags","object_type":"tag","action_type":"add","object_id":null,"created_at":1417726018422,"created_by":1,"updated_at":1417726018422,"updated_by":1},{"id":21,"uuid":"f0e07fb5-dc4f-4914-bcb3-159f0d4e159e","name":"Delete tags","object_type":"tag","action_type":"destroy","object_id":null,"created_at":1417726018516,"created_by":1,"updated_at":1417726018516,"updated_by":1},{"id":22,"uuid":"72c9dfc5-edf7-4ee8-8c30-5d08f115db18","name":"Browse themes","object_type":"theme","action_type":"browse","object_id":null,"created_at":1417726018687,"created_by":1,"updated_at":1417726018687,"updated_by":1},{"id":23,"uuid":"0686477f-28f4-45af-8adf-4bcc6544f29f","name":"Edit themes","object_type":"theme","action_type":"edit","object_id":null,"created_at":1417726018781,"created_by":1,"updated_at":1417726018781,"updated_by":1},{"id":24,"uuid":"7c552c30-61e2-4e86-b2d3-02288ca8aa31","name":"Browse users","object_type":"user","action_type":"browse","object_id":null,"created_at":1417726018890,"created_by":1,"updated_at":1417726018890,"updated_by":1},{"id":25,"uuid":"3cb8f9c0-a6bb-4036-87b6-7ce034f1b495","name":"Read users","object_type":"user","action_type":"read","object_id":null,"created_at":1417726018984,"created_by":1,"updated_at":1417726018984,"updated_by":1},{"id":26,"uuid":"1c782eac-10de-4ed4-b304-96a4b13dfe96","name":"Edit users","object_type":"user","action_type":"edit","object_id":null,"created_at":1417726019094,"created_by":1,"updated_at":1417726019094,"updated_by":1},{"id":27,"uuid":"a419135e-5204-48cc-a9da-f7440b443a14","name":"Add users","object_type":"user","action_type":"add","object_id":null,"created_at":1417726019189,"created_by":1,"updated_at":1417726019189,"updated_by":1},{"id":28,"uuid":"02b462ee-4126-4333-b59a-39072745db81","name":"Delete users","object_type":"user","action_type":"destroy","object_id":null,"created_at":1417726019282,"created_by":1,"updated_at":1417726019282,"updated_by":1},{"id":29,"uuid":"9a62755a-4a8d-4de6-bb05-07d6fd4e5bf3","name":"Assign a role","object_type":"role","action_type":"assign","object_id":null,"created_at":1417726019376,"created_by":1,"updated_at":1417726019376,"updated_by":1},{"id":30,"uuid":"ab8e8cc0-6d28-4728-8430-591c153885aa","name":"Browse roles","object_type":"role","action_type":"browse","object_id":null,"created_at":1417726019454,"created_by":1,"updated_at":1417726019454,"updated_by":1}],"permissions_users":[],"permissions_roles":[{"id":1,"role_id":1,"permission_id":1},{"id":2,"role_id":1,"permission_id":2},{"id":3,"role_id":1,"permission_id":3},{"id":4,"role_id":1,"permission_id":4},{"id":5,"role_id":1,"permission_id":5},{"id":6,"role_id":1,"permission_id":6},{"id":7,"role_id":1,"permission_id":7},{"id":8,"role_id":1,"permission_id":8},{"id":9,"role_id":1,"permission_id":9},{"id":10,"role_id":1,"permission_id":10},{"id":11,"role_id":1,"permission_id":11},{"id":12,"role_id":1,"permission_id":12},{"id":13,"role_id":1,"permission_id":13},{"id":14,"role_id":1,"permission_id":14},{"id":15,"role_id":1,"permission_id":15},{"id":16,"role_id":1,"permission_id":16},{"id":17,"role_id":1,"permission_id":17},{"id":18,"role_id":1,"permission_id":18},{"id":19,"role_id":1,"permission_id":19},{"id":20,"role_id":1,"permission_id":20},{"id":21,"role_id":1,"permission_id":21},{"id":22,"role_id":1,"permission_id":22},{"id":23,"role_id":1,"permission_id":23},{"id":24,"role_id":1,"permission_id":24},{"id":25,"role_id":1,"permission_id":25},{"id":26,"role_id":1,"permission_id":26},{"id":27,"role_id":1,"permission_id":27},{"id":28,"role_id":1,"permission_id":28},{"id":29,"role_id":1,"permission_id":29},{"id":30,"role_id":1,"permission_id":30},{"id":31,"role_id":2,"permission_id":8},{"id":32,"role_id":2,"permission_id":9},{"id":33,"role_id":2,"permission_id":10},{"id":34,"role_id":2,"permission_id":11},{"id":35,"role_id":2,"permission_id":12},{"id":36,"role_id":2,"permission_id":13},{"id":37,"role_id":2,"permission_id":14},{"id":38,"role_id":2,"permission_id":16},{"id":39,"role_id":2,"permission_id":17},{"id":40,"role_id":2,"permission_id":18},{"id":41,"role_id":2,"permission_id":19},{"id":42,"role_id":2,"permission_id":20},{"id":43,"role_id":2,"permission_id":21},{"id":44,"role_id":2,"permission_id":24},{"id":45,"role_id":2,"permission_id":25},{"id":46,"role_id":2,"permission_id":26},{"id":47,"role_id":2,"permission_id":27},{"id":48,"role_id":2,"permission_id":28},{"id":49,"role_id":2,"permission_id":29},{"id":50,"role_id":2,"permission_id":30},{"id":51,"role_id":3,"permission_id":8},{"id":52,"role_id":3,"permission_id":9},{"id":53,"role_id":3,"permission_id":11},{"id":54,"role_id":3,"permission_id":13},{"id":55,"role_id":3,"permission_id":14},{"id":56,"role_id":3,"permission_id":16},{"id":57,"role_id":3,"permission_id":17},{"id":58,"role_id":3,"permission_id":18},{"id":59,"role_id":3,"permission_id":20},{"id":60,"role_id":3,"permission_id":24},{"id":61,"role_id":3,"permission_id":25},{"id":62,"role_id":3,"permission_id":30}],"permissions_apps":[],"settings":[{"id":1,"uuid":"713e3d75-c434-4659-9499-24ed3f48b6fc","key":"databaseVersion","value":"004","type":"core","created_at":1417726028080,"created_by":1,"updated_at":1417726028080,"updated_by":1},{"id":2,"uuid":"40520b26-6195-4a58-8ed5-f947fd45e425","key":"dbHash","value":"42fd7d61-b9a4-4769-aa71-611d76fb7b99","type":"core","created_at":1417726028189,"created_by":1,"updated_at":1417726030050,"updated_by":1},{"id":3,"uuid":"3bc1a78b-3aaf-43ce-ac33-bfed488cfb76","key":"nextUpdateCheck","value":"1486831808","type":"core","created_at":1417726028189,"created_by":1,"updated_at":1486745407865,"updated_by":1},{"id":4,"uuid":"bac3a803-e58f-4092-a9f7-e20b1b05c2f9","key":"displayUpdateNotification","value":"0.11.4","type":"core","created_at":1417726028189,"created_by":1,"updated_at":1485445674058,"updated_by":1},{"id":5,"uuid":"dd651359-4546-4911-8f20-0f7cf7babe30","key":"title","value":"Shayne Boyer","type":"blog","created_at":1417726028189,"created_by":1,"updated_at":1471470222144,"updated_by":1},{"id":6,"uuid":"de4e8635-8772-4574-90e5-1343c31eb4ef","key":"description","value":"Hi, I'm Shayne Boyer,  I write this site, work on ASP.NET Core content and Open Source,  speak at national and community events while helping teams architect web and cloud applications.","type":"blog","created_at":1417726028189,"created_by":1,"updated_at":1471470222144,"updated_by":1},{"id":7,"uuid":"f28fee9f-f210-4b0f-b068-1e63f03117fe","key":"email","value":"spboyer@live.com","type":"blog","created_at":1417726028189,"created_by":1,"updated_at":1417727955593,"updated_by":1},{"id":8,"uuid":"0fe992f2-3bc6-483f-bba8-d9e5dced0958","key":"logo","value":"","type":"blog","created_at":1417726028189,"created_by":1,"updated_at":1471470222144,"updated_by":1},{"id":9,"uuid":"18e1e015-53a8-4765-9249-59a6eec71525","key":"cover","value":"/content/images/2016/04/blogheader.jpg","type":"blog","created_at":1417726028189,"created_by":1,"updated_at":1471470222160,"updated_by":1},{"id":10,"uuid":"7fc502f2-6f38-42dc-8ec0-a9545939373c","key":"defaultLang","value":"en_US","type":"blog","created_at":1417726028189,"created_by":1,"updated_at":1471470222160,"updated_by":1},{"id":11,"uuid":"4df5a60c-5c64-4791-bc2d-3a86dc98db76","key":"postsPerPage","value":"5","type":"blog","created_at":1417726028189,"created_by":1,"updated_at":1471470222160,"updated_by":1},{"id":12,"uuid":"ed18e050-0b43-4726-937b-56d620f667af","key":"forceI18n","value":"true","type":"blog","created_at":1417726028189,"created_by":1,"updated_at":1471470222160,"updated_by":1},{"id":13,"uuid":"9c5ee672-4b61-427e-b244-f663a676200b","key":"permalinks","value":"/:slug/","type":"blog","created_at":1417726028189,"created_by":1,"updated_at":1471470222160,"updated_by":1},{"id":14,"uuid":"5c03a3f3-1759-4a10-989c-65673deb16c0","key":"activeApps","value":"[]","type":"app","created_at":1417726028189,"created_by":1,"updated_at":1417726028189,"updated_by":1},{"id":15,"uuid":"c3887c67-ef82-4441-a875-21e761a74b1a","key":"installedApps","value":"[]","type":"app","created_at":"2014-12-04 20:47:08","created_by":1,"updated_at":"2017-02-10 22:38:38","updated_by":1},{"id":16,"uuid":"fe846716-a46c-4964-b2e9-323e71469fd4","key":"activeTheme","value":"th-ghost-theme","type":"theme","created_at":1417726028189,"created_by":1,"updated_at":1471470222160,"updated_by":1},{"id":17,"uuid":"b187cd94-9dbc-41db-9594-c5b0dde9fc48","key":"ghost_head","value":"","type":"blog","created_at":1442348249369,"created_by":1,"updated_at":1471470222160,"updated_by":1},{"id":18,"uuid":"65871559-591c-4168-8718-3f12d17182cd","key":"ghost_foot","value":"<!-- You can safely delete this line if your theme does not require jQuery -->\n<script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-1.11.3.min.js\"></script>\n\n","type":"blog","created_at":1442348249369,"created_by":1,"updated_at":1471470222160,"updated_by":1},{"id":19,"uuid":"cd30821f-63b8-434f-97f4-2ed87e072e4f","key":"labs","value":"{}","type":"blog","created_at":1442348249369,"created_by":1,"updated_at":1471470222160,"updated_by":1},{"id":20,"uuid":"3450bbd6-c231-4cdd-aa99-a372406512f0","key":"navigation","value":"[{\"label\":\"Home\",\"url\":\"http://www.tattoocoder.com\"},{\"label\":\"About\",\"url\":\"http://www.tattoocoder.com/me\"},{\"label\":\"Speaking\",\"url\":\"http://tattoocoder.com/speaking\"},{\"label\":\"Articles & Community\",\"url\":\"http://tattoocoder.com/media\"},{\"label\":\"Projects\",\"url\":\"http://www.tattoocoder.com/projects\"},{\"label\":\"Weekly Ink\",\"url\":\"http://tattoocoder.com/tag/weekly-ink/\"},{\"label\":\".NET Slack\",\"url\":\"http://tattoocoder.com/aspnet-slack-sign-up/\"}]","type":"blog","created_at":1442348249369,"created_by":1,"updated_at":1471470222175,"updated_by":1},{"id":21,"uuid":"f879411f-0a08-426f-8d4c-f046ec804344","key":"isPrivate","value":"false","type":"private","created_at":1442348249369,"created_by":1,"updated_at":1471470222175,"updated_by":1},{"id":22,"uuid":"5354564c-dff2-4687-88bd-f0a92eed80d5","key":"password","value":"null","type":"private","created_at":1442348249369,"created_by":1,"updated_at":1471470222175,"updated_by":1},{"id":23,"uuid":"d969ffe1-a0dd-4a72-8abf-9e934791cd53","key":"seenNotifications","value":"[]","type":"core","created_at":"2017-02-10 22:38:32","created_by":1,"updated_at":"2017-02-10 22:38:32","updated_by":1},{"id":24,"uuid":"0582c055-cc53-428f-925e-f7b164f379f3","key":"migrations","value":"{}","type":"core","created_at":"2017-02-10 22:38:32","created_by":1,"updated_at":"2017-02-10 22:38:32","updated_by":1},{"id":25,"uuid":"cd28b8a6-3338-47ff-b49c-2589c8998d47","key":"activeTimezone","value":"Etc/UTC","type":"blog","created_at":"2017-02-10 22:38:32","created_by":1,"updated_at":"2017-02-10 22:38:32","updated_by":1},{"id":26,"uuid":"9791594e-6cb6-433f-9d40-333938200eca","key":"amp","value":"true","type":"blog","created_at":"2017-02-10 22:38:32","created_by":1,"updated_at":"2017-02-10 22:38:32","updated_by":1},{"id":27,"uuid":"6ca11f6d-6f3c-42bb-9926-7381bef06824","key":"facebook","value":"","type":"blog","created_at":"2017-02-10 22:38:32","created_by":1,"updated_at":"2017-02-10 22:38:32","updated_by":1},{"id":28,"uuid":"9540543d-ccec-4b78-989a-57a2581ac8db","key":"twitter","value":"","type":"blog","created_at":"2017-02-10 22:38:32","created_by":1,"updated_at":"2017-02-10 22:38:32","updated_by":1},{"id":29,"uuid":"5bd7e03c-29e8-4881-b228-2027e052490e","key":"slack","value":"[{\"url\":\"\"}]","type":"blog","created_at":"2017-02-10 22:38:32","created_by":1,"updated_at":"2017-02-10 22:38:32","updated_by":1}],"tags":[{"id":1,"uuid":"692daceb-68a7-47c6-9f27-347794808723","name":"Getting Started","slug":"getting-started","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417726015530,"created_by":1,"updated_at":1417726015530,"updated_by":1},{"id":2,"uuid":"982c8e4a-8837-48f2-8542-8220f02fc4bf","name":"windows__phone","slug":"windows_phone","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681702,"created_by":1,"updated_at":1417727681702,"updated_by":1},{"id":3,"uuid":"e93dba15-0a59-4825-8327-1498804ec402","name":"mvvmlight","slug":"mvvmlight","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681702,"created_by":1,"updated_at":1442348464675,"updated_by":1},{"id":4,"uuid":"c691de3f-3a94-486e-87a8-0481458fd69a","name":"code__camp","slug":"code_camp","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681717,"created_by":1,"updated_at":1417727681717,"updated_by":1},{"id":5,"uuid":"44535ee3-0565-4865-a19d-f7f50a3fa36a","name":"mvvm","slug":"mvvm","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681717,"created_by":1,"updated_at":1442348478169,"updated_by":1},{"id":6,"uuid":"1015169c-d6f0-49b6-9d6f-55308f7de508","name":"telerik","slug":"telerik","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681717,"created_by":1,"updated_at":1417727681717,"updated_by":1},{"id":7,"uuid":"5df66257-c59c-4a3e-bd92-fb8465840a17","name":"winrt","slug":"winrt","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681717,"created_by":1,"updated_at":1442348488374,"updated_by":1},{"id":8,"uuid":"a7a15277-196d-4d21-b101-e2f4269dd0b7","name":"apps","slug":"apps-tag-2","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681717,"created_by":1,"updated_at":1442348497487,"updated_by":1},{"id":9,"uuid":"a34940d7-9422-4c57-a139-08aa48cf6b46","name":"azure_mobile","slug":"azure_mobile","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681717,"created_by":1,"updated_at":1417727681717,"updated_by":1},{"id":10,"uuid":"c91afff3-02e6-4cd6-b828-93d8b3844d5f","name":"code_project","slug":"code_project","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681717,"created_by":1,"updated_at":1417727681717,"updated_by":1},{"id":11,"uuid":"2518cd5c-748b-4925-b9e6-9e8875f5ef11","name":"nokia","slug":"nokia","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681717,"created_by":1,"updated_at":1417727681717,"updated_by":1},{"id":12,"uuid":"7a56fb07-bd6e-4b42-b344-b9922d455599","name":"hot","slug":"hot","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681717,"created_by":1,"updated_at":1417727681717,"updated_by":1},{"id":13,"uuid":"d64a684c-08c1-4509-8094-81831a48358d","name":"windows__store__apps","slug":"windows_store_apps","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681717,"created_by":1,"updated_at":1417727681717,"updated_by":1},{"id":14,"uuid":"75918b11-b3fc-4224-92b7-2a0972305a82","name":"windows_8","slug":"windows_8","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681717,"created_by":1,"updated_at":1417727681717,"updated_by":1},{"id":15,"uuid":"193f076d-db36-4d29-89cb-94122ecc9eeb","name":"azure","slug":"azure","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681717,"created_by":1,"updated_at":1417727681717,"updated_by":1},{"id":16,"uuid":"4e356be7-279c-4c96-88ef-cd379a012a7d","name":"dark__sky","slug":"dark_sky","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681733,"created_by":1,"updated_at":1417727681733,"updated_by":1},{"id":17,"uuid":"c9016cb3-edb9-4649-b822-c0772d9fae40","name":"wpdev","slug":"wpdev","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681717,"created_by":1,"updated_at":1417727681717,"updated_by":1},{"id":18,"uuid":"ed3f2416-4b44-4790-8601-8e0fa6fe1c3e","name":"contest","slug":"contest","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681717,"created_by":1,"updated_at":1417727681717,"updated_by":1},{"id":19,"uuid":"47a9f2ec-7193-40e0-9641-d8c3e6a1cddc","name":"lumia_900","slug":"lumia_900","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681733,"created_by":1,"updated_at":1417727681733,"updated_by":1},{"id":20,"uuid":"7f0d1866-57c0-446d-98d8-824e9335619c","name":"mvp","slug":"mvp","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681733,"created_by":1,"updated_at":1442348518235,"updated_by":1},{"id":21,"uuid":"0acc2bc5-0793-4c22-ae6a-c71f7be69261","name":"meetup","slug":"meetup","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681733,"created_by":1,"updated_at":1417727681733,"updated_by":1},{"id":22,"uuid":"8f9097ea-48fc-488d-8be0-f42413c9f3ae","name":"orlando__windows__phone__user__group","slug":"orlando_windows_phone_user_group","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681733,"created_by":1,"updated_at":1417727681733,"updated_by":1},{"id":23,"uuid":"d40c2d9d-10ed-4bc8-b10a-93a3dc888c7f","name":"authentication","slug":"authentication","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681733,"created_by":1,"updated_at":1442348536474,"updated_by":1},{"id":24,"uuid":"42439609-4bb6-4e03-9e6a-41086b10ce55","name":"florida__developer","slug":"florida_developer","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681733,"created_by":1,"updated_at":1417727681733,"updated_by":1},{"id":25,"uuid":"ec7df6c8-74c9-47c4-899d-12ec907c2e11","name":"microsoft__store","slug":"microsoft_store","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681733,"created_by":1,"updated_at":1417727681733,"updated_by":1},{"id":26,"uuid":"dd7e6275-42fc-499f-bfa8-3b83f4b86d8b","name":"social","slug":"social","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681749,"created_by":1,"updated_at":1417727681749,"updated_by":1},{"id":27,"uuid":"edf72a65-2db7-4a11-82c9-7aaa6383639b","name":"mobile__services","slug":"mobile__services","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681733,"created_by":1,"updated_at":1417727681733,"updated_by":1},{"id":28,"uuid":"a87a9be2-cf2a-467e-a44b-458238163198","name":"nokia__dev","slug":"nokia_dev","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681733,"created_by":1,"updated_at":1417727681733,"updated_by":1},{"id":29,"uuid":"15f06991-afd0-419e-abe1-fd249b6e87f8","name":"talks","slug":"talks","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681749,"created_by":1,"updated_at":1417727681749,"updated_by":1},{"id":30,"uuid":"beee3b5c-0784-4e94-a0a0-248b13b175d8","name":"type_script","slug":"type_script","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681749,"created_by":1,"updated_at":1417727681749,"updated_by":1},{"id":31,"uuid":"c7452214-a093-4320-bdcf-fa92a66eeb75","name":"aspnet","slug":"aspnet","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681749,"created_by":1,"updated_at":1417727681749,"updated_by":1},{"id":32,"uuid":"0dcf3968-7790-4585-81e4-3a4aa9bb0326","name":"devintersection","slug":"devintersection","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681749,"created_by":1,"updated_at":1417727681749,"updated_by":1},{"id":33,"uuid":"1da66535-fa1e-406d-b34e-27df9159ff3b","name":"a_t_t","slug":"a_t_t","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681749,"created_by":1,"updated_at":1417727681749,"updated_by":1},{"id":34,"uuid":"76d5e23f-ca4d-4ba6-9381-e94fde870277","name":"webapi","slug":"webapi-2","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681749,"created_by":1,"updated_at":1442348551228,"updated_by":1},{"id":35,"uuid":"77275522-6896-4a18-ad2f-c6acce6c263f","name":"async/_await","slug":"async_await","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681749,"created_by":1,"updated_at":1417727681749,"updated_by":1},{"id":36,"uuid":"af33db34-12ce-4783-a0ea-935b3f56e09a","name":"boot__camp","slug":"boot_camp","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681749,"created_by":1,"updated_at":1417727681749,"updated_by":1},{"id":37,"uuid":"d8893df7-ae1f-4064-9702-943440542ea6","name":"c#","slug":"csharp","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681749,"created_by":1,"updated_at":1442348562594,"updated_by":1},{"id":38,"uuid":"67618c9c-1320-42ce-8a53-880b3feab902","name":"portable__class__library","slug":"portable_class_library","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681733,"created_by":1,"updated_at":1417727681733,"updated_by":1},{"id":39,"uuid":"0e8697a0-b61a-410d-8099-afaa85885c27","name":"review","slug":"review","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681749,"created_by":1,"updated_at":1417727681749,"updated_by":1},{"id":40,"uuid":"f48513f1-d0af-40b6-8248-4f5e767ae8a3","name":"rest","slug":"rest","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681749,"created_by":1,"updated_at":1442348570589,"updated_by":1},{"id":41,"uuid":"b90acce8-ebe9-4a81-86cc-df56ddab8c92","name":"d_v_l_u_p","slug":"d_v_l_u_p","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681749,"created_by":1,"updated_at":1417727681749,"updated_by":1},{"id":42,"uuid":"4bdaaec0-8f14-4ed4-9347-63e53e261da0","name":"fiddler","slug":"fiddler","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681749,"created_by":1,"updated_at":1417727681749,"updated_by":1},{"id":43,"uuid":"4e151f84-7742-44f2-9885-bfff8e30af79","name":"dvlupday","slug":"dvlupday","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681749,"created_by":1,"updated_at":1442348589288,"updated_by":1},{"id":44,"uuid":"bfae925c-c48b-45de-a84e-b77c9b02960b","name":"enthusiasm","slug":"enthusiasm","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681749,"created_by":1,"updated_at":1417727681749,"updated_by":1},{"id":45,"uuid":"a7209657-e2c6-4277-b026-f73b4cdfddf5","name":"famous","slug":"famous","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681749,"created_by":1,"updated_at":1417727681749,"updated_by":1},{"id":46,"uuid":"4a959c88-cb45-4adb-bb17-8d9202fac3e7","name":"find__amber","slug":"find_amber","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681749,"created_by":1,"updated_at":1417727681749,"updated_by":1},{"id":47,"uuid":"c60ffb8a-dbe3-449a-b86d-390441affcaa","name":"hackathon","slug":"hackathon","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681749,"created_by":1,"updated_at":1417727681749,"updated_by":1},{"id":48,"uuid":"9a273405-29a4-4db0-bb86-75bf7db1c65d","name":"a_s_p._n_e_t","slug":"a_s_p_n_e_t","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681717,"created_by":1,"updated_at":1417727681717,"updated_by":1},{"id":49,"uuid":"567452da-222f-44f6-a1d5-6b865e59bbe9","name":"mobile","slug":"mobile","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681764,"created_by":1,"updated_at":1417727681764,"updated_by":1},{"id":50,"uuid":"d0a22cc2-e247-4246-9f17-6fbbbae27658","name":"io_c","slug":"io_c","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681764,"created_by":1,"updated_at":1417727681764,"updated_by":1},{"id":51,"uuid":"d3a279b3-f1e6-4e74-a1d9-d9232b9af510","name":"mobile_services","slug":"mobile_services","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681764,"created_by":1,"updated_at":1417727681764,"updated_by":1},{"id":52,"uuid":"b6ecab5d-af4e-4db4-80e6-26c9584096fe","name":"paparazzi","slug":"paparazzi","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681764,"created_by":1,"updated_at":1417727681764,"updated_by":1},{"id":53,"uuid":"4aa57c0f-6164-4635-afcd-3ba580b1b246","name":"passion","slug":"passion","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681764,"created_by":1,"updated_at":1417727681764,"updated_by":1},{"id":54,"uuid":"5d9d8a22-482d-447c-bf0d-8c76766662d2","name":"rad_custom_hub_tile","slug":"rad_custom_hub_tile","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681764,"created_by":1,"updated_at":1417727681764,"updated_by":1},{"id":55,"uuid":"6697bcf8-acf9-49b0-aea9-4941b432d730","name":"rad_hub_tile","slug":"rad_hub_tile","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681764,"created_by":1,"updated_at":1417727681764,"updated_by":1},{"id":56,"uuid":"68d17ec6-0503-462d-a56b-decbff8c30a9","name":"icenium","slug":"icenium","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681749,"created_by":1,"updated_at":1417727681749,"updated_by":1},{"id":57,"uuid":"f139363c-a7b1-457a-8810-8284c60a0478","name":"richmond__code__camp","slug":"richmond_code_camp","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681764,"created_by":1,"updated_at":1417727681764,"updated_by":1},{"id":58,"uuid":"e08c4a4c-6610-498b-8d2c-f735055ebe0e","name":"java_script","slug":"java_script","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681764,"created_by":1,"updated_at":1417727681764,"updated_by":1},{"id":59,"uuid":"cdd0cfc4-5c42-4fe2-9287-afd3e3fc7557","name":"regex","slug":"regex","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681764,"created_by":1,"updated_at":1417727681764,"updated_by":1},{"id":60,"uuid":"0589ef93-83f5-4add-a78a-b68d53ad7dd8","name":"orlando__code__camp","slug":"orlando_code_camp","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681764,"created_by":1,"updated_at":1417727681764,"updated_by":1},{"id":61,"uuid":"eb6134cf-6609-469e-95ac-1a553230a777","name":"mvp_buzz","slug":"mvp_buzz","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681764,"created_by":1,"updated_at":1417727681764,"updated_by":1},{"id":62,"uuid":"e77be5a3-bdce-40f5-90d4-f81928741fb4","name":"survey","slug":"survey","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681780,"created_by":1,"updated_at":1417727681780,"updated_by":1},{"id":63,"uuid":"e28bce44-53b9-4fb7-9486-d95d90a3e88f","name":"nodejs","slug":"nodejs","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681764,"created_by":1,"updated_at":1417727681764,"updated_by":1},{"id":64,"uuid":"49940a84-01f5-4c84-960d-de39bb4ebf2a","name":"marketplace","slug":"marketplace","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681764,"created_by":1,"updated_at":1417727681764,"updated_by":1},{"id":65,"uuid":"91b25440-5b37-464e-b24b-a717e0254a46","name":"unbox","slug":"unbox","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681780,"created_by":1,"updated_at":1417727681780,"updated_by":1},{"id":66,"uuid":"cb18cd4b-40b4-498c-9b8c-54829cea4b06","name":"w_p_f","slug":"w_p_f","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681780,"created_by":1,"updated_at":1417727681780,"updated_by":1},{"id":67,"uuid":"f5eb2f95-5e62-41e9-814f-3fe28d72a599","name":"routing","slug":"routing","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681780,"created_by":1,"updated_at":1417727681780,"updated_by":1},{"id":68,"uuid":"5a7782ec-d41d-4adb-8a25-f8539489240f","name":"silverlight","slug":"silverlight","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681780,"created_by":1,"updated_at":1417727681780,"updated_by":1},{"id":69,"uuid":"4696f5a4-6206-41ec-beb2-a95e417e5208","name":"tips_and__tricks","slug":"tips_and_tricks","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681780,"created_by":1,"updated_at":1417727681780,"updated_by":1},{"id":70,"uuid":"f263046d-32bd-4428-9546-0fb79a9150dc","name":"win_j_s","slug":"win_j_s","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681780,"created_by":1,"updated_at":1417727681780,"updated_by":1},{"id":71,"uuid":"df581a74-9b92-4338-89f5-941812a7180d","name":"user__group","slug":"user_group","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681780,"created_by":1,"updated_at":1417727681780,"updated_by":1},{"id":72,"uuid":"fe781ac4-7606-4bd3-ba68-9a5a67ec5b34","name":"fldev","slug":"fldev","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681780,"created_by":1,"updated_at":1417727681780,"updated_by":1},{"id":73,"uuid":"769b736c-9d54-4c5d-aabf-d6b5c0fa7e77","name":"geeks","slug":"geeks","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681796,"created_by":1,"updated_at":1417727681796,"updated_by":1},{"id":74,"uuid":"a53241ab-020c-4906-80a3-112113e999ae","name":"workshops","slug":"workshops","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681780,"created_by":1,"updated_at":1417727681780,"updated_by":1},{"id":75,"uuid":"435dd831-cdca-4946-927a-35e19a9edca0","name":"tampa__code__camp","slug":"tampa_code_camp","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681780,"created_by":1,"updated_at":1417727681780,"updated_by":1},{"id":76,"uuid":"64cc8b94-ad23-4734-8224-abeec9691da2","name":"web_a_p_i","slug":"web_a_p_i","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681796,"created_by":1,"updated_at":1417727681796,"updated_by":1},{"id":77,"uuid":"d3ba27ff-e852-48fa-b5a3-b6c2ac09a18b","name":"anglebrackets","slug":"anglebrackets","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681780,"created_by":1,"updated_at":1417727681780,"updated_by":1},{"id":78,"uuid":"c6ab5785-a8b7-460b-a263-2c51b741eb39","name":"conference","slug":"conference","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681780,"created_by":1,"updated_at":1417727681780,"updated_by":1},{"id":79,"uuid":"1700e419-5d6b-43f4-8720-1a41b494f5ce","name":"off_time","slug":"off_time","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681796,"created_by":1,"updated_at":1417727681796,"updated_by":1},{"id":80,"uuid":"e5e8597d-7dfb-4dc5-a6be-03293e8bdd3f","name":"win8nl","slug":"win8nl","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681780,"created_by":1,"updated_at":1417727681780,"updated_by":1},{"id":81,"uuid":"febad7ed-3e13-452c-9480-7305ffb8717d","name":"nerds","slug":"nerds","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681796,"created_by":1,"updated_at":1417727681796,"updated_by":1},{"id":82,"uuid":"830c10ee-2386-403c-9315-eede754e281e","name":"xamarin","slug":"xamarin","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681796,"created_by":1,"updated_at":1417727681796,"updated_by":1},{"id":83,"uuid":"5368c468-10ef-4352-8eca-e303e273fe1f","name":"windows__phone_7","slug":"windows_phone_7","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417727681796,"created_by":1,"updated_at":1417727681796,"updated_by":1},{"id":84,"uuid":"d6d000e8-bc3c-418c-b789-b48840657b2e","name":"aspnet5","slug":"aspnet5","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417918976467,"created_by":1,"updated_at":1417918976467,"updated_by":1},{"id":85,"uuid":"023c39b0-7247-482e-86ff-38973f14e523","name":"vnext","slug":"vnext","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417918976467,"created_by":1,"updated_at":1442348251800,"updated_by":1},{"id":86,"uuid":"6432d147-b663-4a5b-a1f1-b7abf0aba573","name":"yeoman","slug":"yeoman","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1417918976467,"created_by":1,"updated_at":1442348251800,"updated_by":1},{"id":87,"uuid":"ef215949-bfd4-4e7f-ad02-bd1e76f1bb29","name":"nuget","slug":"nuget","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1418479487719,"created_by":1,"updated_at":1418479487719,"updated_by":1},{"id":88,"uuid":"1fe5e73f-0817-485e-bb11-3f1bb22d8118","name":"kmon","slug":"kmon","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1418479487719,"created_by":1,"updated_at":1418479487719,"updated_by":1},{"id":89,"uuid":"a319db3d-395b-49c2-bd88-e4860a1edde3","name":"omnisharp","slug":"omnisharp","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1418479487719,"created_by":1,"updated_at":1418479487719,"updated_by":1},{"id":90,"uuid":"7af5ec23-f4c9-4311-8901-fb537d430bd7","name":"gulp","slug":"gulp","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1419970543264,"created_by":1,"updated_at":1419970543264,"updated_by":1},{"id":91,"uuid":"61b78cce-0966-4892-8c15-96cc00f545db","name":"typescript","slug":"typescript","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1419970543264,"created_by":1,"updated_at":1419970543264,"updated_by":1},{"id":92,"uuid":"6a80f123-fad7-473f-bcf4-d99438d38e04","name":"projects","slug":"projects","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1420742194549,"created_by":1,"updated_at":1420742194549,"updated_by":1},{"id":93,"uuid":"c9ac58bc-b76c-4490-b38e-b34484b8006a","name":"articles","slug":"articles","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1420742194549,"created_by":1,"updated_at":1420742194549,"updated_by":1},{"id":94,"uuid":"a6ec4a12-c211-4b4f-bf88-cba9e629ced6","name":"podcasts","slug":"podcasts","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1420742194549,"created_by":1,"updated_at":1420742194549,"updated_by":1},{"id":95,"uuid":"5d160738-417e-4981-95cc-63f653ce9194","name":"videos","slug":"videos","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1420742194549,"created_by":1,"updated_at":1420742194549,"updated_by":1},{"id":96,"uuid":"4b08e7e9-0155-4492-8d97-e846b3a56b77","name":"azure mobile services","slug":"azure-mobile-services","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421080352795,"created_by":1,"updated_at":1421080352795,"updated_by":1},{"id":97,"uuid":"e57740f7-056a-4572-9639-f28612e00883","name":"mvpbuzz","slug":"mvpbuzz","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421080352795,"created_by":1,"updated_at":1421080352795,"updated_by":1},{"id":98,"uuid":"e24d981f-e0e3-45b2-b534-97192596c239","name":"mvc","slug":"mvc","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421080352795,"created_by":1,"updated_at":1421080352795,"updated_by":1},{"id":99,"uuid":"d34330a1-7d61-4006-9465-7096fbfb2d56","name":"ef","slug":"ef","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421080352795,"created_by":1,"updated_at":1421080352795,"updated_by":1},{"id":100,"uuid":"37316d5d-a32d-4536-81a9-aaa7b201754e","name":"webapi","slug":"webapi","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421080395093,"created_by":1,"updated_at":1421080395093,"updated_by":1},{"id":101,"uuid":"7506b9fe-6c0e-4955-a917-2656751548f5","name":"mvc6","slug":"mvc6","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421298011125,"created_by":1,"updated_at":1421298011125,"updated_by":1},{"id":102,"uuid":"b1ce2304-9642-4f09-8acb-12c97b73166a","name":"mongodb","slug":"mongodb","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421298011125,"created_by":1,"updated_at":1421298011125,"updated_by":1},{"id":103,"uuid":"cb725360-6874-41ef-abc6-3a001a98a893","name":"vnext","slug":"vnext-2","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421335986680,"created_by":1,"updated_at":1421335986680,"updated_by":1},{"id":104,"uuid":"70d1a8a9-0485-4859-8a3e-c23b801a59e5","name":"grunt","slug":"grunt","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1422559310934,"created_by":1,"updated_at":1422559310934,"updated_by":1},{"id":105,"uuid":"b8746221-a400-4ebc-87cc-4197921b7298","name":"patterns","slug":"patterns","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1422564551022,"created_by":1,"updated_at":1422564551022,"updated_by":1},{"id":106,"uuid":"247c0794-9819-4a4d-84ba-89492b5dc625","name":"vs2015","slug":"vs2015","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1425948800441,"created_by":1,"updated_at":1425948800441,"updated_by":1},{"id":107,"uuid":"aae91f9b-b68b-406a-bd6e-551d2f5c1314","name":"wiredep","slug":"wiredep","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1425952674136,"created_by":1,"updated_at":1425952674136,"updated_by":1},{"id":108,"uuid":"6ed80338-4bce-40c7-9906-af266053844b","name":"vscode","slug":"vscode","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1442348709270,"created_by":1,"updated_at":1442348709270,"updated_by":1},{"id":109,"uuid":"579ad31b-d190-4684-89cc-68fc2220f298","name":"xplat","slug":"xplat","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1442348709286,"created_by":1,"updated_at":1442348709286,"updated_by":1},{"id":110,"uuid":"42f9036d-811a-4e49-b6cf-ec4f19acc7ba","name":"dnx","slug":"dnx","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1442348709286,"created_by":1,"updated_at":1442348709286,"updated_by":1},{"id":111,"uuid":"9487834a-2f4c-45a1-8d33-ec5ae80329a5","name":"ch9","slug":"ch9","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1446161280161,"created_by":1,"updated_at":1446161280161,"updated_by":1},{"id":112,"uuid":"b20003c3-ef78-45b7-ab8a-f5a035de4902","name":"docker","slug":"docker","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1446479028444,"created_by":1,"updated_at":1446479028444,"updated_by":1},{"id":113,"uuid":"b81d4185-8241-4b64-b073-59d689ffe2c5","name":"tutum","slug":"tutum","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1446479028475,"created_by":1,"updated_at":1446479028475,"updated_by":1},{"id":114,"uuid":"5f28f371-03ab-4853-812b-bd11c66f0dbe","name":"webhooks","slug":"webhooks","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1446479028600,"created_by":1,"updated_at":1446479028600,"updated_by":1},{"id":115,"uuid":"ac186e70-cea5-4b5e-a92f-921a7ebbb02c","name":"cicd","slug":"cicd","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1446479028616,"created_by":1,"updated_at":1446479028616,"updated_by":1},{"id":116,"uuid":"3768c9d4-066f-49af-b4ec-ac9e1bd6ccbf","name":"angular2","slug":"angular2","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1447431728320,"created_by":1,"updated_at":1447431728320,"updated_by":1},{"id":117,"uuid":"269a8e04-42ee-411b-a154-cc6ba16b3322","name":"spa","slug":"spa","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1447431728336,"created_by":1,"updated_at":1447431728336,"updated_by":1},{"id":118,"uuid":"3a8038e1-e03c-4da1-9b9c-7f8e6ad9040e","name":"dotnet-cli","slug":"dotnet-cli","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1448044091304,"created_by":1,"updated_at":1448044091304,"updated_by":1},{"id":119,"uuid":"54dccce0-18d9-4505-a207-015c1a5bfcd2","name":"connect","slug":"connect","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1448044091333,"created_by":1,"updated_at":1448044091333,"updated_by":1},{"id":120,"uuid":"a996aac1-6705-436c-8774-b3e939b6d2cb","name":"npm","slug":"npm","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1448915698926,"created_by":1,"updated_at":1448915698926,"updated_by":1},{"id":121,"uuid":"09170bd6-6285-4823-b0e2-a2590875b4e3","name":"bower","slug":"bower","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1448915698942,"created_by":1,"updated_at":1448915698942,"updated_by":1},{"id":122,"uuid":"9153f932-7d18-4757-83ee-b552a5f560c1","name":"config","slug":"config","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1448915698958,"created_by":1,"updated_at":1448915698958,"updated_by":1},{"id":123,"uuid":"2d321589-60de-4d45-bdfd-5efee74d7c26","name":"aspnetcore","slug":"aspnetcore","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1454732279342,"created_by":1,"updated_at":1454732279342,"updated_by":1},{"id":124,"uuid":"0573c569-198d-476f-bd94-cc7e9dac657e","name":"pluralsight","slug":"pluralsight","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1454732279373,"created_by":1,"updated_at":1454732279373,"updated_by":1},{"id":125,"uuid":"8f66d13e-a3df-4bb9-9047-97322986cbe6","name":"redis","slug":"redis","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1455312231899,"created_by":1,"updated_at":1455312231899,"updated_by":1},{"id":126,"uuid":"39dbe11f-f421-41af-be28-757b15e9de0d","name":"nginx","slug":"nginx","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1455312231914,"created_by":1,"updated_at":1455312231914,"updated_by":1},{"id":127,"uuid":"cdc83a19-42c3-4297-89bb-32ac87487526","name":"haproxy","slug":"haproxy","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1455312231930,"created_by":1,"updated_at":1455312231930,"updated_by":1},{"id":128,"uuid":"c6f4ab29-3a12-4d77-8f77-542909a86c75","name":"docker-compose","slug":"docker-compose","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1455312231930,"created_by":1,"updated_at":1455312231930,"updated_by":1},{"id":129,"uuid":"8186519a-ebb7-4adf-9dcf-1788ca203d33","name":"boostrap","slug":"boostrap","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1458097409162,"created_by":1,"updated_at":1458097409162,"updated_by":1},{"id":130,"uuid":"d3874cec-3f80-470e-810e-d959e6cc6e81","name":"materialdesign","slug":"materialdesign","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1458097409162,"created_by":1,"updated_at":1458097409162,"updated_by":1},{"id":131,"uuid":"af5e33f0-2831-4921-91de-f0058e3366c7","name":"semanticui","slug":"semanticui","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1458097409193,"created_by":1,"updated_at":1458097409193,"updated_by":1},{"id":132,"uuid":"157773a2-575e-494d-906d-42cec8b0acca","name":"slack","slug":"slack","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1459259731219,"created_by":1,"updated_at":1459259731219,"updated_by":1},{"id":133,"uuid":"73db03ed-e4d5-43d4-80ca-a372734a1fa6","name":"community","slug":"community","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1459259731234,"created_by":1,"updated_at":1459259731234,"updated_by":1},{"id":134,"uuid":"008507e2-b594-417c-9e7d-dffb3c17d3f8","name":"kestrel","slug":"kestrel","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1460430375704,"created_by":1,"updated_at":1460430375704,"updated_by":1},{"id":135,"uuid":"1a91dd33-ff8e-46ba-b1e8-eb1003376c3b","name":"debugging","slug":"debugging","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1460676079255,"created_by":1,"updated_at":1460676079255,"updated_by":1},{"id":136,"uuid":"37549cdc-568e-432c-bc38-d3a98ccbdb34","name":"logo","slug":"logo","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1461599407567,"created_by":1,"updated_at":1461599407567,"updated_by":1},{"id":137,"uuid":"8bc3bb1c-d4a3-46b4-b3f3-fd922fbf697d","name":"angular","slug":"angular","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1461608141038,"created_by":1,"updated_at":1461608141038,"updated_by":1},{"id":138,"uuid":"c97f7dc8-64c9-4a1d-9a22-3ebef621d7bd","name":"express","slug":"express","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1461608141053,"created_by":1,"updated_at":1461608141053,"updated_by":1},{"id":139,"uuid":"3510e0d8-8f4d-450c-8b48-4e341d5b66d6","name":"angular-cli","slug":"angular-cli","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1461770974313,"created_by":1,"updated_at":1461770974313,"updated_by":1},{"id":140,"uuid":"0fbca034-a7e9-4f7a-a027-2cc4f921c77f","name":"tooling","slug":"tooling","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1461770974345,"created_by":1,"updated_at":1461770974345,"updated_by":1},{"id":141,"uuid":"a33a8721-2f24-4d31-9b68-1739bc113fc9","name":"commandline","slug":"commandline","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1461785806866,"created_by":1,"updated_at":1461785806866,"updated_by":1},{"id":142,"uuid":"fa00097b-8b50-4686-aadd-5bb52938edc3","name":"cli","slug":"cli","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1461785806882,"created_by":1,"updated_at":1461785806882,"updated_by":1},{"id":143,"uuid":"980412c9-1e95-44d9-80f0-3a06e97b7c43","name":"codeship","slug":"codeship","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1463095460464,"created_by":1,"updated_at":1463095460464,"updated_by":1},{"id":144,"uuid":"ae05e656-b4ce-41dc-a2ef-52a98c29c014","name":"dotnetcore","slug":"dotnetcore","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1463239113470,"created_by":1,"updated_at":1463239113470,"updated_by":1},{"id":145,"uuid":"ee9056f4-6455-4916-9fbb-dcffd7b66360","name":"dotnet","slug":"dotnet","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1463596315161,"created_by":1,"updated_at":1463596315161,"updated_by":1},{"id":146,"uuid":"ddc8e785-6635-4e0c-a4b8-d010182df635","name":"links","slug":"links","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1464115084603,"created_by":1,"updated_at":1464115084603,"updated_by":1},{"id":147,"uuid":"831e13b7-5f15-400e-a28d-caad40a9d7d4","name":"weekly ink","slug":"weekly-ink","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1464115084618,"created_by":1,"updated_at":1464115084618,"updated_by":1},{"id":148,"uuid":"c52865be-7776-4909-a9c1-55ba4a37507a","name":"soap","slug":"soap","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1464209529418,"created_by":1,"updated_at":1464209529418,"updated_by":1},{"id":149,"uuid":"a2d6bd46-bcab-407a-afe9-b7230d517bee","name":"wcf","slug":"wcf","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1464209529418,"created_by":1,"updated_at":1464209529418,"updated_by":1},{"id":150,"uuid":"5d4dbae7-eedf-4756-9c48-5afcd9633981","name":"developer tools","slug":"developer-tools","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1464895899713,"created_by":1,"updated_at":1464895899713,"updated_by":1},{"id":151,"uuid":"32c587f9-84e2-40e7-92eb-dae0f481ce76","name":"dontnetconf","slug":"dontnetconf","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1465569756283,"created_by":1,"updated_at":1465569756283,"updated_by":1},{"id":152,"uuid":"54fdc300-0ba6-48b2-b611-2d3f9c8459ea","name":"microsoft","slug":"microsoft","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1468260670569,"created_by":1,"updated_at":1468260670569,"updated_by":1},{"id":153,"uuid":"af66d286-8647-4917-88cb-67ad7be10a2b","name":"#docs","slug":"docs","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1469051819595,"created_by":1,"updated_at":1469051819595,"updated_by":1},{"id":154,"uuid":"fb9f7ee3-261c-4da2-bba1-714494d5a1eb","name":"github","slug":"github","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1469821372876,"created_by":1,"updated_at":1469821372876,"updated_by":1},{"id":155,"uuid":"3a48f329-bf59-4bfc-af4c-37290106323d","name":"parallels","slug":"parallels","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1471469690302,"created_by":1,"updated_at":1471469690302,"updated_by":1},{"id":156,"uuid":"97790067-865a-4fde-81cd-c511544ba1b4","name":"windows","slug":"windows","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1471469690349,"created_by":1,"updated_at":1471469690349,"updated_by":1},{"id":157,"uuid":"d6a1b5ec-f307-4b11-8105-6a40f39ca5ce","name":"apache","slug":"apache","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1476909181240,"created_by":1,"updated_at":1476909181240,"updated_by":1},{"id":158,"uuid":"393f91e4-b5ce-4de0-b5e8-91045882685a","name":"centos","slug":"centos","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1476909181287,"created_by":1,"updated_at":1476909181287,"updated_by":1}],"posts_tags":[{"id":7,"post_id":3,"tag_id":31,"sort_order":0},{"id":8,"post_id":3,"tag_id":77,"sort_order":1},{"id":9,"post_id":3,"tag_id":32,"sort_order":2},{"id":10,"post_id":4,"tag_id":29,"sort_order":0},{"id":11,"post_id":4,"tag_id":32,"sort_order":1},{"id":12,"post_id":4,"tag_id":31,"sort_order":2},{"id":13,"post_id":4,"tag_id":78,"sort_order":3},{"id":14,"post_id":5,"tag_id":14,"sort_order":0},{"id":15,"post_id":6,"tag_id":2,"sort_order":0},{"id":16,"post_id":6,"tag_id":8,"sort_order":1},{"id":17,"post_id":7,"tag_id":20,"sort_order":0},{"id":18,"post_id":7,"tag_id":48,"sort_order":1},{"id":19,"post_id":8,"tag_id":8,"sort_order":0},{"id":20,"post_id":8,"tag_id":15,"sort_order":1},{"id":21,"post_id":8,"tag_id":17,"sort_order":2},{"id":22,"post_id":8,"tag_id":82,"sort_order":3},{"id":23,"post_id":9,"tag_id":2,"sort_order":0},{"id":24,"post_id":9,"tag_id":9,"sort_order":1},{"id":25,"post_id":9,"tag_id":11,"sort_order":2},{"id":26,"post_id":9,"tag_id":15,"sort_order":3},{"id":27,"post_id":9,"tag_id":21,"sort_order":4},{"id":28,"post_id":9,"tag_id":41,"sort_order":5},{"id":29,"post_id":9,"tag_id":27,"sort_order":6},{"id":30,"post_id":9,"tag_id":43,"sort_order":7},{"id":31,"post_id":9,"tag_id":47,"sort_order":8},{"id":32,"post_id":10,"tag_id":2,"sort_order":0},{"id":33,"post_id":10,"tag_id":3,"sort_order":1},{"id":34,"post_id":10,"tag_id":7,"sort_order":2},{"id":35,"post_id":10,"tag_id":14,"sort_order":3},{"id":36,"post_id":10,"tag_id":9,"sort_order":4},{"id":37,"post_id":10,"tag_id":13,"sort_order":5},{"id":38,"post_id":10,"tag_id":15,"sort_order":6},{"id":39,"post_id":10,"tag_id":17,"sort_order":7},{"id":40,"post_id":10,"tag_id":23,"sort_order":8},{"id":41,"post_id":10,"tag_id":83,"sort_order":9},{"id":42,"post_id":11,"tag_id":2,"sort_order":0},{"id":43,"post_id":11,"tag_id":3,"sort_order":1},{"id":44,"post_id":11,"tag_id":13,"sort_order":2},{"id":45,"post_id":11,"tag_id":7,"sort_order":3},{"id":46,"post_id":11,"tag_id":9,"sort_order":4},{"id":47,"post_id":11,"tag_id":14,"sort_order":5},{"id":48,"post_id":11,"tag_id":15,"sort_order":6},{"id":49,"post_id":11,"tag_id":17,"sort_order":7},{"id":50,"post_id":11,"tag_id":23,"sort_order":8},{"id":51,"post_id":11,"tag_id":83,"sort_order":9},{"id":52,"post_id":12,"tag_id":6,"sort_order":0},{"id":53,"post_id":12,"tag_id":56,"sort_order":1},{"id":59,"post_id":14,"tag_id":4,"sort_order":0},{"id":60,"post_id":14,"tag_id":48,"sort_order":1},{"id":61,"post_id":14,"tag_id":30,"sort_order":2},{"id":62,"post_id":14,"tag_id":72,"sort_order":3},{"id":63,"post_id":14,"tag_id":76,"sort_order":4},{"id":64,"post_id":15,"tag_id":2,"sort_order":0},{"id":65,"post_id":15,"tag_id":6,"sort_order":1},{"id":66,"post_id":15,"tag_id":10,"sort_order":2},{"id":67,"post_id":15,"tag_id":11,"sort_order":3},{"id":68,"post_id":15,"tag_id":14,"sort_order":4},{"id":69,"post_id":16,"tag_id":10,"sort_order":0},{"id":70,"post_id":16,"tag_id":44,"sort_order":1},{"id":71,"post_id":16,"tag_id":53,"sort_order":2},{"id":72,"post_id":17,"tag_id":2,"sort_order":0},{"id":73,"post_id":17,"tag_id":3,"sort_order":1},{"id":74,"post_id":17,"tag_id":10,"sort_order":2},{"id":75,"post_id":17,"tag_id":13,"sort_order":3},{"id":76,"post_id":17,"tag_id":35,"sort_order":4},{"id":77,"post_id":17,"tag_id":38,"sort_order":5},{"id":78,"post_id":18,"tag_id":2,"sort_order":0},{"id":79,"post_id":18,"tag_id":3,"sort_order":1},{"id":80,"post_id":18,"tag_id":14,"sort_order":2},{"id":81,"post_id":18,"tag_id":38,"sort_order":3},{"id":82,"post_id":19,"tag_id":14,"sort_order":0},{"id":83,"post_id":19,"tag_id":58,"sort_order":1},{"id":84,"post_id":19,"tag_id":15,"sort_order":2},{"id":85,"post_id":19,"tag_id":63,"sort_order":3},{"id":86,"post_id":20,"tag_id":2,"sort_order":0},{"id":87,"post_id":20,"tag_id":14,"sort_order":1},{"id":88,"post_id":20,"tag_id":13,"sort_order":2},{"id":89,"post_id":20,"tag_id":25,"sort_order":3},{"id":90,"post_id":20,"tag_id":74,"sort_order":4},{"id":91,"post_id":21,"tag_id":25,"sort_order":0},{"id":92,"post_id":21,"tag_id":45,"sort_order":1},{"id":93,"post_id":21,"tag_id":26,"sort_order":2},{"id":94,"post_id":21,"tag_id":52,"sort_order":3},{"id":95,"post_id":22,"tag_id":3,"sort_order":0},{"id":96,"post_id":22,"tag_id":4,"sort_order":1},{"id":97,"post_id":22,"tag_id":13,"sort_order":2},{"id":98,"post_id":22,"tag_id":6,"sort_order":3},{"id":99,"post_id":22,"tag_id":40,"sort_order":4},{"id":100,"post_id":22,"tag_id":14,"sort_order":5},{"id":101,"post_id":22,"tag_id":75,"sort_order":6},{"id":102,"post_id":22,"tag_id":76,"sort_order":7},{"id":103,"post_id":23,"tag_id":7,"sort_order":0},{"id":104,"post_id":23,"tag_id":13,"sort_order":1},{"id":105,"post_id":23,"tag_id":14,"sort_order":2},{"id":106,"post_id":23,"tag_id":30,"sort_order":3},{"id":107,"post_id":23,"tag_id":70,"sort_order":4},{"id":108,"post_id":24,"tag_id":3,"sort_order":0},{"id":109,"post_id":24,"tag_id":4,"sort_order":1},{"id":110,"post_id":24,"tag_id":29,"sort_order":2},{"id":111,"post_id":24,"tag_id":57,"sort_order":3},{"id":112,"post_id":24,"tag_id":76,"sort_order":4},{"id":113,"post_id":24,"tag_id":48,"sort_order":5},{"id":114,"post_id":25,"tag_id":3,"sort_order":0},{"id":115,"post_id":25,"tag_id":5,"sort_order":1},{"id":116,"post_id":25,"tag_id":7,"sort_order":2},{"id":117,"post_id":25,"tag_id":14,"sort_order":3},{"id":118,"post_id":25,"tag_id":54,"sort_order":4},{"id":119,"post_id":25,"tag_id":6,"sort_order":5},{"id":120,"post_id":25,"tag_id":55,"sort_order":6},{"id":121,"post_id":26,"tag_id":4,"sort_order":0},{"id":122,"post_id":26,"tag_id":18,"sort_order":1},{"id":123,"post_id":26,"tag_id":26,"sort_order":2},{"id":124,"post_id":26,"tag_id":71,"sort_order":3},{"id":125,"post_id":26,"tag_id":21,"sort_order":4},{"id":126,"post_id":27,"tag_id":2,"sort_order":0},{"id":127,"post_id":27,"tag_id":3,"sort_order":1},{"id":128,"post_id":27,"tag_id":6,"sort_order":2},{"id":129,"post_id":27,"tag_id":15,"sort_order":3},{"id":130,"post_id":27,"tag_id":46,"sort_order":4},{"id":131,"post_id":27,"tag_id":76,"sort_order":5},{"id":132,"post_id":27,"tag_id":17,"sort_order":6},{"id":133,"post_id":28,"tag_id":3,"sort_order":0},{"id":134,"post_id":28,"tag_id":5,"sort_order":1},{"id":135,"post_id":28,"tag_id":14,"sort_order":2},{"id":136,"post_id":28,"tag_id":50,"sort_order":3},{"id":137,"post_id":28,"tag_id":68,"sort_order":4},{"id":138,"post_id":28,"tag_id":66,"sort_order":5},{"id":139,"post_id":28,"tag_id":83,"sort_order":6},{"id":140,"post_id":29,"tag_id":49,"sort_order":0},{"id":141,"post_id":29,"tag_id":62,"sort_order":1},{"id":142,"post_id":30,"tag_id":3,"sort_order":0},{"id":143,"post_id":30,"tag_id":48,"sort_order":1},{"id":144,"post_id":30,"tag_id":76,"sort_order":2},{"id":145,"post_id":30,"tag_id":4,"sort_order":3},{"id":146,"post_id":31,"tag_id":2,"sort_order":0},{"id":147,"post_id":31,"tag_id":15,"sort_order":1},{"id":148,"post_id":31,"tag_id":40,"sort_order":2},{"id":149,"post_id":31,"tag_id":42,"sort_order":3},{"id":150,"post_id":31,"tag_id":27,"sort_order":4},{"id":151,"post_id":32,"tag_id":3,"sort_order":0},{"id":152,"post_id":32,"tag_id":5,"sort_order":1},{"id":153,"post_id":32,"tag_id":14,"sort_order":2},{"id":154,"post_id":32,"tag_id":7,"sort_order":3},{"id":155,"post_id":32,"tag_id":12,"sort_order":4},{"id":156,"post_id":32,"tag_id":80,"sort_order":5},{"id":158,"post_id":33,"tag_id":73,"sort_order":0},{"id":159,"post_id":33,"tag_id":79,"sort_order":1},{"id":160,"post_id":33,"tag_id":81,"sort_order":2},{"id":161,"post_id":34,"tag_id":14,"sort_order":0},{"id":162,"post_id":34,"tag_id":36,"sort_order":1},{"id":163,"post_id":35,"tag_id":2,"sort_order":0},{"id":164,"post_id":35,"tag_id":12,"sort_order":1},{"id":165,"post_id":35,"tag_id":83,"sort_order":2},{"id":166,"post_id":35,"tag_id":28,"sort_order":3},{"id":167,"post_id":36,"tag_id":2,"sort_order":0},{"id":168,"post_id":36,"tag_id":14,"sort_order":1},{"id":169,"post_id":36,"tag_id":12,"sort_order":2},{"id":170,"post_id":36,"tag_id":16,"sort_order":3},{"id":171,"post_id":36,"tag_id":18,"sort_order":4},{"id":172,"post_id":36,"tag_id":24,"sort_order":5},{"id":173,"post_id":36,"tag_id":83,"sort_order":6},{"id":174,"post_id":36,"tag_id":22,"sort_order":7},{"id":175,"post_id":37,"tag_id":2,"sort_order":0},{"id":176,"post_id":37,"tag_id":3,"sort_order":1},{"id":177,"post_id":37,"tag_id":5,"sort_order":2},{"id":178,"post_id":37,"tag_id":83,"sort_order":3},{"id":179,"post_id":38,"tag_id":2,"sort_order":0},{"id":180,"post_id":38,"tag_id":16,"sort_order":1},{"id":181,"post_id":38,"tag_id":24,"sort_order":2},{"id":182,"post_id":38,"tag_id":18,"sort_order":3},{"id":183,"post_id":38,"tag_id":22,"sort_order":4},{"id":184,"post_id":39,"tag_id":2,"sort_order":0},{"id":185,"post_id":39,"tag_id":3,"sort_order":1},{"id":186,"post_id":39,"tag_id":28,"sort_order":2},{"id":187,"post_id":39,"tag_id":37,"sort_order":3},{"id":188,"post_id":39,"tag_id":5,"sort_order":4},{"id":189,"post_id":40,"tag_id":2,"sort_order":0},{"id":190,"post_id":40,"tag_id":20,"sort_order":1},{"id":191,"post_id":40,"tag_id":83,"sort_order":2},{"id":192,"post_id":40,"tag_id":64,"sort_order":3},{"id":193,"post_id":40,"tag_id":69,"sort_order":4},{"id":194,"post_id":40,"tag_id":22,"sort_order":5},{"id":195,"post_id":41,"tag_id":2,"sort_order":0},{"id":196,"post_id":41,"tag_id":11,"sort_order":1},{"id":197,"post_id":41,"tag_id":83,"sort_order":2},{"id":198,"post_id":41,"tag_id":33,"sort_order":3},{"id":199,"post_id":42,"tag_id":2,"sort_order":0},{"id":200,"post_id":42,"tag_id":8,"sort_order":1},{"id":201,"post_id":42,"tag_id":19,"sort_order":2},{"id":202,"post_id":42,"tag_id":39,"sort_order":3},{"id":203,"post_id":42,"tag_id":83,"sort_order":4},{"id":204,"post_id":43,"tag_id":2,"sort_order":0},{"id":205,"post_id":43,"tag_id":11,"sort_order":1},{"id":206,"post_id":43,"tag_id":8,"sort_order":2},{"id":207,"post_id":43,"tag_id":65,"sort_order":3},{"id":208,"post_id":43,"tag_id":83,"sort_order":4},{"id":209,"post_id":43,"tag_id":19,"sort_order":5},{"id":210,"post_id":43,"tag_id":39,"sort_order":6},{"id":211,"post_id":44,"tag_id":3,"sort_order":0},{"id":212,"post_id":44,"tag_id":60,"sort_order":1},{"id":213,"post_id":44,"tag_id":83,"sort_order":2},{"id":368,"post_id":49,"tag_id":84,"sort_order":0},{"id":369,"post_id":49,"tag_id":90,"sort_order":1},{"id":370,"post_id":49,"tag_id":91,"sort_order":2},{"id":375,"post_id":48,"tag_id":84,"sort_order":0},{"id":376,"post_id":48,"tag_id":87,"sort_order":1},{"id":377,"post_id":48,"tag_id":88,"sort_order":2},{"id":378,"post_id":48,"tag_id":89,"sort_order":3},{"id":379,"post_id":47,"tag_id":84,"sort_order":0},{"id":380,"post_id":47,"tag_id":85,"sort_order":1},{"id":381,"post_id":47,"tag_id":86,"sort_order":2},{"id":386,"post_id":2,"tag_id":15,"sort_order":0},{"id":387,"post_id":2,"tag_id":31,"sort_order":1},{"id":388,"post_id":2,"tag_id":96,"sort_order":2},{"id":389,"post_id":2,"tag_id":97,"sort_order":3},{"id":390,"post_id":2,"tag_id":98,"sort_order":4},{"id":391,"post_id":2,"tag_id":99,"sort_order":5},{"id":402,"post_id":13,"tag_id":31,"sort_order":0},{"id":403,"post_id":13,"tag_id":59,"sort_order":1},{"id":404,"post_id":13,"tag_id":67,"sort_order":2},{"id":405,"post_id":13,"tag_id":98,"sort_order":3},{"id":406,"post_id":13,"tag_id":100,"sort_order":4},{"id":676,"post_id":50,"tag_id":31,"sort_order":0},{"id":677,"post_id":50,"tag_id":84,"sort_order":1},{"id":678,"post_id":50,"tag_id":98,"sort_order":2},{"id":679,"post_id":50,"tag_id":100,"sort_order":3},{"id":680,"post_id":50,"tag_id":101,"sort_order":4},{"id":681,"post_id":50,"tag_id":102,"sort_order":5},{"id":682,"post_id":50,"tag_id":103,"sort_order":6},{"id":740,"post_id":51,"tag_id":31,"sort_order":0},{"id":741,"post_id":51,"tag_id":84,"sort_order":1},{"id":742,"post_id":51,"tag_id":90,"sort_order":2},{"id":743,"post_id":51,"tag_id":104,"sort_order":3},{"id":744,"post_id":51,"tag_id":105,"sort_order":4},{"id":812,"post_id":52,"tag_id":31,"sort_order":0},{"id":813,"post_id":52,"tag_id":84,"sort_order":1},{"id":814,"post_id":52,"tag_id":90,"sort_order":2},{"id":815,"post_id":52,"tag_id":104,"sort_order":3},{"id":816,"post_id":52,"tag_id":106,"sort_order":4},{"id":817,"post_id":52,"tag_id":107,"sort_order":5},{"id":822,"post_id":46,"tag_id":92,"sort_order":0},{"id":823,"post_id":46,"tag_id":93,"sort_order":1},{"id":824,"post_id":46,"tag_id":94,"sort_order":2},{"id":825,"post_id":46,"tag_id":95,"sort_order":3},{"id":826,"post_id":53,"tag_id":108,"sort_order":0},{"id":827,"post_id":53,"tag_id":84,"sort_order":1},{"id":828,"post_id":53,"tag_id":109,"sort_order":2},{"id":829,"post_id":53,"tag_id":110,"sort_order":3},{"id":830,"post_id":55,"tag_id":32,"sort_order":0},{"id":831,"post_id":55,"tag_id":111,"sort_order":1},{"id":832,"post_id":56,"tag_id":112,"sort_order":0},{"id":833,"post_id":56,"tag_id":84,"sort_order":1},{"id":834,"post_id":56,"tag_id":113,"sort_order":2},{"id":835,"post_id":56,"tag_id":114,"sort_order":3},{"id":836,"post_id":56,"tag_id":115,"sort_order":4},{"id":837,"post_id":56,"tag_id":15,"sort_order":5},{"id":838,"post_id":57,"tag_id":116,"sort_order":0},{"id":839,"post_id":57,"tag_id":84,"sort_order":1},{"id":840,"post_id":57,"tag_id":117,"sort_order":2},{"id":841,"post_id":58,"tag_id":118,"sort_order":0},{"id":842,"post_id":58,"tag_id":84,"sort_order":1},{"id":843,"post_id":58,"tag_id":119,"sort_order":2},{"id":844,"post_id":59,"tag_id":84,"sort_order":0},{"id":845,"post_id":59,"tag_id":120,"sort_order":1},{"id":846,"post_id":59,"tag_id":121,"sort_order":2},{"id":847,"post_id":59,"tag_id":122,"sort_order":3},{"id":848,"post_id":60,"tag_id":84,"sort_order":0},{"id":849,"post_id":60,"tag_id":123,"sort_order":1},{"id":850,"post_id":60,"tag_id":116,"sort_order":2},{"id":851,"post_id":60,"tag_id":124,"sort_order":3},{"id":852,"post_id":60,"tag_id":89,"sort_order":4},{"id":853,"post_id":61,"tag_id":123,"sort_order":0},{"id":854,"post_id":61,"tag_id":116,"sort_order":1},{"id":855,"post_id":61,"tag_id":112,"sort_order":2},{"id":856,"post_id":61,"tag_id":125,"sort_order":3},{"id":857,"post_id":61,"tag_id":126,"sort_order":4},{"id":858,"post_id":61,"tag_id":127,"sort_order":5},{"id":859,"post_id":61,"tag_id":128,"sort_order":6},{"id":860,"post_id":62,"tag_id":32,"sort_order":0},{"id":861,"post_id":62,"tag_id":78,"sort_order":1},{"id":862,"post_id":62,"tag_id":90,"sort_order":2},{"id":863,"post_id":62,"tag_id":120,"sort_order":3},{"id":864,"post_id":62,"tag_id":123,"sort_order":4},{"id":865,"post_id":64,"tag_id":116,"sort_order":0},{"id":866,"post_id":64,"tag_id":123,"sort_order":1},{"id":867,"post_id":64,"tag_id":91,"sort_order":2},{"id":868,"post_id":64,"tag_id":124,"sort_order":3},{"id":869,"post_id":64,"tag_id":94,"sort_order":4},{"id":870,"post_id":65,"tag_id":89,"sort_order":0},{"id":871,"post_id":65,"tag_id":129,"sort_order":1},{"id":872,"post_id":65,"tag_id":123,"sort_order":2},{"id":873,"post_id":65,"tag_id":130,"sort_order":3},{"id":874,"post_id":65,"tag_id":131,"sort_order":4},{"id":875,"post_id":66,"tag_id":123,"sort_order":0},{"id":876,"post_id":66,"tag_id":132,"sort_order":1},{"id":877,"post_id":66,"tag_id":133,"sort_order":2},{"id":878,"post_id":68,"tag_id":134,"sort_order":0},{"id":879,"post_id":68,"tag_id":123,"sort_order":1},{"id":880,"post_id":68,"tag_id":116,"sort_order":2},{"id":881,"post_id":69,"tag_id":123,"sort_order":0},{"id":882,"post_id":69,"tag_id":135,"sort_order":1},{"id":883,"post_id":69,"tag_id":108,"sort_order":2},{"id":884,"post_id":69,"tag_id":118,"sort_order":3},{"id":885,"post_id":70,"tag_id":123,"sort_order":0},{"id":886,"post_id":70,"tag_id":136,"sort_order":1},{"id":887,"post_id":70,"tag_id":133,"sort_order":2},{"id":888,"post_id":71,"tag_id":116,"sort_order":0},{"id":889,"post_id":71,"tag_id":137,"sort_order":1},{"id":890,"post_id":71,"tag_id":90,"sort_order":2},{"id":891,"post_id":71,"tag_id":138,"sort_order":3},{"id":892,"post_id":71,"tag_id":63,"sort_order":4},{"id":896,"post_id":72,"tag_id":140,"sort_order":0},{"id":897,"post_id":72,"tag_id":141,"sort_order":1},{"id":898,"post_id":72,"tag_id":142,"sort_order":2},{"id":899,"post_id":73,"tag_id":116,"sort_order":0},{"id":900,"post_id":73,"tag_id":106,"sort_order":1},{"id":901,"post_id":74,"tag_id":116,"sort_order":0},{"id":902,"post_id":74,"tag_id":130,"sort_order":1},{"id":903,"post_id":74,"tag_id":91,"sort_order":2},{"id":904,"post_id":75,"tag_id":116,"sort_order":0},{"id":905,"post_id":75,"tag_id":139,"sort_order":1},{"id":906,"post_id":75,"tag_id":143,"sort_order":2},{"id":907,"post_id":75,"tag_id":115,"sort_order":3},{"id":908,"post_id":75,"tag_id":15,"sort_order":4},{"id":909,"post_id":76,"tag_id":123,"sort_order":0},{"id":910,"post_id":76,"tag_id":132,"sort_order":1},{"id":911,"post_id":76,"tag_id":133,"sort_order":2},{"id":912,"post_id":76,"tag_id":144,"sort_order":3},{"id":913,"post_id":77,"tag_id":116,"sort_order":0},{"id":914,"post_id":77,"tag_id":139,"sort_order":1},{"id":915,"post_id":78,"tag_id":116,"sort_order":0},{"id":916,"post_id":78,"tag_id":139,"sort_order":1},{"id":917,"post_id":78,"tag_id":63,"sort_order":2},{"id":918,"post_id":79,"tag_id":123,"sort_order":0},{"id":919,"post_id":79,"tag_id":145,"sort_order":1},{"id":920,"post_id":79,"tag_id":63,"sort_order":2},{"id":921,"post_id":82,"tag_id":146,"sort_order":0},{"id":922,"post_id":82,"tag_id":147,"sort_order":1},{"id":923,"post_id":83,"tag_id":123,"sort_order":0},{"id":924,"post_id":83,"tag_id":148,"sort_order":1},{"id":925,"post_id":83,"tag_id":149,"sort_order":2},{"id":926,"post_id":83,"tag_id":34,"sort_order":3},{"id":927,"post_id":84,"tag_id":146,"sort_order":0},{"id":928,"post_id":84,"tag_id":147,"sort_order":1},{"id":929,"post_id":85,"tag_id":116,"sort_order":0},{"id":930,"post_id":85,"tag_id":139,"sort_order":1},{"id":931,"post_id":86,"tag_id":116,"sort_order":0},{"id":932,"post_id":86,"tag_id":139,"sort_order":1},{"id":933,"post_id":86,"tag_id":63,"sort_order":2},{"id":934,"post_id":87,"tag_id":150,"sort_order":0},{"id":935,"post_id":88,"tag_id":116,"sort_order":0},{"id":936,"post_id":88,"tag_id":91,"sort_order":1},{"id":937,"post_id":88,"tag_id":123,"sort_order":2},{"id":938,"post_id":88,"tag_id":112,"sort_order":3},{"id":939,"post_id":88,"tag_id":133,"sort_order":4},{"id":940,"post_id":89,"tag_id":151,"sort_order":0},{"id":941,"post_id":89,"tag_id":78,"sort_order":1},{"id":942,"post_id":89,"tag_id":133,"sort_order":2},{"id":943,"post_id":90,"tag_id":116,"sort_order":0},{"id":944,"post_id":90,"tag_id":123,"sort_order":1},{"id":945,"post_id":90,"tag_id":112,"sort_order":2},{"id":946,"post_id":90,"tag_id":91,"sort_order":3},{"id":947,"post_id":91,"tag_id":152,"sort_order":0},{"id":948,"post_id":91,"tag_id":31,"sort_order":1},{"id":949,"post_id":91,"tag_id":153,"sort_order":2},{"id":950,"post_id":92,"tag_id":116,"sort_order":0},{"id":951,"post_id":92,"tag_id":15,"sort_order":1},{"id":952,"post_id":92,"tag_id":154,"sort_order":2},{"id":953,"post_id":92,"tag_id":124,"sort_order":3},{"id":954,"post_id":93,"tag_id":123,"sort_order":0},{"id":955,"post_id":93,"tag_id":153,"sort_order":1},{"id":956,"post_id":94,"tag_id":155,"sort_order":0},{"id":957,"post_id":94,"tag_id":156,"sort_order":1},{"id":958,"post_id":95,"tag_id":157,"sort_order":0},{"id":959,"post_id":95,"tag_id":158,"sort_order":1},{"id":960,"post_id":95,"tag_id":123,"sort_order":2},{"id":961,"post_id":96,"tag_id":112,"sort_order":0},{"id":962,"post_id":96,"tag_id":155,"sort_order":1},{"id":963,"post_id":96,"tag_id":123,"sort_order":2},{"id":964,"post_id":97,"tag_id":145,"sort_order":0},{"id":965,"post_id":97,"tag_id":123,"sort_order":1},{"id":966,"post_id":98,"tag_id":145,"sort_order":0},{"id":967,"post_id":98,"tag_id":118,"sort_order":1},{"id":968,"post_id":98,"tag_id":123,"sort_order":2}],"apps":[],"app_settings":[],"app_fields":[]}}